/*
 * File: app/controller/ProductDetailsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.ProductDetailsController', {
    extend: 'Ext.app.Controller',

    stores: [
        'SingleProductForStoreHampers',
        'SingleProduct',
        'QuoteResponse',
        'EscrowDetail',
        'PreviewEscrowDoc',
        'VideoForSingleProducts',
        'ProductsInTheSameBucket'
    ],
    views: [
        'PreviewingQuotationFileWin',
        'PreviewingEscrowFileWin',
        'HamperProductdetailsPanelForProductsWithConstituents',
        'HamperContentDetailsWin',
        'ProductsInTheSameBucketWin',
        'ProductsInTheSameBucketPanel'
    ],

    onViewProductImagesButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onProductDetailWindowRender: function(component, eOpts) {


        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var service_code = component.down('form').down('hiddenfield[name=service_code]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var is_quotable = component.down('form').down('hiddenfield[name=is_quotable]').getValue();

        var is_escrowable = component.down('form').down('hiddenfield[name=is_escrowable]').getValue();

        var is_future_tradable = component.down('form').down('hiddenfield[name=is_future_tradable]').getValue();

        var is_for_presubscription = component.down('form').down('hiddenfield[name=is_for_presubscription]').getValue();

        var quote_id = component.down('form').down('hiddenfield[name=quote_id]').getValue();

        var escrow_id = component.down('form').down('hiddenfield[name=escrow_id]').getValue();

        var is_a_hamper = component.down('form').down('hiddenfield[name=is_a_hamper]').getValue();

        var is_store_hamper_content = component.down('form').down('hiddenfield[name=is_store_hamper_content]').getValue();

        var is_with_video = component.down('form').down('hiddenfield[name=is_with_video]').getValue();

        var is_a_hamper_in_cart = component.down('form').down('hiddenfield[name=is_hamper]').getValue();

        //get the ptoduct id
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        var decision = component.down('#decisionFlagForm').down('hiddenfield[name=decision_flag]').getValue();

        console.log('the decisiommm is:',decision);


        console.log( 'is quotable:',is_quotable);

        console.log( 'is escrowable:',is_escrowable);

        console.log( 'the operation_detail :',operation_detail);

        console.log( 'is store hamper content:',is_store_hamper_content);



        console.log('the escrow id idddd is:', escrow_id);

         console.log('this operattion is::',operation);

        console.log('this is a hamperrrrrr:',is_a_hamper);

        if(operation=='noncart'){
             component.down('#addtocartBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(true);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#previewescrowBtn').setVisible(false);
        }else if(operation == 'cart'){
            component.down('#removecartproductBtn').setVisible(true);
             component.down('#savecartproductBtn').setVisible(true);
            component.down('#addtocartBtn').setVisible(false);
           component.down('#sendaquoteBtn').setVisible(false);
           component.down('#sendtoescrowBtn').setVisible(false);

        }else if(operation == 'knowmore'){
             component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(false);
        }else if(operation =='account'){
           component.down('#addtocartBtn').setVisible(false);
        }


        if(service_code == 'share'){
            component.down('#remainItem').setVisible(true);
        }

        if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
           component.down('#quantityPurchasedFieldset').setDisabled(true);
            component.down('#dateOfPurchase').setVisible(true);
            component.down('#historyOfTheTotalAmountPaid').setVisible(true);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#historyAmountSaved').setVisible(true);
           component.down('#totalAmountSaved').setVisible(false);



        }

        if(is_quotable == 'true' || is_quotable == 1 ){
            component.down('#quotablePricing').setVisible(true);
             component.down('#prevailingRetailSelling').setVisible(false);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#prevailingRetailSelling').setDisabled(true);
            if(is_escrowable == 'true' || is_escrowable == 1){
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);


                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);


                }

            }else{
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);

                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);


                }
            }



        }else{
            component.down('#prevailingRetailSelling').setVisible(true);
             component.down('#totalAmountPaid').setVisible(true);
            component.down('#prevailingRetailSelling').setDisabled(false);
           // component.down('#restoreBtn').setVisible(false);
        }
        if(is_escrowable == 'true' || is_escrowable == 1){
            component.down('#escrowandfutureContainer').setVisible(true);
            component.down('#productDescriptionContainer').setVisible(false);
            component.down('#escrowAgreement').setDisabled(false);
            if(is_quotable == 'true' && operation!='knowmore'){
                component.down('#sendaquoteBtn').setVisible(true);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
                }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
               // component.down('#restoreBtn').setVisible(false);
            }

        }else{
            if(operation!='knowmore'){

                if(is_quotable == 'true' || is_quotable == 1){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#addtocartBtn').setVisible(false);
                }else{
                    component.down('#sendaquoteBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }
                component.down('#sendtoescrowBtn').setVisible(false);

                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);

            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
                //component.down('#restoreBtn').setVisible(false);
            }
        }
        if(is_future_tradable == 'true' || is_future_tradable == 1){
            component.down('#escrowandfutureContainer').setVisible(true);
            component.down('#productDescriptionContainer').setVisible(false);
           if(is_quotable == 'true' || is_quotable == 1){
                component.down('#futureTrading').setDisabled(false);
           }else{
                component.down('#futureTrading').setDisabled(false);
           }


        }
         if(operation_detail=='knowmore'){
                        component.down('#removefromtradinglist').setVisible(true);


                    }
        if(operation_detail=='subscription_scheduling'){
                        component.down('#schedulesubscriptiondeliveryBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='unsubscription'){
                        component.down('#unsubscribeBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='topup'){
                        component.down('#topupsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='drawdown'){
                        component.down('#drawdownonsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='escrow_subscription'){
                        component.down('#escrowsubscriptionBtn').setVisible(true);
                        component.down('#sendtoescrowBtn').setVisible(true);
                       component.down('#sendtoescrowBtn').setDisabled(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(false);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                    }
        if(operation_detail=='tocart'){
                        component.down('#addtocartBtn').setVisible(true);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);

                    }
        if(operation_detail=='detail'){
                        component.down('#topupsubscriptionBtn').setVisible(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                         component.down('#escrowAgreementCheckbox').setDisabled(true);
                        component.down('#previewescrowBtn').setVisible(false);
                    }
        if(operation_detail=='initiated_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifythisquoteBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);

                    }
        if(operation_detail=='cancel_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancelthisquoteBtn').setVisible(true);
                        component.down('#modifythisquoteBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='send_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='initiated_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='cancel_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancellingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='received_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='invoke_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#invokingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }

        if(operation_detail=='invoking_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#invokingthisescrowBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }


        if(operation_detail=='voucher'){

                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                   if(operation == 'voucher'){
                        if(is_quotable == 0 && is_escrowable ==0 ){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);


                        }else if(is_quotable == 0 && is_escrowable ==1){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);

                        }else if(is_quotable == 1 && is_escrowable ==0){
                            component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }else if(is_quotable == 1 && is_escrowable ==1){
                           component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }
                   }

                    }

        if(operation_detail=='hamper'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        if(is_store_hamper_content ==0){
                             component.down('#changethequantityofproductinhamperBtn').setVisible(true);
                            component.down('#hamperquantityBox').setReadOnly(false);
                        }
                        if(is_a_hamper == 1){
                            component.down('#productDescriptionContainer').setVisible(false);
                            component.down('#hampercontentsContainer').setVisible(true);
                        }
                    }

        if(operation_detail=='hamper_view'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(false);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        component.down('#prevailingRetailSelling').setVisible(false);

                    }



        if(operation_detail=='cart'){
                 component.down('#addtocartBtn').setVisible(false);
                 component.down('#sendaquoteBtn').setVisible(false);
                 component.down('#sendtoescrowBtn').setVisible(false);


            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);
            }else{
                 component.down('#productDescriptionContainer ').setVisible(true);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
            }


        }

        if(operation=='account'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(true);
                component.down('#savecartproductBtn').setVisible(false);
        }


        if(operation_detail=='account_existing'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(false);
                component.down('#totalAmountPaid').setVisible(true);
                component.down('#quantityOfPurchase').setReadOnly(true);
                component.down('#savecartproductBtn').setVisible(false);

            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                component.down('#hamperproducttotalamountContainer').setVisible(true);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);
            }else{
                 component.down('#productDescriptionContainer ').setVisible(true);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
                component.down('#savecartproductBtn').setVisible(false);
            }



        }

        console.log('could this be quotted:',is_quotable);
        console.log('is this also escrowed:',is_escrowable);

        if(operation_detail=='account_history'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);


            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);
            }else{
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);
                component.down('#savecartproductBtn').setVisible(false);
            }


        }

        if(operation_detail=='loggedin'){
                        Ext.Ajax.request({
                       url: '/cobuy/index.php?r=Members/confirmIfUserIsLoggedIn',
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var userid = jsonResponse.userid;

                              if(userid === null || userid === undefined){
                                component.down('#sendaquoteBtn').setVisible(false);
                                component.down('#sendtoescrowBtn').setVisible(false);
                                component.down('#addtocartBtn').setVisible(false);
                                component.down('#sendtothehampertabBtn').setVisible(false);

                              }else{

                              }



                          }
                   }

            });


                    }




        if(is_for_presubscription == 1){
            component.down('#quantityOfPurchase').setReadOnly(true);



        }

        if(is_a_hamper == 1 || is_a_hamper == 'true'){
            if(operation_detail != 'hamper'){
                component.down('#sendtothehampertabBtn').setVisible(true);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#hamperlabelContainer').setVisible(true);
                component.down('#hamperlabelContainer').setDisabled(false);
                component.down('#quantityOfPurchase').setDisabled(true);
                component.down('#productDescriptionContainer').setVisible(false);
                component.down('#hampercontentsContainer').setVisible(true);
            }



        }

        if(is_with_video == 1 || is_with_video == 'true'){
            component.down('#productVideoContainer').setVisible(true);
        }else{
            component.down('#productVideoContainer').setVisible(false);
        }

        if(member === ""){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#addtocartBtn').setVisible(false);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
        }




        console.log('the product id iss4444:',product_id);

        //load the product dataview

        component.down('#productDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });

        if(is_store_hamper_content == 1 || is_store_hamper_content == true){
         //load the hamper/product contents dataview

        component.down('#hamperDirectDataview').getStore().load({
            params:{
                hamper_id:product_id
            }
        });

        }


        //get the minimum value of item to buy

        var minValueToBuy = component.down('#minNumberOfValue').getValue();

        //get the minimum item for rent
        var minQuantityForRent = component.down('#rentMinQuantity').getValue();

        //get the minimum renting duration
        var minDurationForRent = component.down('#minRentDuration').getValue();

        //get the maximum item for rent

        var maxQuantityForRent = component.down('#rentMaxQuantity').getValue();

        //var maxQuantityForRent = component.down('form').down('numberfield[name=maximum_rent_quantity_per_cycle]').getValue();
        //get the minimum  quantity for paas service

        var minPaasService = component.down('#minPaasQuantity').getValue();

        //get the maximum quantity allowed for this paas service
        var maxPaasService = component.down('#maxPaasQuantity').getValue();

        console.log('the min value is;',minValueToBuy);

        //get the minimum paas duration
        var minDurationForPaas = component.down('#minPaasDuration').getValue();

        //get the allowable maximum paas duration

        var maxDurationForPaas = component.down('#maxPaasDuration').getValue();


        //get the minimum  quantity for faas service

        var minFaasQuantity = component.down('#minFaasQuantity').getValue();

        //get the maximum quantity allowed for this faas service
        var maxFaasQuantity = component.down('#maxFaasQuantity').getValue();

        console.log('the min value is;',minValueToBuy);

        //get the minimum faas duration
        var minFaasDuration = component.down('#minFaasDuration').getValue();

        //get the allowable maximum faas duration

        var maxFaasDuration = component.down('#maxFaasDuration').getValue();





        //set the minimum value of quantity  to be purchase



            component.down('#quantityOfPurchase').setMinValue(minValueToBuy);

            //set the minimum for hamper product quantitues too
            component.down('#hamperquantityBox').setMinValue(minValueToBuy);




            //set the minimum quantity for rent

            component.down('#quantityForRent').setMinValue(minQuantityForRent);

            //set the minimum period for rent

            component.down('#durationForRent').setMinValue(minDurationForRent);

            //set the maximum value of the max quantity field

            component.down('#quantityForRent').setMaxValue(maxQuantityForRent);




            //set the minimum paas quantity

            component.down('#paasProductQuantity').setMinValue(minPaasService);

            //set the maximum pass quantity

            component.down('#paasProductQuantity').setMaxValue(maxPaasService);

        //set the minimum paas duration

         component.down('#paasSubscriptionDuration').setMinValue(minDurationForPaas);

        //set the maximum paas duration
        component.down('#paasSubscriptionDuration').setMaxValue(maxDurationForPaas);



        //set the minimum faas quantity

            component.down('#faasProductQuantity').setMinValue(minFaasQuantity);

            //set the maximum faas quantity

            component.down('#faasProductQuantity').setMaxValue(maxFaasQuantity);


        //set the minimum faas duration

         component.down('#faasSubscriptionDuration').setMinValue(minFaasDuration);

        //set the maximum faas duration
        component.down('#faasSubscriptionDuration').setMaxValue(maxFaasDuration);




        if(quote_id>0){
             Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievethisquotefuturesinformation',
                          params:{
                              quote_id: quote_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var delivery_month = jsonResponse.futures.delivery_month;
                                var delivery_year = jsonResponse.futures.delivery_year;
                                var payment_method = jsonResponse.futures.payment_method;
                                var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;


        					}
                            var values = {
                                month_of_delivery:delivery_month,
                                year_of_delivery:delivery_year,
                                payment_type:payment_method,
                                payment_frequency:staggered_payment_frequency



                            };

                            //load the futures data
                            component.down('form').getForm().setValues(values);



        				}




        			});
        }


    },

    onProductDetailDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')

                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    onAddProductToCartButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window');
        			var formPanel = win.down('#productdetailsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/addingProductToCart',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
                                console.log("the value of result is:",result);
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
                                    if(result.is_for_presubscription == 1){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                    }
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/addingProductToCart',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onLoginThisUserButtonClick: function(button, e, eOpts) {
           //first confirm if the user is logged in
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/confirmIfUserIsLoggedIn',
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var userid = jsonResponse.userid;

                              if(userid === null || userid === undefined){
                                  //display the log in window

                                var win = Ext.create('Cobuy.view.Login');

                                //win.showAt(0,300);

                                  win.show();

                              }

                              console.log('the logged in user id is:', userid);

                          }
                   }

            });
    },

    onBecomingAMemberButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.NewMembershipSubscriptionWin');

        win.show();
    },

    onQuoteCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#sendaquoteBtn').setDisabled(false);
        }else{
            win.down('#sendaquoteBtn').setDisabled(true);
        }
    },

    onEscrowAgreementCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var is_quotable = win.down('form').down('hiddenfield[name=is_quotable]').getValue();

        var operation = win.down('form').down('hiddenfield[name=operation]').getValue();

        var operation_detail = win.down('form').down('hiddenfield[name=operation_detail]').getValue();

        var is_for_presubscription = win.down('form').down('hiddenfield[name=is_for_presubscription]').getValue();



        console.log('the is quotabe is  is:',is_quotable);

        console.log('the operation is:',operation);

        console.log('the is_for_presubscription is:',is_for_presubscription);

         if(newValue === true){

            win.down('#sendtoescrowBtn').setDisabled(false);
            win.down('#escrowAgreementFile').setDisabled(false);
            if(is_quotable =='false' || is_quotable ==0 ){
                win.down('#sendtoescrowBtn').setVisible(true);
                win.down('#addtocartBtn').setVisible(false);
            }
             if(is_for_presubscription == 1 && operation =='noncart'){
                 win.down('#sendtoescrowBtn').setVisible(true);
                win.down('#addtocartBtn').setVisible(false);
             }
             if(operation == 'voucher' && operation_detail =='voucher'){
                  win.down('#sendtoescrowBtn').setVisible(true);
                  win.down('#addtocartBtn').setVisible(false);
                 win.down('#sendaquoteBtn').setVisible(false);
             }

        }else{
            win.down('#sendtoescrowBtn').setDisabled(true);
             win.down('#escrowAgreementFile').setDisabled(true);
            if(is_quotable == 'false' || is_quotable ==0){
                win.down('#sendtoescrowBtn').setVisible(false);
                win.down('#addtocartBtn').setVisible(true);
            }
            if(is_for_presubscription == 1 && operation =='noncart'){
                 win.down('#sendtoescrowBtn').setVisible(false);
                win.down('#addtocartBtn').setVisible(true);
             }
            if(operation == 'voucher' && operation_detail =='voucher'){
                  win.down('#sendtoescrowBtn').setVisible(false);
                if(is_quotable == 'false' || is_quotable ==0){
                    win.down('#addtocartBtn').setVisible(true);
                }else{
                    win.down('#sendaquoteBtn').setVisible(true);
                }


             }
        }
    },

    onFutureCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#futureMonthOfDelivery').clearValue();
            win.down('#futurePaymentType').clearValue();
            win.down('#futureYearOfDelivery').clearValue();
            win.down('#paymentFrequency').clearValue();
            win.down('#futureMonthOfDelivery').setDisabled(false);
            win.down('#futurePaymentType').setDisabled(false);
            win.down('#futureYearOfDelivery').setDisabled(false);
        }else{
            win.down('#futureMonthOfDelivery').clearValue();
            win.down('#futurePaymentType').clearValue();
            win.down('#futureYearOfDelivery').clearValue();
            win.down('#paymentFrequency').clearValue();
            win.down('#futureMonthOfDelivery').setDisabled(true);
            win.down('#futurePaymentType').setDisabled(true);
            win.down('#futureYearOfDelivery').setDisabled(true);
            win.down('#paymentFrequency').setDisabled(true);
        }
    },

    onFuturePaymentComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        if(combo.getValue() != '01'){
            win.down('#paymentFrequency').setDisabled(false);
        }else{
            win.down('#paymentFrequency').setDisabled(true);
        }

        console.log('the rate for initial payment is:',combo.getValue());

        //load the rate to a hidden field
        var values = {
            staggered_paymenttype_rate:combo.getValue()
        };


        win.down('form').getForm().setValues(values);
    },

    onSendAQuoteButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/requestingForAQuote',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/


        var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Quote/requestingForAQuote',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSendToEscrowAdministratorButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Escrow/requestingEscrow',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);

                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    if(result.escrow_from != 'noncart'){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                        Ext.getCmp('initiatedescrowgrid').getStore().load();
                                    }
        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Escrow/requestingEscrow',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSendingHamperToTheHamperManagerButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/sendingHamperToHamperManager',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('#productdetailsform');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/sendingHamperToHamperManager',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onHamperContentDetailsDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var wwin = dataview.up('window');

        var hamper_id = wwin.down('form').down('hiddenfield[name=product_id]').getValue();


        //var form = wwin.down('form');

                     Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrievethedetailofproductinhamper',
                          params:{
                             product_id: record.get('id'),
                              hamper_id: hamper_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                               if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.HamperContentDetailsWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.HamperProductdetailsPanelForProductsWithConstituentsWin');
                                }



                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var product_quantity_in_hamper = jsonResponse.quantity_in_hamper;
                                var product_cost_in_hamper = product_quantity_in_hamper * prevailing_retail_selling_price;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');
                                }
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;

                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }
                                }




                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'hamper_view',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                product_quantity_in_the_hamper:product_quantity_in_hamper,
                                hamper_product_amount:Ext.util.Format.number(product_cost_in_hamper,'0,000.00'),
                                is_store_hamper_content:1,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onHamperContentDetailWindowRender: function(component, eOpts) {


        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var service_code = component.down('form').down('hiddenfield[name=service_code]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var is_quotable = component.down('form').down('hiddenfield[name=is_quotable]').getValue();

        var is_escrowable = component.down('form').down('hiddenfield[name=is_escrowable]').getValue();

        var is_future_tradable = component.down('form').down('hiddenfield[name=is_future_tradable]').getValue();

        var is_for_presubscription = component.down('form').down('hiddenfield[name=is_for_presubscription]').getValue();

        var quote_id = component.down('form').down('hiddenfield[name=quote_id]').getValue();

        var is_a_hamper = component.down('form').down('hiddenfield[name=is_a_hamper]').getValue();

        var is_store_hamper_content = component.down('form').down('hiddenfield[name=is_store_hamper_content]').getValue();
        //get the ptoduct id
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        console.log( 'is quotable:',is_quotable);

        console.log( 'is escrowable:',is_escrowable);

        console.log( 'the operation_detail :',operation_detail);



        console.log('the member idddd is:', member);

         console.log('this operattion is::',operation);

        console.log('this is a hamper:',is_a_hamper);

        if(operation=='noncart'){
             component.down('#addtocartBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(true);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
        }else if(operation == 'cart'){
            component.down('#removecartproductBtn').setVisible(true);
             component.down('#savecartproductBtn').setVisible(true);
            component.down('#addtocartBtn').setVisible(false);
        }else if(operation == 'knowmore'){
             component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(false);
        }else if(operation =='account' || operation == 'account_existing'){
            component.down('#restoreBtn').setVisible(false);
        }

        if(member === ""){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#addtocartBtn').setVisible(false);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
        }

        if(service_code == 'share'){
            component.down('#remainItem').setVisible(true);
        }

        if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
           component.down('#quantityPurchasedFieldset').setDisabled(true);
            component.down('#dateOfPurchase').setVisible(true);
            component.down('#historyOfTheTotalAmountPaid').setVisible(true);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#historyAmountSaved').setVisible(true);
           component.down('#totalAmountSaved').setVisible(false);



        }

        if(is_quotable == 'true' || is_quotable == 1 ){
            component.down('#quotablePricing').setVisible(true);
             component.down('#prevailingRetailSelling').setVisible(false);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#prevailingRetailSelling').setDisabled(true);
            if(is_escrowable == 'true' || is_escrowable == 1){
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);


                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);


                }

            }else{
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);

                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);


                }
            }



        }else{
            component.down('#prevailingRetailSelling').setVisible(true);
             component.down('#totalAmountPaid').setVisible(true);
            component.down('#prevailingRetailSelling').setDisabled(false);
           // component.down('#restoreBtn').setVisible(false);
        }
        if(is_escrowable == 'true' || is_escrowable == 1){
            component.down('#escrowandfutureContainer').setVisible(true);
            component.down('#productDescriptionContainer').setVisible(false);
            component.down('#escrowAgreement').setDisabled(false);
            if(is_quotable == 'true' && operation!='knowmore'){
                component.down('#sendaquoteBtn').setVisible(true);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
                }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
               // component.down('#restoreBtn').setVisible(false);
            }

        }else{
            if(operation!='knowmore'){

                if(is_quotable == 'true' || is_quotable == 1){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#addtocartBtn').setVisible(false);
                }else{
                    component.down('#sendaquoteBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }
                component.down('#sendtoescrowBtn').setVisible(false);

                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);

            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
                //component.down('#restoreBtn').setVisible(false);
            }
        }
        if(is_future_tradable == 'true' || is_future_tradable == 1){
            component.down('#escrowandfutureContainer').setVisible(true);
            component.down('#productDescriptionContainer').setVisible(false);
            if(is_quotable == 'true' || is_quotable == 1){
                component.down('#futureTrading').setDisabled(false);
            }


        }
         if(operation_detail=='knowmore'){
                        component.down('#removefromtradinglist').setVisible(true);
                    }
        if(operation_detail=='subscription_scheduling'){
                        component.down('#schedulesubscriptiondeliveryBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='unsubscription'){
                        component.down('#unsubscribeBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='topup'){
                        component.down('#topupsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='drawdown'){
                        component.down('#drawdownonsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='escrow_subscription'){
                        //component.down('#escrowsubscriptionBtn').setVisible(true);
                        component.down('#sendtoescrowBtn').setVisible(true);
                       // component.down('#sendtoescrowBtn').setDisabled(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='tocart'){
                        component.down('#addtocartBtn').setVisible(true);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);

                    }
        if(operation_detail=='detail'){
                        component.down('#topupsubscriptionBtn').setVisible(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='initiated_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifythisquoteBtn').setVisible(true);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='cancel_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancelthisquoteBtn').setVisible(true);
                        component.down('#modifythisquoteBtn').setVisible(false);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(true);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        //component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='send_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(false);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        //component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='initiated_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='cancel_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancellingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='received_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(false);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='invoke_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#invokingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowagreementBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }

        if(operation_detail=='voucher'){

                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                   if(operation == 'voucher'){
                        if(is_quotable == 0 && is_escrowable ==0 ){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);


                        }else if(is_quotable == 0 && is_escrowable ==1){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);

                        }else if(is_quotable == 1 && is_escrowable ==0){
                            component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }else if(is_quotable == 1 && is_escrowable ==1){
                           component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }
                   }

                    }

        if(operation_detail=='hamper'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                    }

        if(operation_detail=='hamper_view'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(false);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        component.down('#prevailingRetailSelling').setVisible(false);

                    }






        if(is_for_presubscription == 1){
            component.down('#quantityOfPurchase').setReadOnly(true);



        }

        if(is_a_hamper == 1 || is_a_hamper == true){
            component.down('#sendtothehampertabBtn').setVisible(true);
            component.down('#addtocartBtn').setVisible(false);
            component.down('#productquantityContainer').setVisible(false);
            component.down('#productquantityContainer').setDisabled(false);
            component.down('#totalAmountPaid').setVisible(false);
            component.down('#hamperlabelContainer').setVisible(true);
            component.down('#hamperlabelContainer').setDisabled(false);
            component.down('#quantityOfPurchase').setDisabled(true);
            component.down('#productDescriptionContainer').setVisible(false);
            component.down('#hampercontentsContainer').setVisible(true);




        }






        console.log('the product id issss:',product_id);

        //load the product dataview

        component.down('#thisProductDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


    },

    onHamperProductDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')

                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();




    },

    onViewingStoreHamperImagesButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onKnowingMoreAboutThisHamperProductButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };


                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onEscrowKnowMoreInformationButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.KnowMoreAboutEscrowAgreementsWin');

        win.show();
    },

    onFuturesKnowMoreInformationButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.KnowMoreAboutFuturesTransactionWin');

        win.show();
    },

    onProducVideoPlayButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        console.log('the product id is:',product_id);

        var winn = Ext.create('Cobuy.view.ProductVideoWin');

        var values = {
            product_id:product_id
        };

        winn.down('#productidform').getForm().setValues(values);

        winn.show();
    },

    onProductVideoWindowRender: function(component, eOpts) {
        //get the product id

        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        console.log('the prodddduuuct id is:', product_id);

        //load the dataview

        component.down('#videoDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });
    },

    onViewingTheEscrowDocumentFileButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var escrow_id = win.down('form').down('hiddenfield[name=escrow_id]').getValue();

        var escrow_win = Ext.create('Cobuy.view.PreviewingEscrowFileWin');

        var values = {
            escrow_id:escrow_id
        };

        escrow_win.down('#escrowidform').getForm().setValues(values);

        escrow_win.show();
    },

    onViewingQuotationDocumentButtonClick: function(button, e, eOpts) {
        var win = button.up('window');


        member_id = win.down('form').down('hiddenfield[name=quote_responder]').getValue();

        quote_id = win.down('form').down('hiddenfield[name=quote_id]').getValue();


        console.log(' the quote id is:',quote_id);
        console.log(' the quote responder is:',member_id);

        quote_win = Ext.create('Cobuy.view.PreviewingQuotationFileWin');

        var values = {
           quote_id:quote_id,
           member_id:member_id
        };

        quote_win.down('#quoteidform').getForm().setValues(values);

        quote_win.show();
    },

    onViewingEscrowDocumentWindowRender: function(component, eOpts) {
        //get the escrow id

        var escrow_id = component.down('#escrowidform').down('hiddenfield[name=escrow_id]').getValue();

        //load the dataview

        component.down('#escrowFileDataview').getStore().load({
            params:{
                escrow_id:escrow_id
            }
        });
    },

    onViewingQuotationDocumentWindowRender: function(component, eOpts) {
        //get the quote id

        var quote_id = component.down('#quoteidform').down('hiddenfield[name=quote_id]').getValue();

        var member_id = component.down('#quoteidform').down('hiddenfield[name=member_id]').getValue();

        //load the dataview

        component.down('#quotationFileDataview').getStore().load({
            params:{
                quote_id:quote_id,
                member_id:member_id
            }
        });
    },

    onWatchingAQuotationSalePitchButtonClick: function(button, e, eOpts) {
        var win = button.up('window');


        member_id = win.down('form').down('hiddenfield[name=quote_responder]').getValue();

        quote_id = win.down('form').down('hiddenfield[name=quote_id]').getValue();


        console.log(' the quote id is:',quote_id);
        console.log(' the quote responder is:',member_id);

        quote_win = Ext.create('Cobuy.view.PreviewingQuotationVideoWin');

        var values = {
           quote_id:quote_id,
           member_id:member_id
        };

        quote_win.down('#quoteidform').getForm().setValues(values);

        quote_win.show();
    },

    onWatcingQuotationSalePitchVideoWindowRender: function(component, eOpts) {
        //get the quote id

        var quote_id = component.down('#quoteidform').down('hiddenfield[name=quote_id]').getValue();

        var member_id = component.down('#quoteidform').down('hiddenfield[name=member_id]').getValue();

        //load the dataview

        component.down('#quotationVideoDataview').getStore().load({
            params:{
                quote_id:quote_id,
                member_id:member_id
            }
        });
    },

    onPreviewingTheEscrowdocumentButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var quote_id = win.down('form').down('hiddenfield[name=quote_id]').getValue();
        var escrow_id = win.down('form').down('hiddenfield[name=escrow_id]').getValue();

        var escrow_win = Ext.create('Cobuy.view.PreviewingThisEscrowDocumentWin');

        var values = {
            quote_id:quote_id,
            escrow_id:escrow_id
        };

        escrow_win.down('#quoteidform').getForm().setValues(values);

        escrow_win.show();
    },

    onPreviewingEscrowAgreementDocWindowRender: function(component, eOpts) {
        //get the escrow id

        var quote_id = component.down('#quoteidform').down('hiddenfield[name=quote_id]').getValue();
        var escrow_id = component.down('#quoteidform').down('hiddenfield[name=escrow_id]').getValue();

        //load the dataview

        component.down('#previewEscrowFileDataview').getStore().load({
            params:{
                quote_id:quote_id,
                escrow_id:escrow_id
            }
        });
    },

    onHamperProductWithConstituientsWindowRender: function(component, eOpts) {
        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var service_code = component.down('form').down('hiddenfield[name=service_code]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var is_quotable = component.down('form').down('hiddenfield[name=is_quotable]').getValue();

        var is_escrowable = component.down('form').down('hiddenfield[name=is_escrowable]').getValue();

        var is_future_tradable = component.down('form').down('hiddenfield[name=is_future_tradable]').getValue();

        var is_for_presubscription = component.down('form').down('hiddenfield[name=is_for_presubscription]').getValue();

        var quote_id = component.down('form').down('hiddenfield[name=quote_id]').getValue();

        var is_a_hamper = component.down('form').down('hiddenfield[name=is_a_hamper]').getValue();

        var is_with_video = component.down('form').down('hiddenfield[name=is_with_video]').getValue();

        var is_store_hamper_content = component.down('form').down('hiddenfield[name=is_store_hamper_content]').getValue();

        var is_a_hamper_in_cart = component.down('form').down('hiddenfield[name=is_hamper]').getValue();

        //get the ptoduct id
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();


        console.log('this is a hamper:',is_a_hamper);
        console.log('is a future traddddeee is:', is_future_tradable);
        console.log('is quotable is:', is_quotable);
        console.log('is operation_detail:', operation_detail);

        if(operation=='noncart'){
            component.down('#addtocartBtn').setVisible(true);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
            component.down('#previewescrowBtn').setVisible(false);
        }else if(operation == 'cart'){
            component.down('#removecartproductBtn').setVisible(true);
             component.down('#savecartproductBtn').setVisible(true);
            component.down('#addtocartBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
            component.down('#sendaquoteBtn').setVisible(false);
            component.down('#sendtoescrowBtn').setVisible(false);
        }else if(operation =='account' || operation=='account_existing'){
            component.down('#restoreBtn').setVisible(false);
        }else if(operation == 'knowmore'){
             component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(false);
        }

        if(member === ""){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#addtocartBtn').setVisible(false);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
        }

        if(service_code == 'share'){
            component.down('#remainItem').setVisible(true);
        }


        if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
            component.down('#quantityPurchasedFieldset').setDisabled(true);
            component.down('#dateOfPurchase').setVisible(true);
            component.down('#historyOfTheTotalAmountPaid').setVisible(true);
           component.down('#totalAmountPaid').setVisible(false);
           component.down('#historyAmountSaved').setVisible(true);
           component.down('#totalAmountSaved').setVisible(false);



        }

        if(is_quotable == 'true' || is_quotable == 1 ){
            component.down('#quotablePricing').setVisible(true);
             component.down('#prevailingRetailSelling').setVisible(false);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#prevailingRetailSelling').setDisabled(true);

            if(is_escrowable == 'true' || is_escrowable == 1){
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);
                    component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);

                    component.down('#productquantityContainer').setVisible(false);
                   component.down('#productquantityContainer').setDisabled(true);
                     component.down('#restoreBtn').setVisible(false);
                }

            }else{
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);

                     component.down('#restoreBtn').setVisible(false);

                }
            }



        }else{
            component.down('#prevailingRetailSelling').setVisible(true);
             component.down('#totalAmountPaid').setVisible(true);
            component.down('#prevailingRetailSelling').setDisabled(false);

        }
        if(is_escrowable == 'true' || is_escrowable == 1){
           component.down('#escrowAgreement').setVisible(true);
          // component.down('#futureTrading').setVisible(false);
            component.down('#escrowAgreement').setDisabled(false);
            if(is_quotable == 'true' && operation!='knowmore'){
                component.down('#sendaquoteBtn').setVisible(true);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
               component.down('#restoreBtn').setVisible(false);
            }

        }else{
            if(operation!='knowmore'){
                if(is_quotable == 'true' || is_quotable == 1){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#addtocartBtn').setVisible(false);
                }else{
                    component.down('#sendaquoteBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
                component.down('#restoreBtn').setVisible(false);
            }
        }


        if(is_future_tradable == 'true' || is_future_tradable == 1){
            component.down('#futureTrading').setVisible(true);
           // component.down('#productDescriptionContainer').setVisible(false);
            if(is_quotable == 'true' || is_quotable == 1){
                component.down('#futureTrading').setDisabled(false);
                component.down('#futureTrading').setVisible(true);
            }else{
                 component.down('#futureTrading').setVisible(true);
            }


        }
         if(operation_detail=='knowmore'){
                        component.down('#removefromtradinglist').setVisible(true);
                    }
        if(operation_detail=='subscription_scheduling'){
                        component.down('#schedulesubscriptiondeliveryBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);

                    }
        if(operation_detail=='unsubscription'){
                        component.down('#unsubscribeBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);

                    }
        if(operation_detail=='topup'){
                        component.down('#topupsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='drawdown'){
                        component.down('#drawdownonsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='escrow_subscription'){
                       // component.down('#escrowsubscriptionBtn').setVisible(true);
                         component.down('#sendtoescrowBtn').setVisible(true);
                        //component.down('#sendtoescrowBtn').setDisabled(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                    }
        if(operation_detail=='tocart'){
                        component.down('#addtocartBtn').setVisible(true);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);

                    }
        if(operation_detail=='detail'){
                        component.down('#topupsubscriptionBtn').setVisible(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);

                    }

        if(operation_detail=='initiated_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifythisquoteBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='cancel_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancelthisquoteBtn').setVisible(true);
                        component.down('#modifythisquoteBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                       // component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='send_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        //component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='initiated_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='cancel_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancellingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='invoke_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#invokingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='voucher'){
                        component.down('#restoreBtn').setVisible(false);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                   if(operation == 'voucher'){
                        if(is_quotable == 0 && is_escrowable ==0 ){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);


                        }else if(is_quotable == 0 && is_escrowable ==1){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);

                        }else if(is_quotable == 1 && is_escrowable ==0){
                            component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }else if(is_quotable == 1 && is_escrowable ==1){
                           component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }
                   }

                    }

        if(operation_detail=='hamper'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        if(is_store_hamper_content ==0){
                             component.down('#changethequantityofproductinhamperBtn').setVisible(true);
                            component.down('#hamperquantityBox').setReadOnly(false);
                        }
                        if(is_a_hamper == 1){
                            component.down('#productDescriptionContainer').setVisible(false);
                            component.down('#hampercontentsContainer').setVisible(true);
                        }
                    }

        if(operation_detail=='cart'){
                component.down('#addtocartBtn').setVisible(false);
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);

             if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                component.down('#hamperRetailSelling ').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
             }else if(is_quotable == 'true' || is_escrowable == 'true'){
                 component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);

             }else{
                 component.down('#productDescriptionContainer ').setVisible(true);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
            }

        }



        if(is_for_presubscription == 1){
            component.down('#quantityOfPurchase').setReadOnly(true);
        }


        if(operation_detail=='hamper_view'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(false);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        component.down('#prevailingRetailSelling').setVisible(false);
                       //component.down('#hamperlabelContainer').setVisible(true);
                      // component.down('#hamperlabelContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setDisabled(true);
                       //component.down('#productDescriptionContainer').setVisible(false);
                        //component.down('#hampercontentsContainer').setVisible(true);


                    }



        if(is_a_hamper == 1 || is_a_hamper == true){
            if(operation_detail != 'hamper'){
                component.down('#sendtothehampertabBtn').setVisible(true);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#restoreBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#totalAmountPaid').setVisible(false);
            }


        }

        if(operation=='account'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(true);
        }

        if(operation_detail=='account_existing'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(false);
                component.down('#totalAmountPaid').setVisible(true);
                component.down('#quantityOfPurchase').setReadOnly(true);
                component.down('#savecartproductBtn').setVisible(false);

            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);
            }else{
                 component.down('#productDescriptionContainer ').setVisible(true);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
                component.down('#savecartproductBtn').setVisible(false);
            }



        }

        console.log('could this be quotted:',is_quotable);
        console.log('is this also escrowed:',is_escrowable);

        if(operation_detail=='account_history'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);


            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);

            }else{
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);
                component.down('#savecartproductBtn').setVisible(false);
            }


        }



        if(is_with_video == 1 || is_with_video == 'true'){
            component.down('#productVideoContainer').setVisible(true);
        }else{
            component.down('#productVideoContainer').setVisible(false);
        }






        //get the ptoduct id

        //var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        //console.log('the product id issss:',product_id);

        //load the dataviews

        component.down('#thisProductDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


        component.down('#constituentsDataview').getStore().load({
            params:{
                product_id:product_id,
                operation:operation
            }
        });


        //get the minimum value of item to buy

        var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfPurchase').setMinValue(minValueToBuy);

        //set the minimum for hamper product quantitues too
        component.down('#hamperquantityBox').setMinValue(minValueToBuy);

        if(quote_id>0){



            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievethisquotefuturesinformation',
                          params:{
                              quote_id: quote_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var delivery_month = jsonResponse.futures.delivery_month;
                                var delivery_year = jsonResponse.futures.delivery_year;
                                var payment_method = jsonResponse.futures.payment_method;
                                var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;


        					}
                            var values = {
                                month_of_delivery:delivery_month,
                                year_of_delivery:delivery_year,
                                payment_type:payment_method,
                                payment_frequency:staggered_payment_frequency



                            };

                            //load the futures data
                            component.down('form').getForm().setValues(values);



        				}




        			});

        }



    },

    onRentQuantityNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var rent_price_per_product = win.down('form').down('#rentCostPrice').getValue();

        var rent_duration = win.down('form').down('#durationForRent').getValue();

        var amount= rent_price_per_product * rent_duration * newValue;

         var values = {

                                rent_amount_to_be_paid_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                rent_amount_to_be_paid:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('thesss rent amount is:',amount);
    },

    onDurationOfThisRentNumberfieldChange: function(field, newValue, oldValue, eOpts) {
         win = field.up('window');

        var rent_price_per_product = win.down('form').down('#rentCostPrice').getValue();

        var rent_duration = win.down('form').down('#quantityForRent  ').getValue();

        var amount= rent_price_per_product * rent_duration * newValue;

         var values = {

                                rent_amount_to_be_paid_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                rent_amount_to_be_paid:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('thesss rent amount is:',amount);
    },

    onPaasProductQuantityNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var monthly_paas_subscription_cost = win.down('form').down('#paasMonthlySubscriptionCost').getValue();

        var actual_paas_duration = win.down('form').down('#paasSubscriptionDuration').getValue();

        var amount= monthly_paas_subscription_cost * actual_paas_duration *newValue;



         var values = {

                                total_subscription_cost_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                total_subscription_cost:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('amount for this service is:',amount);
    },

    onAllProductsOnSameBucketButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var type_id = win.down('form').down('hiddenfield[name=type_id]').getValue();

        //instatntiate the bucket window

        var bucket_win = Ext.create('Cobuy.view.ProductsInTheSameBucketWin');
        //load the dataview store

        bucket_win.down('#productsInTheSameBucketDataview').getStore().load({
            params:{
                type_id:type_id
            }
        });




        bucket_win.show();

    },

    onBuckeProductDetailDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        /**var win = dataview.up('window');

        var values = {
            name: record.get('name'),
            description: record.get('description')
        };

        //load the form

        win.down('form').getForm().setValues(values);

        //unhide the form

        win.down('#bucketProductDetailsForm').setVisible(true);

        **/

        console.log('record is:',item);
    },

    onPaasActuaDurationNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var monthly_paas_subscription_cost = win.down('form').down('#paasMonthlySubscriptionCost').getValue();

        var actual_paas_quantity = win.down('form').down('#paasProductQuantity').getValue();

        var amount= monthly_paas_subscription_cost * actual_paas_quantity *newValue;



         var values = {

                                total_subscription_cost_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                total_subscription_cost:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('amount for this service is:',amount);
    },

    onFaasQuantityNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var monthly_faas_subscription_cost = win.down('form').down('#faasMonthlySubscriptionCost').getValue();

        var actual_faas_duration = win.down('form').down('#faasSubscriptionDuration').getValue();

        var amount= monthly_faas_subscription_cost * actual_faas_duration *newValue;



         var values = {

                                faas_total_subscription_cost_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                faas_total_subscription_cost:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('amount for this service is:',amount);
    },

    onFaasActualDurationNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var monthly_faas_subscription_cost = win.down('form').down('#faasMonthlySubscriptionCost').getValue();

        var actual_faas_quantity = win.down('form').down('#faasProductQuantity').getValue();

        var amount= monthly_faas_subscription_cost * actual_faas_quantity *newValue;



         var values = {

                                faas_total_subscription_cost_for_display:Ext.util.Format.number(amount,'0,000.00'),
                                faas_total_subscription_cost:amount


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        console.log('amount for this service is:',amount);
    },

    init: function(application) {
        this.control({
            "productsdetailwin button#viewimagesBtn": {
                click: this.onViewProductImagesButtonClick
            },
            "productsdetailwin": {
                render: this.onProductDetailWindowRender
            },
            "productsdetailwin dataview#productDataview": {
                itemdblclick: this.onProductDetailDataviewItemDblClick
            },
            "productsdetailwin button#addtocartBtn": {
                click: this.onAddProductToCartButtonClick
            },
            "productsdetailwin button#loginBtn": {
                click: this.onLoginThisUserButtonClick
            },
            "productsdetailwin button#joinBtn": {
                click: this.onBecomingAMemberButtonClick
            },
            "checkboxfield#requestAQuoteCheckbox": {
                change: this.onQuoteCheckboxfieldChange
            },
            "checkboxfield#escrowAgreementCheckbox": {
                change: this.onEscrowAgreementCheckboxfieldChange
            },
            "checkboxfield#futureTradingCheckbox": {
                change: this.onFutureCheckboxfieldChange
            },
            "combobox#futurePaymentType": {
                select: this.onFuturePaymentComboboxSelect
            },
            "productsdetailwin button#sendaquoteBtn": {
                click: this.onSendAQuoteButtonClick
            },
            "productsdetailwin button#sendtoescrowBtn": {
                click: this.onSendToEscrowAdministratorButtonClick
            },
            "productsdetailwin button#sendtothehampertabBtn": {
                click: this.onSendingHamperToTheHamperManagerButtonClick
            },
            "productsdetailwin dataview#hamperDirectDataview": {
                itemdblclick: this.onHamperContentDetailsDataviewItemDblClick
            },
            "hampercontentdetailswin": {
                render: this.onHamperContentDetailWindowRender
            },
            "dataview#thisProductDataview": {
                itemdblclick: this.onHamperProductDataviewItemDblClick
            },
            "hampercontentdetailswin button#viewimagesBtn": {
                click: this.onViewingStoreHamperImagesButtonClick
            },
            "hampercontentdetailswin button#knowmoreBtn": {
                click: this.onKnowingMoreAboutThisHamperProductButtonClick
            },
            "button#why_escrowBtn": {
                click: this.onEscrowKnowMoreInformationButtonClick
            },
            "button#why_futuresBtn": {
                click: this.onFuturesKnowMoreInformationButtonClick
            },
            "button#viewproductvideoBtn": {
                click: this.onProducVideoPlayButtonClick
            },
            "productvideowin": {
                render: this.onProductVideoWindowRender
            },
            "button#viewescrowBtn": {
                click: this.onViewingTheEscrowDocumentFileButtonClick
            },
            "button#viewquotationBtn": {
                click: this.onViewingQuotationDocumentButtonClick
            },
            "previewingescrowfilewin": {
                render: this.onViewingEscrowDocumentWindowRender
            },
            "previewingquotationfilewin": {
                render: this.onViewingQuotationDocumentWindowRender
            },
            "button#quotevideoBtn": {
                click: this.onWatchingAQuotationSalePitchButtonClick
            },
            "previewingquotationvideowin": {
                render: this.onWatcingQuotationSalePitchVideoWindowRender
            },
            "button#previewescrowBtn": {
                click: this.onPreviewingTheEscrowdocumentButtonClick
            },
            "previewingthisescrowdocumentwin": {
                render: this.onPreviewingEscrowAgreementDocWindowRender
            },
            "hamperproductdetailspanelforproductswithconstituentswin": {
                render: this.onHamperProductWithConstituientsWindowRender
            },
            "numberfield#quantityForRent ": {
                change: this.onRentQuantityNumberfieldChange
            },
            "numberfield#durationForRent ": {
                change: this.onDurationOfThisRentNumberfieldChange
            },
            "numberfield#paasProductQuantity": {
                change: this.onPaasProductQuantityNumberfieldChange
            },
            "button#bucketproductBtn": {
                click: this.onAllProductsOnSameBucketButtonClick
            },
            "dataview#productsInTheSameBucketDataview": {
                itemdblclick: this.onBuckeProductDetailDataviewItemDblClick
            },
            "numberfield#paasSubscriptionDuration": {
                change: this.onPaasActuaDurationNumberfieldChange
            },
            "numberfield#faasProductQuantity": {
                change: this.onFaasQuantityNumberfieldChange
            },
            "numberfield#faasSubscriptionDuration": {
                change: this.onFaasActualDurationNumberfieldChange
            }
        });
    }

});
