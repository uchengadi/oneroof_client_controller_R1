/*
 * File: app/controller/ProductsWithConstituentsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.ProductsWithConstituentsController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'allConstituentsOfThisProductDataview',
            selector: 'productdetailspanelforproductswithconstituentswin dataview'
        }
    ],

    onProductsWithConstituentsWindowRender: function(component, eOpts) {
        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var service_code = component.down('form').down('hiddenfield[name=service_code]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var is_quotable = component.down('form').down('hiddenfield[name=is_quotable]').getValue();

        var is_escrowable = component.down('form').down('hiddenfield[name=is_escrowable]').getValue();

        var is_future_tradable = component.down('form').down('hiddenfield[name=is_future_tradable]').getValue();

        var is_for_presubscription = component.down('form').down('hiddenfield[name=is_for_presubscription]').getValue();

        var quote_id = component.down('form').down('hiddenfield[name=quote_id]').getValue();

        var escrow_id = component.down('form').down('hiddenfield[name=escrow_id]').getValue();

        var is_a_hamper = component.down('form').down('hiddenfield[name=is_a_hamper]').getValue();

        var is_with_video = component.down('form').down('hiddenfield[name=is_with_video]').getValue();

        var is_store_hamper_content = component.down('form').down('hiddenfield[name=is_store_hamper_content]').getValue();

        var is_a_hamper_in_cart = component.down('form').down('hiddenfield[name=is_hamper]').getValue();

        //get the ptoduct id
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();


        console.log('this is a hamper:',is_a_hamper);
        console.log('is a future traddddeee is:', is_future_tradable);
        console.log('is quotable is:', is_quotable);
        console.log('is operation_detail:', operation_detail);

        if(operation=='noncart'){
            component.down('#addtocartBtn').setVisible(true);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
            component.down('#previewescrowBtn').setVisible(false);
        }else if(operation == 'cart'){
            component.down('#removecartproductBtn').setVisible(true);
             component.down('#savecartproductBtn').setVisible(true);
            component.down('#addtocartBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
            component.down('#sendaquoteBtn').setVisible(false);
            component.down('#sendtoescrowBtn').setVisible(false);
        }else if(operation =='account' || operation=='account_existing'){
            component.down('#restoreBtn').setVisible(false);
        }else if(operation == 'knowmore'){
             component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#addtocartBtn').setVisible(false);
        }


        if(service_code == 'share'){
            component.down('#remainItem').setVisible(true);
        }


        if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
            component.down('#quantityPurchasedFieldset').setDisabled(true);
            component.down('#dateOfPurchase').setVisible(true);
            component.down('#historyOfTheTotalAmountPaid').setVisible(true);
           component.down('#totalAmountPaid').setVisible(false);
           component.down('#historyAmountSaved').setVisible(true);
           component.down('#totalAmountSaved').setVisible(false);



        }

        if(is_quotable == 'true' || is_quotable == 1 ){
            component.down('#quotablePricing').setVisible(true);
             component.down('#prevailingRetailSelling').setVisible(false);
             component.down('#totalAmountPaid').setVisible(false);
            component.down('#prevailingRetailSelling').setDisabled(true);

            if(is_escrowable == 'true' || is_escrowable == 1){
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(false);
                    component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);

                    component.down('#productquantityContainer').setVisible(false);
                   component.down('#productquantityContainer').setDisabled(true);
                     component.down('#restoreBtn').setVisible(false);
                }

            }else{
                if(operation!='knowmore'){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#sendtoescrowBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }else{
                     component.down('#sendaquoteBtn').setVisible(false);
                     component.down('#sendtoescrowBtn').setVisible(false);
                     component.down('#addtocartBtn').setVisible(false);

                     component.down('#restoreBtn').setVisible(false);

                }
            }



        }else{
            component.down('#prevailingRetailSelling').setVisible(true);
             component.down('#totalAmountPaid').setVisible(true);
            component.down('#prevailingRetailSelling').setDisabled(false);

        }
        if(is_escrowable == 'true' || is_escrowable == 1){
           component.down('#escrowAgreement').setVisible(true);
          component.down('#futureTrading').setVisible(false);
            component.down('#escrowAgreement').setDisabled(false);
            if(is_quotable == 'true' && operation!='knowmore'){
                component.down('#sendaquoteBtn').setVisible(true);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
               component.down('#restoreBtn').setVisible(false);
            }

        }else{
            if(operation!='knowmore'){
                if(is_quotable == 'true' || is_quotable == 1){
                    component.down('#sendaquoteBtn').setVisible(true);
                    component.down('#addtocartBtn').setVisible(false);
                }else{
                    component.down('#sendaquoteBtn').setVisible(false);
                    component.down('#addtocartBtn').setVisible(true);
                }
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(true);
                 component.down('#productquantityContainer').setDisabled(false);
            }else if(operation=='knowmore'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                 component.down('#productquantityContainer').setDisabled(true);
                component.down('#restoreBtn').setVisible(false);
            }
        }


        if(is_future_tradable == 'true' || is_future_tradable == 1){
            component.down('#futureTrading').setVisible(true);
           // component.down('#productDescriptionContainer').setVisible(false);
            if(is_quotable == 'true' || is_quotable == 1){
                //component.down('#futureTrading').setDisabled(false);
                component.down('#futureTrading').setVisible(true);
            }else{
                 component.down('#futureTrading').setVisible(true);
            }


        }
         if(operation_detail=='knowmore'){
                        component.down('#removefromtradinglist').setVisible(true);
                    }
        if(operation_detail=='subscription_scheduling'){
                        component.down('#schedulesubscriptiondeliveryBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='unsubscription'){
                        component.down('#unsubscribeBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }

                    }
        if(operation_detail=='topup'){
                        component.down('#topupsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='drawdown'){
                        component.down('#drawdownonsubscriptionBtn').setVisible(true);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                        if(escrow_id == '0'){
                            component.down('#previewescrowBtn').setVisible(false);
                        }
                    }
        if(operation_detail=='escrow_subscription'){
                       component.down('#escrowsubscriptionBtn').setVisible(true);
                         component.down('#sendtoescrowBtn').setVisible(true);
                        component.down('#sendtoescrowBtn').setDisabled(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(false);
                        component.down('#escrowAgreementCheckbox').setDisabled(true);
                    }
        if(operation_detail=='tocart'){
                        component.down('#addtocartBtn').setVisible(true);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);

                    }
        if(operation_detail=='detail'){
                        component.down('#topupsubscriptionBtn').setVisible(false);
                         component.down('#subscriptionquantityContainer').setVisible(true);
                        component.down('#remainingsubscriptionquantityContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#subscriptiontotalAmountPaid').setVisible(true);
                         component.down('#escrowAgreementCheckbox').setDisabled(true);
                        component.down('#previewescrowBtn').setVisible(false);
                    }

        if(operation_detail=='initiated_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifythisquoteBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='cancel_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancelthisquoteBtn').setVisible(true);
                        component.down('#modifythisquoteBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                       component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='send_quote'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                        component.down('#sendthisquoteresponseBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#futureMonthOfDelivery').setReadOnly(true);
                        component.down('#futureYearOfDelivery').setReadOnly(true);
                        component.down('#futurePaymentType').setReadOnly(true);
                        component.down('#paymentFrequency').setReadOnly(true);
                    }
        if(operation_detail=='initiated_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='cancel_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#cancellingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                    }
        if(operation_detail=='received_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#modifyingthisescrowBtn').setVisible(false);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='invoke_escrow'){
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                        component.down('#invokingthisescrowBtn').setVisible(true);
                        component.down('#previewescrowBtn').setVisible(true);
                        component.down('#paymentFrequency').setDisabled(false);
                        component.down('#quantityOfPurchase').setReadOnly(true);
                    }
        if(operation_detail=='voucher'){
                        component.down('#restoreBtn').setVisible(false);
                        component.down('#productquantityContainer').setVisible(true);
                        component.down('#productquantityContainer').setDisabled(false);
                   if(operation == 'voucher'){
                        if(is_quotable == 0 && is_escrowable ==0 ){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);


                        }else if(is_quotable == 0 && is_escrowable ==1){
                            component.down('#addtocartBtn').setVisible(true);
                             component.down('#sendaquoteBtn').setVisible(false);

                        }else if(is_quotable == 1 && is_escrowable ==0){
                            component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }else if(is_quotable == 1 && is_escrowable ==1){
                           component.down('#sendaquoteBtn').setVisible(true);
                            component.down('#addtocartBtn').setVisible(false);
                        }
                   }

                    }

        if(operation_detail=='hamper'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(true);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        if(is_store_hamper_content ==0){
                             component.down('#changethequantityofproductinhamperBtn').setVisible(true);
                            component.down('#hamperquantityBox').setReadOnly(false);
                        }
                        if(is_a_hamper == 1){
                            component.down('#productDescriptionContainer').setVisible(false);
                            component.down('#hampercontentsContainer').setVisible(true);
                        }
                    }

        if(operation_detail=='cart'){
                component.down('#addtocartBtn').setVisible(false);
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);

             if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                component.down('#hamperRetailSelling ').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
             }else if(is_quotable == 'true' || is_escrowable == 'true'){
                 component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);

             }else{
                 //component.down('#productDescriptionContainer ').setVisible(true);
               // component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
            }

        }


        if(operation_detail=='loggedin'){
                        Ext.Ajax.request({
                       url: '/cobuy/index.php?r=Members/confirmIfUserIsLoggedIn',
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var userid = jsonResponse.userid;

                              if(userid === null || userid === undefined){
                                component.down('#sendaquoteBtn').setVisible(false);
                                component.down('#sendtoescrowBtn').setVisible(false);
                                component.down('#addtocartBtn').setVisible(false);
                                component.down('#sendtothehampertabBtn').setVisible(false);

                              }else{

                              }



                          }
                   }

            });


                    }


        if(is_for_presubscription == 1){
            component.down('#quantityOfPurchase').setReadOnly(true);
        }


        if(operation_detail=='hamper_view'){
                        component.down('#hamperquantityContainer').setVisible(true);
                        component.down('#hamperquantityContainer').setDisabled(false);
                         component.down('#hamperproducttotalamountContainer').setVisible(false);
                        component.down('#totalAmountPaid').setVisible(false);
                        component.down('#loginBtn').setVisible(false);
                        component.down('#joinBtn').setVisible(false);
                        component.down('#prevailingRetailSelling').setVisible(false);
                       //component.down('#hamperlabelContainer').setVisible(true);
                      // component.down('#hamperlabelContainer').setDisabled(false);
                        component.down('#quantityOfPurchase').setDisabled(true);
                       //component.down('#productDescriptionContainer').setVisible(false);
                        //component.down('#hampercontentsContainer').setVisible(true);


                    }



        if(is_a_hamper == 1 || is_a_hamper == true){
            if(operation_detail != 'hamper'){
                component.down('#sendtothehampertabBtn').setVisible(true);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#restoreBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#totalAmountPaid').setVisible(false);
            }


        }

        if(operation=='account'){
                component.down('#sendaquoteBtn').setVisible(false);
                component.down('#sendtoescrowBtn').setVisible(false);
                component.down('#addtocartBtn').setVisible(false);
                component.down('#productquantityContainer').setVisible(false);
                component.down('#productquantityContainer').setDisabled(true);
        }

        if(operation_detail=='account_existing'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(false);
                component.down('#totalAmountPaid').setVisible(true);
                component.down('#quantityOfPurchase').setReadOnly(true);
                component.down('#savecartproductBtn').setVisible(false);

            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling ').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);
            }else{
                 //component.down('#productDescriptionContainer ').setVisible(true);
               // component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(true);
                component.down('#totalAmountPaid').setVisible(true);
                 component.down('#productquantityContainer ').setVisible(true);
                component.down('#savecartproductBtn').setVisible(false);
            }



        }

        console.log('could this be quotted:',is_quotable);
        console.log('is this also escrowed:',is_escrowable);

        if(operation_detail=='account_history'){
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#prevailingRetailSelling').setDisabled(false);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);


            if(is_a_hamper_in_cart == 1 || is_a_hamper_in_cart =='true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(true);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(false);
                component.down('#quotedProducttotalamountContainer ').setVisible(false);
                component.down('#quotedTotalAmount ').setVisible(false);
                component.down('#prevailingRetailSelling').setVisible(false);
                component.down('#hamperRetailSelling ').setVisible(true);
                 component.down('#hamperRetailSelling ').setDisabled(false);
                 component.down('#hamperquantityContainer').setVisible(true);
                component.down('#hamperquantityContainer').setDisabled(false);
                //load the hamper contents
                component.down('#hamperDirectDataview').getStore().load({
                    params:{
                       hamper_id:product_id
                    }
                });
            }else if(is_quotable == 'true' || is_escrowable == 'true'){
                component.down('#productDescriptionContainer ').setVisible(false);
                component.down('#hampercontentsContainer ').setVisible(false);
                component.down('#savecartproductBtn ').setVisible(false);
                component.down('#totalAmountPaid').setVisible(false);
                 component.down('#productquantityContainer ').setVisible(false);
                component.down('#quotedquantityContainer ').setVisible(true);
                component.down('#quotedProducttotalamountContainer ').setVisible(true);
                component.down('#quotedTotalAmount ').setVisible(true);

            }else{
                component.down('#remainItem').setVisible(true);
                component.down('#prevailingRetailSelling').setVisible(true);
                component.down('#productquantityContainer').setVisible(true);
                component.down('#productquantityContainer').setDisabled(false);
                component.down('#historyOfTheTotalAmountPaid').setVisible(true);
                component.down('#totalAmountPaid').setVisible(false);
                component.down('#historyAmountSaved').setVisible(false);
                component.down('#savecartproductBtn').setVisible(false);
            }


        }



        if(is_with_video == 1 || is_with_video == 'true'){
            component.down('#productVideoContainer').setVisible(true);
        }else{
            component.down('#productVideoContainer').setVisible(false);
        }


        if(member === ""){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#addtocartBtn').setVisible(false);
            component.down('#removecartproductBtn').setVisible(false);
             component.down('#savecartproductBtn').setVisible(false);
            component.down('#restoreBtn').setVisible(false);
        }




        //get the ptoduct id

        //var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        //console.log('the product id issss:',product_id);

        //load the dataviews

        component.down('#primaryproductDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


        component.down('#constituentsDataview').getStore().load({
            params:{
                product_id:product_id,
                operation:operation
            }
        });


        //get the minimum value of item to buy

        var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfPurchase').setMinValue(minValueToBuy);

        //set the minimum for hamper product quantitues too
        component.down('#hamperquantityBox').setMinValue(minValueToBuy);

        if(quote_id>0){



            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievethisquotefuturesinformation',
                          params:{
                              quote_id: quote_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var delivery_month = jsonResponse.futures.delivery_month;
                                var delivery_year = jsonResponse.futures.delivery_year;
                                var payment_method = jsonResponse.futures.payment_method;
                                var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;


        					}
                            var values = {
                                month_of_delivery:delivery_month,
                                year_of_delivery:delivery_year,
                                payment_type:payment_method,
                                payment_frequency:staggered_payment_frequency



                            };

                            //load the futures data
                            component.down('form').getForm().setValues(values);



        				}




        			});

        }



    },

    onViewMoreImagesOfAProductButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onProductWithConstituentsImageDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')


                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    onAddingProductWithConstituentsToCartButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/addProductWithConstituentsToCart',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                  **/

        var win = button.up('window'),
        			formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Order/addProductWithConstituentsToCart',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onProductKnowMoreAboutAProductButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };


                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onConstituentProductsWindowRender: function(component, eOpts) {
        //get the operation type

        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        console.log('this part ivular operation detail is:',operation_detail);

        console.log('this part operation too is:',operation);


        if(operation == 'account' || operation == 'account_existing'){
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

            if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
            component.down('#quantityPurchasedFieldset').setDisabled(true);

        }

        }else if(operation == 'noncart'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

        }else if(operation == 'knowmore'){
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else if(operation == 'voucher'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else if(operation == 'cart'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else{
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }




        if(member === ""){
            component.down('#priceInfoContainer').setVisible(false);

            component.down('#productFeature').setVisible(true);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }

        if(operation_detail == 'hamper'){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(false);

            component.down('#joinBtn').setVisible(false);

            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

            component.down('#quantityOfProductInThePack').setReadOnly(true);

            component.down('#quantityOfProductInThePackContainer').setVisible(true);

            component.down('#currentQuantityInThePack').setVisible(false);

            component.down('#productAmountContainer').setVisible(false);

            component.down('#productSellingPricePerItemContainer').setVisible(false);
        }








        var product_id = component.down('form').down('hiddenfield[name=id]').getValue();


        component.down('dataview').getStore().load({
            params:{
                id:product_id
            }
        });

        //get the minimum value of item to buy
        //if(operation == 'noncart'){
            var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfInThePack').setMinValue(minValueToBuy);

        //}




    },

    onConstituentProductKnowMoreButtonClick: function(button, e, eOpts) {
        var id = button.up('window').down('form').down('hiddenfield[name=id]').getValue();
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        //var order_id = button.up('window').down('form').down('hiddenfield[name=order]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                          params:{
                             id:id,
                              product_id:product_id
                              //order_id:order_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };

                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onProductWithConstituentKnowMoreProductButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };

                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onConstituentsProductDetailsDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {


        var win = Ext.create('Cobuy.view.ConstituentProductDetailsWin');

        var operation = dataview.up('window').down('form').down('hiddenfield[name=operation]').getValue();

        var member = dataview.up('window').down('form').down('hiddenfield[name=member]').getValue();
        var history = dataview.up('window').down('form').down('hiddenfield[name=history]').getValue();

        var order_id = dataview.up('window').down('form').down('hiddenfield[name=order]').getValue();

        var operation_detail = dataview.up('window').down('form').down('hiddenfield[name=operation_detail]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                          params:{
                              id: record.get('id'),
                             order_id:order_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                if(operation == 'cart'){
                                    if(jsonResponse.amended ==  true){
                                    var quantity_of_product_in_the_pack = jsonResponse.member_quantity;
                                }else{
                                     var quantity_of_product_in_the_pack = jsonResponse.product.quantity_of_product_in_the_pack;
                                }
                                        console.log('the quantity in the park is:',quantity_of_product_in_the_pack);
                                }else if (operation == 'noncart'){
                                    var quantity_of_product_in_the_pack = jsonResponse.product.minimum_number_of_product_to_buy;
                                }
                                if(operation == 'account_existing'){
                                    var quantity_of_product_in_the_pack = jsonResponse.member_quantity;
                                }
                                if(jsonResponse.amended ==  'history'){
                                         var quantity_of_product_in_the_pack=jsonResponse.history_quantity;
                                    console.log('history quantity isss:',quantity_of_product_in_the_pack);
                                }
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}

        					}
                            var values = {

                                product_id:record.get('product_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                quantity_of_product_in_the_pack:minimum_number_of_product_to_buy,
                                quantity_of_product_in_the_pack_for_hamper:minimum_number_of_product_to_buy,
                                //minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:operation,
                                operation_detail:operation_detail,
                                history:history,
                                member:member,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_with_video:is_with_video,
                                video_for:video_for
                               // start_price_validity_period:start_price_validity_period,
                              //  end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                            win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});







    },

    onConstituentViewMoreImageButtonClick: function(button, e, eOpts) {
        var id = button.up('window').down('form').down('hiddenfield[name=id]').getValue();
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();


        var win = Ext.create('Cobuy.view.ConstituentsViewImagesWin');



        //var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        //var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        //var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {


            id:id,
            product_id:product_id


        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onViewMoreConstituentDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ConstituentsViewImagesWin');

        console.log('this record iss:',record);

        var values = {


                                    product_id:record.get('product_id'),
                                    id:record.get('id')

                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    onConstituentsImageWindowRender: function(component, eOpts) {
        var product_id = component.down('form').down('hiddenfield[name=id]').getValue();

        //var order_id = component.down('form').down('hiddenfield[name=order]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                        params:{
                            id:product_id
                            //order_id:order_id
                        },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var mainview = jsonResponse.product.icon;
                                var frontview = jsonResponse.product.product_front_view;
                                var backview = jsonResponse.product.product_back_view;
                                var rightsideview = jsonResponse.product.product_right_side_view;
                                var leftsideview = jsonResponse.product.product_left_side_view;
                                var topview = jsonResponse.product.product_top_view;
                                var bottomview = jsonResponse.product.product_bottom_view;
                                var contentview = jsonResponse.product.product_contents_or_booth_view;
                                var insidefrontview = jsonResponse.product.product_inside_view;
                                var insidedashboardview = jsonResponse.product.product_dashboard_view;
                                var engineview = jsonResponse.product.product_engine_view;





        					}

                            //get the handle to the image

                            var mainview_image = component.down('#mainviewImg');
                            var frontview_image = component.down('#frontviewImg');
                            var backview_image = component.down('#backviewImg');
                            var rightsideview_image = component.down('#rightsideviewImg');
                            var leftsideview_image = component.down('#leftsideviewImg');
                            var topview_image = component.down('#topviewImg');
                            var bottomview_image = component.down('#bottomviewImg');
                            var contentview_image = component.down('#contentviewImg');
                            var insideview_image = component.down('#insidefrontviewImg');
                            var insidedashboardview_image = component.down('#insidedashboardImg');
                            var engineview_image = component.down('#engineviewImg');


                            //get the image source

                            mainview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + mainview);

                            //set the title of the fieldser
                            component.down('#mainFieldset').setTitle('Some Cool Complete Image');

                             frontview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + frontview);
                            component.down('#frontFieldset').setTitle('Some Cool Complete Front Image');

                            backview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + backview);

                            rightsideview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + rightsideview);

                            leftsideview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + leftsideview);

                            topview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + topview);

                            bottomview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + bottomview);

                            contentview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + contentview);

                           insideview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + insidefrontview);

                          insidedashboardview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + insidedashboardview);

                          engineview_image.setSrc('../admin.oneroof.com.ng/cobuy_images/icons' + '/' + engineview);







        				}




        			});
    },

    onRestoreConstituentProductToPackButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        var validity = button.up('window').down('form').down('hiddenfield[name=validity]').getValue();

        console.log('this product idss is:',product_id);

        console.log('this validity is is  idss is:',validity);

        var win = Ext.create('Cobuy.view.RestoreConstituentProductWin');

        var values = {
            product_id:product_id,
            validity:validity
        };

        //set the form

        win.down('form').getForm().setValues(values);


        win.show();
    },

    onRetrieveTheConstituentProductToBeRestoredButtonClick: function(button, e, eOpts) {
        var product_win = Ext.getCmp('productdetailspanelforproductswithconstituentswin');

        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        var pack_quantity = product_win.down('form').down('#quantityOfPurchase').getValue();

        var validity = product_win.down('form').down('hiddenfield[name=validity]').getValue();

        var operation = product_win.down('form').down('hiddenfield[name=operation]').getValue();

        var win = button.up('window'),
        			formPanel = win.down('form');
        			store = store = product_win.down('#constituentsDataview').getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=ProductConstituents/restoreConstituentProductToThePack',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load({
                                        params:{
                                           product_id:product_id,
                                            operation:operation
                                        }


                                    });

                                     var pack_prevailing_retail_selling_price = result.pack_prevailing_retail_selling_price;

                                    var pack_member_selling_price = result.pack_member_selling_price;

                                    if(validity == 'true'){

                                        var amount_to_be_paid =pack_member_selling_price * pack_quantity;
                                        var amount_save_on_purchase = (pack_prevailing_retail_selling_price -pack_member_selling_price ) * pack_quantity;
                                    }else{
                                        var amount_to_be_paid =pack_prevailing_retail_selling_price * pack_quantity;
                                        var amount_save_on_purchase = (pack_prevailing_retail_selling_price -pack_prevailing_retail_selling_price ) * pack_quantity;
                                    }

                                    var values = {
                                        prevailing_retail_selling_price:pack_prevailing_retail_selling_price,
                                        prevailing_retail_selling_price_for_display:Ext.util.Format.number(pack_prevailing_retail_selling_price,'0,000.00'),
                                        per_portion_price:pack_member_selling_price,
                                        per_portion_price_for_display:Ext.util.Format.number(pack_member_selling_price,'0,000.00'),
                                        quantity_of_purchase:pack_quantity,
                                        amount_to_be_paid:amount_to_be_paid,
                                        amount_to_be_paid_for_display:Ext.util.Format.number(amount_to_be_paid,'0,000.00'),
                                        amount_save_on_purchase:amount_save_on_purchase,
                                        amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase,'0,000.00')
                                    };

                                    //reset the form
                                    product_win.down('form').getForm().setValues(values);
                                    console.log('prevailing selling price is:',result.pack_prevailing_retail_selling_price);
                                    console.log('member selling price is:',result.pack_member_selling_price);
                                    console.log('the quantity is :',pack_quantity);
                                    console.log('the amount paid is :',amount_to_be_paid);
                                    console.log('the amount saved is :',amount_save_on_purchase);


        							win.close();
                                     //redirect to quickteller site for payment
                                    //window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onConstituentsComboboxRender: function(component, eOpts) {
        var product_id =component.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        component.getStore().load({
            params:{
                product_id:product_id
            }
        });

        if(component.getValue() == null){
            component.up('window').down('dataview').getStore().removeAll();
        }



    },

    onConstituentComboboxSelect: function(combo, records, eOpts) {
        var constituent_id = combo.getValue();

        //load the dataview

        combo.up('window').down('#thisDataview').getStore().load({

            params:{
                id:constituent_id
            }
        });

    },

    onQuantityOfPurchaseNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var prevailing_retail_price = win.down('form').down('#prevailingRetailPrice').getValue();

        var cobuy_member_price = win.down('form').down('#cobuyMemberPrice').getValue();

        var start_validity_date = win.down('form').down('#startValidity').getValue();

        var end_validity_date = win.down('form').down('#endValidity').getValue();
        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var history = win.down('form').down('hiddenfield[name=history]').getValue();

        var operation = win.down('form').down('hiddenfield[name=operation]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/confirmPriceValidity',
                          params:{
                              start_date: Ext.Date.format(start_validity_date,"m/d/Y"),
                              end_date: Ext.Date.format(end_validity_date,"m/d/Y"),
                              product_id:product_id,
                              operation:operation

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {


                                if(jsonResponse.validity ===  true){
                                    var amount_to_be_paid = jsonResponse.member_selling_price * newValue;
                                    var amount_save_on_purchase = (jsonResponse.prevailing_retail_selling_price * newValue) -  amount_to_be_paid ;
                                }else{
                                    var amount_to_be_paid = jsonResponse.prevailing_retail_selling_price * newValue;
                                    var amount_save_on_purchase = (jsonResponse.prevailing_retail_selling_price * newValue) - amount_to_be_paid;
                                }

                                console.log('amouny to bb ee paying:',amount_to_be_paid);


        					}
                            var values = {

                                amount_to_be_paid_for_display:Ext.util.Format.number(amount_to_be_paid,'0,000.00'),
                                amount_to_be_paid:amount_to_be_paid,
                                amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase, '0,000.00'),
                                amount_save_on_purchase:amount_save_on_purchase

                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        				}




        			});

    },

    onQuantityInThePackNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var prevailing_retail_price = win.down('form').down('#prevailingRetailPrice').getValue();

        var cobuy_member_price = win.down('form').down('#cobuyMemberPrice').getValue();

        var start_validity_date = win.down('form').down('#startValidity').getValue();

        var end_validity_date = win.down('form').down('#endValidity').getValue();

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var history = win.down('form').down('hiddenfield[name=history]').getValue();

        var id = win.down('form').down('hiddenfield[name=id]').getValue();

        var operation = win.down('form').down('hiddenfield[name=operation]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/confirmPriceValidity',
                          params:{
                              start_date: Ext.Date.format(start_validity_date,"m/d/Y"),
                              end_date: Ext.Date.format(end_validity_date,"m/d/Y"),
                              product_id:product_id,
                              id:id,
                              operation:operation

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {


                                if(jsonResponse.validity ===  true){
                                    var amount_to_be_paid = jsonResponse.member_selling_price * newValue;
                                    var amount_save_on_purchase = (jsonResponse.prevailing_retail_selling_price * newValue) -  amount_to_be_paid ;
                                }else{
                                    var amount_to_be_paid = jsonResponse.prevailing_retail_selling_price * newValue;
                                    var amount_save_on_purchase = (jsonResponse.prevailing_retail_selling_price * newValue) - amount_to_be_paid;
                                }


        					}
                            var values = {

                               amount_to_be_paid_for_display:Ext.util.Format.number(amount_to_be_paid,'0,000.00'),
                                amount_to_be_paid:amount_to_be_paid,
                                amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase, '0,000.00'),
                                amount_save_on_purchase:amount_save_on_purchase

                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        				}




        			});

    },

    onLoginInThisUserButtonClick: function(button, e, eOpts) {
           //first confirm if the user is logged in
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/confirmIfUserIsLoggedIn',
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var userid = jsonResponse.userid;

                              if(userid === null || userid === undefined){
                                  //display the log in window

                                var win = Ext.create('Cobuy.view.Login');

                                //win.showAt(0,300);

                                  win.show();

                              }

                              console.log('the logged in user id is:', userid);

                          }
                   }

            });
    },

    onJoiningThisPlatformButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.NewMembershipSubscriptionWin');

        win.show();
    },

    onSendAQuoteButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/requestingForAQuote',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var win = button.up('window'),
        	formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Quote/requestingForAQuote',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onSendEscrowToAdministratorButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Escrow/requestingEscrow',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('#productdetailspanelforproductswithconstituentsform');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Escrow/requestingEscrow',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onChangeInQuantityOfHamperNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var prevailing_retail_price = win.down('form').down('#prevailingRetailPrice').getValue();

        var cobuy_member_price = win.down('form').down('#cobuyMemberPrice').getValue();

        var start_validity_date = win.down('form').down('#startValidity').getValue();

        var end_validity_date = win.down('form').down('#endValidity').getValue();

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var history = win.down('form').down('hiddenfield[name=history]').getValue();

        var id = win.down('form').down('hiddenfield[name=id]').getValue();

        var operation = win.down('form').down('hiddenfield[name=operation]').getValue();

        console.log('prevailing pricedee is:',prevailing_retail_price);

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/confirmPriceValidity',
                          params:{
                              start_date: Ext.Date.format(start_validity_date,"m/d/Y"),
                              end_date: Ext.Date.format(end_validity_date,"m/d/Y"),
                              product_id:product_id,
                              id:id,
                              operation:operation

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {


                                var amount_to_be_paid = prevailing_retail_price * parseInt(newValue);
                                console.log('amount to be paid pricedee is:',amount_to_be_paid);

                                console.log('this new quantity value is is:',newValue);

        					}
                            var values = {

                               hamper_product_amount:Ext.util.Format.number(amount_to_be_paid,'0,000.00')


                            };

                                //load the form

                            win.down('form').getForm().setValues(values);


        				}




        			});


    },

    onHamperConstituentProductdetailDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {


        var win = Ext.create('Cobuy.view.HamperProductConstituentWin');

        var operation = dataview.up('window').down('form').down('hiddenfield[name=operation]').getValue();

        var member = dataview.up('window').down('form').down('hiddenfield[name=member]').getValue();
        var history = dataview.up('window').down('form').down('hiddenfield[name=history]').getValue();

        var order_id = dataview.up('window').down('form').down('hiddenfield[name=order]').getValue();

        var operation_detail = dataview.up('window').down('form').down('hiddenfield[name=operation_detail]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                          params:{
                              id: record.get('id'),
                             order_id:order_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                if(operation == 'cart'){
                                    if(jsonResponse.amended ==  true){
                                    var quantity_of_product_in_the_pack = jsonResponse.member_quantity;
                                }else{
                                     var quantity_of_product_in_the_pack = jsonResponse.product.quantity_of_product_in_the_pack;
                                }
                                        console.log('the quantity in the park is:',quantity_of_product_in_the_pack);
                                }else if (operation == 'noncart'){
                                    var quantity_of_product_in_the_pack = jsonResponse.product.minimum_number_of_product_to_buy;
                                }
                                if(operation == 'account_existing'){
                                    var quantity_of_product_in_the_pack = jsonResponse.member_quantity;
                                }
                                if(jsonResponse.amended ==  'history'){
                                         var quantity_of_product_in_the_pack=jsonResponse.history_quantity;
                                    console.log('history quantity isss:',quantity_of_product_in_the_pack);
                                }
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }



                                    }
                                console.log('the product id is::::',record.get('id'));


        					}
                            var values = {

                                product_id:record.get('product_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                quantity_of_product_in_the_pack:minimum_number_of_product_to_buy,
                                quantity_of_product_in_the_pack_for_hamper:minimum_number_of_product_to_buy,
                                //minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:operation,
                                operation_detail:'hamper',
                                history:history,
                                member:member,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_with_video:is_with_video,
                                video_for:video_for
                               // start_price_validity_period:start_price_validity_period,
                              //  end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                            win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});







    },

    onHamperProductConstituentsWindowRender: function(component, eOpts) {
        //get the operation type

        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        var member = component.down('form').down('hiddenfield[name=member]').getValue();

        var history = component.down('form').down('hiddenfield[name=history]').getValue();

        var operation_detail = component.down('form').down('hiddenfield[name=operation_detail]').getValue();

        console.log('this part ivular operation detail is:',operation_detail);

        console.log('this part operation too is:',operation);


        if(operation == 'account' || operation == 'account_existing'){
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

            if(history == 1 ){
            component.down('#maxQuantity').setVisible(false);
            component.down('#remainItem').setVisible(false);
            component.down('#minNumberOfPurchase').setVisible(false);
            component.down('#priceValidityPeriod').setVisible(false);
            component.down('#quantityPurchasedFieldset').setDisabled(true);

        }

        }else if(operation == 'noncart'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

        }else if(operation == 'knowmore'){
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else if(operation == 'voucher'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else if(operation == 'cart'){
             component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }else{
            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }




        if(member === ""){
            component.down('#priceInfoContainer').setVisible(false);

            component.down('#productFeature').setVisible(true);

            component.down('#loginBtn').setVisible(true);

            component.down('#joinBtn').setVisible(true);

            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);
        }

        if(operation_detail == 'hamper'){
            component.down('#priceInfoContainer').setVisible(true);

            component.down('#productFeature').setVisible(false);

            component.down('#loginBtn').setVisible(false);

            component.down('#joinBtn').setVisible(false);

            component.down('#removeproductBtn').setVisible(false);

            component.down('#effectchangeBtn').setVisible(false);

            component.down('#quantityOfProductInThePack').setReadOnly(true);

            component.down('#quantityOfProductInThePackContainer').setVisible(true);

            component.down('#currentQuantityInThePack').setVisible(false);

            component.down('#productAmountContainer').setVisible(false);

            component.down('#productSellingPricePerItemContainer').setVisible(false);
        }







        var product_id = component.down('form').down('hiddenfield[name=id]').getValue();


        component.down('dataview').getStore().load({
            params:{
                id:product_id
            }
        });

        //get the minimum value of item to buy
        //if(operation == 'noncart'){
            var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfInThePack').setMinValue(minValueToBuy);

        //}




    },

    onViewingThisConstituentButtonClick: function(button, e, eOpts) {
        var id = button.up('window').down('form').down('hiddenfield[name=id]').getValue();
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();


        var win = Ext.create('Cobuy.view.ConstituentsViewImagesWin');



        //var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        //var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        //var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {


            id:id,
            product_id:product_id


        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onKnowingMoreAboutConstituentButtonClick: function(button, e, eOpts) {
        var id = button.up('window').down('form').down('hiddenfield[name=id]').getValue();
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        //var order_id = button.up('window').down('form').down('hiddenfield[name=order]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                          params:{
                             id:id,
                              product_id:product_id
                              //order_id:order_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };

                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onHamperProductExtraInformationButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };


                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onHamperProductImageViewButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onConstituentsProductDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ConstituentsViewImagesWin');

        console.log('the dataview record is:',record);
        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('product_id'),
                                    id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')


                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    init: function(application) {
        this.control({
            "productdetailspanelforproductswithconstituentswin": {
                render: this.onProductsWithConstituentsWindowRender
            },
            "productdetailspanelforproductswithconstituentswin button#viewimagesBtn": {
                click: this.onViewMoreImagesOfAProductButtonClick
            },
            "productdetailspanelforproductswithconstituentswin dataview#primaryproductDataview": {
                itemdblclick: this.onProductWithConstituentsImageDataviewItemDblClick
            },
            "productdetailspanelforproductswithconstituentswin button#addtocartBtn": {
                click: this.onAddingProductWithConstituentsToCartButtonClick
            },
            "productsdetailwin button#knowmoreBtn": {
                click: this.onProductKnowMoreAboutAProductButtonClick
            },
            "constituentproductdetailswin": {
                render: this.onConstituentProductsWindowRender
            },
            "constituentproductdetailswin button#knowmoreBtn": {
                click: this.onConstituentProductKnowMoreButtonClick
            },
            "productdetailspanelforproductswithconstituentswin button#knowmoreBtn": {
                click: this.onProductWithConstituentKnowMoreProductButtonClick
            },
            "productdetailspanelforproductswithconstituentswin dataview#constituentsDataview": {
                itemdblclick: this.onConstituentsProductDetailsDataviewItemDblClick
            },
            "constituentproductdetailswin button#viewimagesBtn": {
                click: this.onConstituentViewMoreImageButtonClick
            },
            "constituentproductdetailswin dataview#productDataview": {
                itemdblclick: this.onViewMoreConstituentDataviewItemDblClick
            },
            "constituentsviewimageswin": {
                render: this.onConstituentsImageWindowRender
            },
            "productdetailspanelforproductswithconstituentswin button#restoreBtn": {
                click: this.onRestoreConstituentProductToPackButtonClick
            },
            "restoreconstituentproductwin button#restoreBtn": {
                click: this.onRetrieveTheConstituentProductToBeRestoredButtonClick
            },
            "combobox#constituentCombo": {
                render: this.onConstituentsComboboxRender,
                select: this.onConstituentComboboxSelect
            },
            "numberfield#quantityOfPurchase": {
                change: this.onQuantityOfPurchaseNumberfieldChange
            },
            "numberfield#quantityOfInThePack": {
                change: this.onQuantityInThePackNumberfieldChange
            },
            "productdetailspanelforproductswithconstituentswin button#loginBtn": {
                click: this.onLoginInThisUserButtonClick
            },
            "productdetailspanelforproductswithconstituentswin button#joinBtn": {
                click: this.onJoiningThisPlatformButtonClick
            },
            "productdetailspanelforproductswithconstituentswin button#sendaquoteBtn": {
                click: this.onSendAQuoteButtonClick
            },
            "productdetailspanelforproductswithconstituentswin button#sendtoescrowBtn": {
                click: this.onSendEscrowToAdministratorButtonClick
            },
            "numberfield#hamperquantityBox": {
                change: this.onChangeInQuantityOfHamperNumberfieldChange
            },
            "hamperproductdetailspanelforproductswithconstituentswin dataview#constituentsDataview": {
                itemdblclick: this.onHamperConstituentProductdetailDataviewItemDblClick
            },
            "hamperproductconstituentwin": {
                render: this.onHamperProductConstituentsWindowRender
            },
            "button#viewconstituentimagesBtn": {
                click: this.onViewingThisConstituentButtonClick
            },
            "button#knowmoreaboutconstituentBtn": {
                click: this.onKnowingMoreAboutConstituentButtonClick
            },
            "hamperproductdetailspanelforproductswithconstituentswin button#knowmoreBtn": {
                click: this.onHamperProductExtraInformationButtonClick
            },
            "hamperproductdetailspanelforproductswithconstituentswin button#viewimagesBtn": {
                click: this.onHamperProductImageViewButtonClick
            },
            "hamperproductconstituentwin dataview#productDataview": {
                itemdblclick: this.onConstituentsProductDataviewItemDblClick
            }
        });
    }

});
