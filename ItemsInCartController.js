/*
 * File: app/controller/ItemsInCartController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.ItemsInCartController', {
    extend: 'Ext.app.Controller',

    views: [
        'ItemsInTheCartView',
        'ItemsIntheCartViewForm',
        'DeliveryAddressForm',
        'PaymentForm',
        'ItemsInACartFormForm'
    ],

    onItemsInCartNextMoveButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('itemsinacartformform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        console.log('the next active item is:', item);

        if(item.getXType() == 'paymentform' ){
            //change the button text to payment
            win.down('#makewalletpaymentBtn').setVisible(false);
            win.down('#paymentBtn').setVisible(true);
             win.down('#makeondeliverypaymentBtn').setVisible(false);
           Ext.getCmp('move-next').setVisible(false);
        }
    },

    onMoveBackOnCartButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var form  = win.down('itemsinacartformform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();

        if(item.getXType != 'paymentform' ){
           win.down('#makewalletpaymentBtn').setVisible(false);
           win.down('#paymentBtn').setVisible(false);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
            win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(false);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
           Ext.getCmp('move-next').setVisible(true);
        }
    },

    onMakePaymentFromCartButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/makeThisOrderPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var values = {
                                        order_number:result.order_number,
                                        invoice_number:result.invoice_number,
                                        membership_number:result.membership_number,
                                        email:result.email
                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}


        **/


        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/makeThisOrderPayment',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					 //Ext.Msg.alert('Success!', msg);
                              win.close();
                               var values = {
                                        order_number:result.order_number,
                                        invoice_number:result.invoice_number,
                                        membership_number:result.membership_number,
                                        email:result.email
                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });


    },

    onProductInCartDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        //get the delivery type

        var delivery_type;

        var top_priority = dataview.up('window').down('#topPriority').getValue();

        var priority = dataview.up('window').down('#priority').getValue();

        var standard = dataview.up('window').down('#standard').getValue();

        if(top_priority === true){
            delivery_type = 'top';
        }else if(priority === true){
             delivery_type  = 'priority';
        }else if(standard === true){
            delivery_type  = 'standard';
        }else{
           delivery_type  = 'none';
        }



        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record.get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var quantity_of_purchase = jsonResponse.quantity_requested;
                                var prevailing_retail_selling_price = jsonResponse.retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.member_sellig_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.member_sellig_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code=jsonResponse.service_code;
                                var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                var hamper_amount = prevailing_retail_selling_price * quantity_of_purchase;
                                var quote_amount = prevailing_retail_selling_price * quantity_of_purchase;
                                var decision = jsonResponse.cartinfo.decision;
                                var monthly_paas_subscription_cost = jsonResponse.bucket.monthly_paas_subscription_cost;
                                var minimum_quantity_for_paas_subscription = jsonResponse.bucket.minimum_quantity_for_paas_subscription;
                                var maximum_quantity_for_paas_subscription = jsonResponse.bucket.maximum_quantity_for_paas_subscription;
                                var paas_product_quantity = jsonResponse.cartinfo.paas_product_quantity;
                                var minimum_paas_duration = jsonResponse.cartinfo.minimum_paas_duration;
                                var maximum_paas_duration = jsonResponse.cartinfo.maximum_paas_duration;
                                var actual_paas_duration = jsonResponse.cartinfo.actual_paas_duration;
                                var rent_cost_per_day = jsonResponse.product.rent_cost_per_day;
                                var maximum_rent_quantity_per_cycle = jsonResponse.product.maximum_rent_quantity_per_cycle;
                                var minimum_rent_duration = jsonResponse.product.minimum_rent_duration;
                                var minimum_rent_quantity_per_cycle = jsonResponse.product.minimum_rent_quantity_per_cycle;
                                var actual_rent_duration = jsonResponse.cartinfo.actual_rent_duration;
                                var actual_rent_quantity = jsonResponse.cartinfo.actual_rent_quantity;

                                var decision = jsonResponse.cartinfo.decision;
                                var monthly_faas_subscription_cost = jsonResponse.product.prevailing_retail_selling_price;
                                var minimum_quantity_for_faas_subscription = jsonResponse.product.minimum_quantity_for_faas_subscription;
                                var maximum_quantity_for_faas_subscription = jsonResponse.product.maximum_quantity_for_faas_subscription;
                                var faas_product_quantity = jsonResponse.cartinfo.faas_product_quantity;
                                var minimum_faas_duration = jsonResponse.cartinfo.minimum_faas_duration;
                                var maximum_faas_duration = jsonResponse.cartinfo.maximum_faas_duration;
                                var actual_faas_duration = jsonResponse.cartinfo.actual_faas_duration;

                                var faas_remaining_quantity_on_sale = jsonResponse.remaining_quantity;

                                if(decision == 'buy'){
                                    win.down('#buyDecisionRadio').setDisabled(false);
                                    win.down('#rentDecisionRadio').setDisabled(true);
                                    win.down('#asAServiceDecisionRadio').setDisabled(true);
                                    win.down('#buyDecisionRadio').setValue(true);
                                    win.down('#rentDecisionRadio').setValue(false);
                                    win.down('#asAServiceDecisionRadio').setValue(false);
                                    win.down('#buyitContainer').setDisabled(false);
                                     win.down('#rentitContainer').setDisabled(true);
                                    win.down('#asAServiceContainer').setDisabled(true);
                                     win.down('#asFaasContainer').setVisible(false);
                                    win.down('#asFaasDecisionRadio').setDisabled(true);
                                }else if(decision == 'rent'){
                                    win.down('#buyDecisionRadio').setDisabled(true);
                                    win.down('#rentDecisionRadio').setDisabled(false);
                                    win.down('#asAServiceDecisionRadio').setDisabled(true);
                                    win.down('#buyDecisionRadio').setValue(false);
                                    win.down('#rentDecisionRadio').setValue(true);
                                    win.down('#asAServiceDecisionRadio').setValue(false);
                                    win.down('#buyitContainer').setDisabled(true);
                                     win.down('#rentitContainer').setDisabled(false);
                                    win.down('#asAServiceContainer').setDisabled(true);
                                     win.down('#asFaasContainer').setVisible(false);
                                    win.down('#asFaasDecisionRadio').setDisabled(true);

                                }else if(decision == 'paas'){
                                    win.down('#buyDecisionRadio').setDisabled(true);
                                    win.down('#rentDecisionRadio').setDisabled(true);
                                    win.down('#asAServiceDecisionRadio').setDisabled(false);
                                    win.down('#buyDecisionRadio').setValue(false);
                                    win.down('#rentDecisionRadio').setValue(false);
                                    win.down('#asAServiceDecisionRadio').setValue(true);
                                    win.down('#buyitContainer').setDisabled(true);
                                     win.down('#rentitContainer').setDisabled(true);
                                    win.down('#asAServiceContainer').setDisabled(false);
                                     win.down('#asFaasContainer').setVisible(false);
                                    win.down('#asFaasDecisionRadio').setDisabled(true);


                                }else if(decision =='faas'){
                                    win.down('#asFaasDecisionRadio').setDisabled(false);
                                    win.down('#buyDecisionRadio').setDisabled(true);
                                    win.down('#rentDecisionRadio').setDisabled(true);
                                    win.down('#asAServiceDecisionRadio').setDisabled(true);
                                    win.down('#buyitContainer').setVisible(false);
                                    win.down('#asFaasContainer').setVisible(true);
                                    win.down('#asFaasDecisionRadio').setValue(true);
                                }


                                 var is_hamper = jsonResponse.is_a_hamper;
                                 var is_quoted = jsonResponse.is_quoted;

                                console.log('is this a hamper/custom:',is_hamper);
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                if(jsonResponse.is_both_quoted_and_escrowed == 1){
                                    var requesting_for_a_quote =1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = jsonResponse.escrow_id;
                                    var quote_id = jsonResponse.quote_id;
                                    var future_trading = jsonResponse.future_trading;
                                }else if(jsonResponse.is_escrowed_only == 1){
                                    var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = jsonResponse.escrow_id;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }else if(jsonResponse.is_quoted_only == 1){
                                     var requesting_for_a_quote =1;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = jsonResponse.quote_id;
                                    var future_trading = jsonResponse.future_trading;
                                }else{
                                     var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }

                                if(is_hamper == 1 || is_hamper == true){
                                    win.down('#totalAmountPaid').setVisible(false);
                                     win.down('#productquantityContainer ').setVisible(false);
                                     win.down('#hamperquantityContainer ').setVisible(true);
                                    win.down('#hamperproducttotalamountContainer ').setVisible(true);
                                }else if(is_quoted == 1 || is_quoted == true){
                                    win.down('#quotedTotalAmount').setVisible(true);
                                     win.down('#quotedquantityContainer ').setVisible(true);
                                     win.down('#quotedProducttotalamountContainer ').setVisible(true);

                                }else{
                                    win.down('#totalAmountPaid').setVisible(true);
                                     win.down('#productquantityContainer ').setVisible(true);
                                     win.down('#hamperquantityContainer ').setVisible(false);
                                    win.down('#hamperproducttotalamountContainer ').setVisible(false);
                                }

                                 var total_subscription_cost =  paas_product_quantity * monthly_paas_subscription_cost;

                                var rent_amount_to_be_paid = actual_rent_duration * actual_rent_quantity * rent_cost_per_day;

                                var faas_total_subscription_cost =  faas_product_quantity * monthly_faas_subscription_cost;


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('amount to be paid is:',amount_to_be_paid);
                                console.log('amount to be saved is:',amount_save_on_purchase);
                                console.log('the record is:',record);
                            }

                            if(decision == 'faas'){

                                win.down('#asFaasDecisionRadio').setDisabled(false);
                                    win.down('#buyDecisionRadio').setDisabled(true);
                                    win.down('#rentDecisionRadio').setDisabled(true);
                                    win.down('#asAServiceDecisionRadio').setDisabled(true);
                                    win.down('#buyitContainer').setVisible(false);
                                    win.down('#asFaasContainer').setVisible(true);
                                    win.down('#asFaasDecisionRadio').setValue(true);

                            }
                            var values = {

                                type_id:record.get('product_type_id'),
                                product_id:record.get('id'),
                                category_id:record.get('category_id'),
                                service_id:record.get('service_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                               // per_portion_price:per_portion_price,
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                quantity_of_purchase:quantity_of_purchase,
                                operation:'cart',
                                operation_detail:'cart',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                amount_to_be_paid:amount_to_be_paid,
                                amount_save_on_purchase:amount_save_on_purchase,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                delivery_type:delivery_type,
                               // remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                requesting_for_a_quote:requesting_for_a_quote,
                                need_escrow_agreement:need_escrow_agreement,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                is_future_tradable:future_trading,
                                future_trading:future_trading,
                                is_hamper:is_hamper,
                                product_quantity_in_the_hamper:quantity_of_purchase,
                                hamper_product_amount:hamper_amount,
                                product_quantity_in_this_quote:quantity_of_purchase,
                                quoted_product_amount:Ext.util.Format.number(quote_amount,'0,000.00'),
                                price_per_hamper_for_display:prevailing_retail_selling_price_for_display,
                                minimum_rent_quantity_per_cycle_for_display:Ext.util.Format.number(minimum_rent_quantity_per_cycle,'0,000'),
                                minimum_rent_quantity_per_cycle:minimum_rent_quantity_per_cycle,
                                minimum_rent_duration_for_display:Ext.util.Format.number(minimum_rent_duration,'0,000'),
                                minimum_rent_duration:minimum_rent_duration,
                                rent_cost_per_day_for_display:Ext.util.Format.number(rent_cost_per_day,'0,000.00'),
                                rent_cost_per_day:rent_cost_per_day,
                                quantity_for_rent:actual_rent_quantity,
                                rent_duration:actual_rent_duration,
                                maximum_rent_quantity_per_cycle:maximum_rent_quantity_per_cycle,
                                minimum_quantity_for_paas_subscription_for_display:Ext.util.Format.number(minimum_quantity_for_paas_subscription,'0,000'),
                                minimum_quantity_for_paas_subscription:minimum_quantity_for_paas_subscription,
                                monthly_paas_subscription_cost_for_display:Ext.util.Format.number(monthly_paas_subscription_cost,'0,000.00'),
                                paas_product_quantity:paas_product_quantity,
                                maximum_quantity_for_paas_subscription:maximum_quantity_for_paas_subscription,
                                monthly_paas_subscription_cost:monthly_paas_subscription_cost,
                                total_subscription_cost:total_subscription_cost,
                                total_subscription_cost_for_display:Ext.util.Format.number(total_subscription_cost,'0,000.00'),
                                rent_amount_to_be_paid:rent_amount_to_be_paid,
                                rent_amount_to_be_paid_for_display: Ext.util.Format.number(rent_amount_to_be_paid,'0,000.00'),
                                decision_flag:decision,
                                minimum_paas_duration:minimum_paas_duration,
                                minimum_paas_duration_for_display: Ext.util.Format.number(minimum_paas_duration,'0,000'),
                                maximum_paas_duration:maximum_paas_duration,
                                actual_paas_duration:actual_paas_duration,

                                minimum_quantity_for_faas_subscription_for_display:Ext.util.Format.number(minimum_quantity_for_faas_subscription,'0,000'),
                                minimum_quantity_for_faas_subscription:minimum_quantity_for_faas_subscription,
                                monthly_faas_subscription_cost:monthly_faas_subscription_cost,
                                monthly_faas_subscription_cost_for_display:Ext.util.Format.number(monthly_faas_subscription_cost,'0,000.00'),
                                faas_product_quantity:faas_product_quantity,
                                maximum_quantity_for_faas_subscription:maximum_quantity_for_faas_subscription,
                                minimum_faas_duration:minimum_faas_duration,
                                minimum_faas_duration_for_display: Ext.util.Format.number(minimum_faas_duration,'0,000'),
                                maximum_faas_duration:maximum_faas_duration,
                                actual_faas_duration:actual_faas_duration,
                                faas_total_subscription_cost:faas_total_subscription_cost,
                                faas_remaining_quantity_on_sale:faas_remaining_quantity_on_sale,
                                faas_remaining_quantity_on_sale_for_display:Ext.util.Format.number(faas_remaining_quantity_on_sale,'0,000'),
                                maximum_quantity_for_faas_subscription:faas_remaining_quantity_on_sale
                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                            win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});







    },

    onProductInCartWindowRender: function(component, eOpts) {
        //get the ptoduct id

        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        console.log('the product id issss:',product_id);

        //load the dataview

        component.down('dataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


        //get the minimum value of item to buy

        var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfPurchase').setMinValue(minValueToBuy);
    },

    onProductWithConstiuentsInCartWindowRender: function(component, eOpts) {
        //get the ptoduct id

        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        console.log('the product id issss:',product_id);

        //load the dataviews

        component.down('#primaryproductDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


        component.down('#constituentsDataview').getStore().load({
            params:{
                product_id:product_id
            }
        });


        //get the minimum value of item to buy

        var minValueToBuy = component.down('#minNumberOfValue').getValue();

        console.log('the min value is;',minValueToBuy);

        //set the minimum value of quantity  to be purchase

        component.down('#quantityOfPurchase').setMinValue(minValueToBuy);

    },

    onProductInCartKnowMoreButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;



        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };


                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onProductWithConstituentInCartKnowMoreButtonClick: function(button, e, eOpts) {
        var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var win = Ext.create('Cobuy.view.ProductExtraInformationWin');

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;


        					}
                            var values = {

                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                quantity:quantity,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item


                            };


                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onProductInCartImageViewsButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onProductInTheCartDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')

                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    onProductWithConstituentInCartImageViewsButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var product_id = button.up('window').down('hiddenfield[name=product_id]').getValue();

        var service_id = button.up('window').down('hiddenfield[name=service_id]').getValue();

        var category_id = button.up('window').down('hiddenfield[name=category_id]').getValue();

        var type_id = button.up('window').down('hiddenfield[name=type_id]').getValue();


        var values = {

            type_id:type_id,
            product_id:product_id,
            category_id:category_id,
            service_id:service_id

        };

        //load the form

        win.down('#productparameters').getForm().setValues(values);

        win.show();
    },

    onProductWithConstituentInCartImageViewsDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.ProductImagesViewWin');

        var values = {

                                    type_id:record.get('product_type_id'),
                                    product_id:record.get('id'),
                                    category_id:record.get('category_id'),
                                    service_id:record.get('service_id')

                            };

                                //load the form

                            win.down('#productparameters').getForm().setValues(values);

                            win.show();





    },

    onConstituentsOfProductWithConstituentsDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var operation = dataview.up('window').down('form').down('hiddenfield[name=operation]').getValue();

        //var order_id = dataview.up('window').down('form').down('hiddenfield[name=order]').getValue();

        var win = Ext.create('Cobuy.view.ConstituentProductDetailsWin');

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/retrieveProductConstituentDetails',
                          params:{
                              id: record.get('id')
                              //order_id:order_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                if(jsonResponse.amended ==  true){
                                    var quantity_of_product_in_the_pack = jsonResponse.member_quantity;
                                }else{
                                     var quantity_of_product_in_the_pack = jsonResponse.product.quantity_of_product_in_the_pack;
                                }
                                var is_with_video = jsonResponse.product.is_with_video;

                                console.log('the quantity in the park is:',quantity_of_product_in_the_pack);
                                console.log('the result is:',jsonResponse.amended);

        					}
                            var values = {

                                product_id:record.get('product_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                quantity:quantity,
                                quantity_of_product_in_the_pack:quantity_of_product_in_the_pack,
                                minimum_number_of_product_to_buy:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_with_video:is_with_video
                               // start_price_validity_period:start_price_validity_period,
                              //  end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                            win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});







    },

    onRemoveProductFromTheCartButtonClick: function(button, e, eOpts) {


        //var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();

        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllConstituentsProductDataview().getStore();
                    store = product_win.down('dataview').getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/removeThisProductFromCart',
                            params:{
                                product_id:product_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                  var cart_amount = result.cart_amount;
                                  var delivery_charges = result.delivery_charges;
                                   var total_amount = parseFloat(cart_amount) + parseFloat(delivery_charges);

                                    var values ={
                                        cart_gross_amount:Ext.util.Format.number(cart_amount,'0,000.00'),
                                        cart_amount_for_computation:cart_amount,
                                        total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                        delivery_charges:Ext.util.Format.number(delivery_charges,'0,000.00'),
                                        delivery_charges_for_computation:delivery_charges
                                    };
                                    product_win.down('#paymentform').getForm().setValues(values);


        							win.close();
                                     //redirect to quickteller site for payment
                                    //window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

        **/
        var product_win = Ext.getCmp('itemsinacartwin');
        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');
         store = product_win.down('dataview').getStore();

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Product/removeThisProductFromCart',
                            params:formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                  var cart_amount = result.cart_amount;
                                  var delivery_charges = result.delivery_charges;
                                   var total_amount = parseFloat(cart_amount) + parseFloat(delivery_charges);

                                    var values ={
                                        cart_gross_amount:Ext.util.Format.number(cart_amount,'0,000.00'),
                                        cart_amount_for_computation:cart_amount,
                                        total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                        delivery_charges:Ext.util.Format.number(delivery_charges,'0,000.00'),
                                        delivery_charges_for_computation:delivery_charges
                                    };
                                    product_win.down('#paymentform').getForm().setValues(values);


        							win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveChangesToProductInTheCartButtonClick: function(button, e, eOpts) {


        //var product_id = button.up('window').down('form').down('hiddenfield[name=product_id]').getValue();


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			store = product_win.down('dataview').getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/saveChangesToThisProductInTheCart',
                            params:{
                                product_id:product_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();

                                    var cart_amount = result.cart_amount;
                                    var delivery_charges = result.delivery_charges;
                                    var total_amount = parseFloat(cart_amount) + parseFloat(delivery_charges);

                                    console.log('the delivery charges are:',delivery_charges);

                                    console.log('the cart amount is:',cart_amount);

                                    var values ={
                                        cart_gross_amount:Ext.util.Format.number(cart_amount,'0,000.00'),
                                        cart_amount_for_computation:cart_amount,
                                        total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                        delivery_charges:Ext.util.Format.number(delivery_charges,'0,000.00'),
                                        delivery_charges_for_computation:delivery_charges
                                    };
                                    product_win.down('#paymentform').getForm().setValues(values);

        							win.close();
                                     //redirect to quickteller site for payment
                                    //window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/
        var product_win = Ext.getCmp('itemsinacartwin');
        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');
         store = product_win.down('dataview').getStore();

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Product/saveChangesToThisProductInTheCart',
                            params:formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             store.load();

                                    var cart_amount = result.cart_amount;
                                    var delivery_charges = result.delivery_charges;
                                    var total_amount = parseFloat(cart_amount) + parseFloat(delivery_charges);

                                    console.log('the delivery charges are:',delivery_charges);

                                    console.log('the cart amount is:',cart_amount);

                                    var values ={
                                        cart_gross_amount:Ext.util.Format.number(cart_amount,'0,000.00'),
                                        cart_amount_for_computation:cart_amount,
                                        total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                        delivery_charges:Ext.util.Format.number(delivery_charges,'0,000.00'),
                                        delivery_charges_for_computation:delivery_charges
                                    };
                                    product_win.down('#paymentform').getForm().setValues(values);

        							win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onCartWindowRender: function(component, eOpts) {
        component.down('dataview').getStore().load();

        //confirm if there is a hamper in the cart

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/confirmTheExistenceOfAHamperInTheCart',

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var non_ondelivery_exist = jsonResponse.non_ondelivery_exist;
                                //var hamper_exist =1;

                                if(non_ondelivery_exist == 1 || non_ondelivery_exist == true){
                                    component.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }else{
                                    component.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }

                                console.log('hamper exist is:',non_ondelivery_exist);
        					}

        				}




        			});
    },

    onTopPriorityDeliveryRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');


         //clear

        var cart_amount = win.down('form').down('numberfield[name=cart_amount_for_computation]').getValue();

        var total_ondelivery_total_amount = win.down('form').down('numberfield[name=ondelivery_total_amount_for_computation]').getValue();

        var total_non_ondelivery_total_amount = win.down('form').down('numberfield[name=non_ondelivery_total_amount_for_computation]').getValue();

        var total_is_delivery_selected = win.down('form').down('hiddenfield[name=is_delivery_selected]').getValue();

        if(win.down('#primaryAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=city]').getValue();
        }else if(win.down('#permanentAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=delivery_city]').getValue();
        }else if(win.down('#corporateAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=corporate_city]').getValue();
        }else if(win.down('#preferredAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('combobox[name=order_city]').getValue();
        }else{
            var city_id = 0;
        }

        if(win.down('#walletPaymentRadio').getValue() == 1){
            var payment_method = 'wallet';
        }else if(win.down('#onlinePaymentRadio').getValue() == 1){
            var payment_method = 'online';
        }else if(win.down('#paymentOnDeliveryRadio').getValue() == 1){
            var payment_method = 'ondelivery';
        }


        //get the ondelivery payment preference

        if(win.down('#scheduledPaymentForBothDeliveryAndVirtualRadio').getValue() == 1){
           var payment_preference = 'online';
        }else{
             var payment_preference = 'ondelivery';
        }

        var delivery_type = 'top';



            if(newValue === true){

             Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=PlatformSettings/gettheapplicabledeliveryamount',
                         params:{
                             city_id:city_id,
                             payment_method:payment_method,
                             delivery_type:delivery_type
                         },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var top_priority = jsonResponse.top_priority;
                                var exclusive_delivery_charge = jsonResponse.exclusives;
                                var escrow_charge = jsonResponse.escrow;
                                var is_exclusive = jsonResponse.is_exclusive_only;
                                var payable_on_delivery_cost_of_service = jsonResponse.payable_on_delivery_cost_of_service;
                                var delivery_cost_on_wallet_or_online_payment = jsonResponse.delivery_cost_on_wallet_or_online_payment;

                               if(is_exclusive == true || is_exclusive == 1){
                                        var total_delivery_cost = parseFloat(exclusive_delivery_charge);
                                    }else{
                                       var total_delivery_cost = parseFloat(top_priority) + parseFloat(exclusive_delivery_charge);
                                    }





                                console.log('on delivery total cost:',parseFloat(total_ondelivery_total_amount));

                                console.log('the non on delivery total cost :',parseFloat(total_non_ondelivery_total_amount));

                                 console.log('the excrow charge is is:',escrow_charge);

                            }

                            var total_amount = parseFloat(cart_amount) + parseFloat(total_delivery_cost) + parseFloat(escrow_charge);
                            var ondelivery_total_amount = parseFloat(total_ondelivery_total_amount) + parseFloat(payable_on_delivery_cost_of_service);
                            var non_ondelivery_total_amount = parseFloat(total_non_ondelivery_total_amount) + parseFloat(delivery_cost_on_wallet_or_online_payment) + parseFloat(escrow_charge);


                            var values = {

                                total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                delivery_charges:Ext.util.Format.number(total_delivery_cost,'0,000.00'),
                                delivery_charges_for_computation:total_delivery_cost,
                                escrow_charge:Ext.util.Format.number(escrow_charge,'0,000.00'),
                                escrow_charge_for_computation:escrow_charge,
                                ondelivery_delivery_charges:Ext.util.Format.number(payable_on_delivery_cost_of_service,'0,000.00'),
                                ondelivery_delivery_charges_for_computation:payable_on_delivery_cost_of_service,
                                non_ondelivery_delivery_charges:Ext.util.Format.number(delivery_cost_on_wallet_or_online_payment,'0,000.00'),
                                non_ondelivery_delivery_charges_for_computation:delivery_cost_on_wallet_or_online_payment,
                                ondelivery_total_amount:Ext.util.Format.number((ondelivery_total_amount),'0,000.00'),
                                non_ondelivery_total_amount:Ext.util.Format.number((non_ondelivery_total_amount),'0,000.00')


                            };


                            win.down('form').getForm().setValues(values);

                            if(payment_method == 'ondelivery' && payment_preference == 'online'){
                                var total_amount_payable = ondelivery_total_amount + non_ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'ondelivery' && payment_preference == 'ondelivery'){
                                var total_amount_payable = ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'online'){
                                var total_amount_payable = total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }



                            var collectibe_values = {
                               amount:Ext.util.Format.number((total_collectibles),'0'),
                               summary_amount: Ext.util.Format.number((total_amount_payable),'0,000.00')

                            };
                            Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(collectibe_values);




        				}




        			});

        }else{

           field.reset();



        }



        if(win.down('#cartTermCheckbox').isDisabled(true)){
            win.down('#cartTermCheckbox').setDisabled(false);
        }


    },

    onPriorityDeliveryRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');



        var cart_amount = win.down('form').down('numberfield[name=cart_amount_for_computation]').getValue();

        var total_ondelivery_total_amount = win.down('form').down('numberfield[name=ondelivery_total_amount_for_computation]').getValue();

        var total_non_ondelivery_total_amount = win.down('form').down('numberfield[name=non_ondelivery_total_amount_for_computation]').getValue();

        if(win.down('#primaryAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=city]').getValue();
        }else if(win.down('#permanentAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=delivery_city]').getValue();
        }else if(win.down('#corporateAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=corporate_city]').getValue();
        }else if(win.down('#preferredAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('combobox[name=order_city]').getValue();
        }else{
            var city_id = 0;
        }

        if(win.down('#walletPaymentRadio').getValue() == 1){
            var payment_method = 'wallet';
        }else if(win.down('#onlinePaymentRadio').getValue() == 1){
            var payment_method = 'online';
        }else if(win.down('#paymentOnDeliveryRadio').getValue() == 1){
            var payment_method = 'ondelivery';
        }

        //get the ondelivery payment preference

        if(win.down('#scheduledPaymentForBothDeliveryAndVirtualRadio').getValue() == 1){
           var payment_preference = 'online';
        }else{
             var payment_preference = 'ondelivery';
        }


        var delivery_type = 'priority';

        if(newValue === true){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=PlatformSettings/gettheapplicabledeliveryamount',
                            params:{
                                city_id:city_id,
                                payment_method:payment_method,
                                delivery_type:delivery_type
                            },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var priority = jsonResponse.priority;
                                var exclusive_delivery_charge = jsonResponse.exclusives;
                                var escrow_charge = jsonResponse.escrow;
                                var is_exclusive = jsonResponse.is_exclusive_only;
                                var payable_on_delivery_cost_of_service = jsonResponse.payable_on_delivery_cost_of_service;
                                var delivery_cost_on_wallet_or_online_payment = jsonResponse.delivery_cost_on_wallet_or_online_payment;

                                if(is_exclusive == true || is_exclusive == 1){
                                    var total_delivery_cost = parseFloat(exclusive_delivery_charge);
                                }else{
                                   var total_delivery_cost = parseFloat(priority) + parseFloat(exclusive_delivery_charge);
                                }

                                console.log('the top priority delivery cost is:',priority);

                                console.log('the exclusive delivery cost is:',exclusive_delivery_charge);

                                 console.log('the excrow charge is is:',escrow_charge);

                            }
                            var total_amount = parseFloat(cart_amount) + parseFloat(total_delivery_cost) + parseFloat(escrow_charge);
                            var ondelivery_total_amount = parseFloat(total_ondelivery_total_amount) + parseFloat(payable_on_delivery_cost_of_service);
                            var non_ondelivery_total_amount = parseFloat(total_non_ondelivery_total_amount) + parseFloat(delivery_cost_on_wallet_or_online_payment) + parseFloat(escrow_charge);

                            var values = {

                                total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                delivery_charges:Ext.util.Format.number(total_delivery_cost,'0,000.00'),
                                delivery_charges_for_computation:total_delivery_cost,
                                escrow_charge:Ext.util.Format.number(escrow_charge,'0,000.00'),
                                escrow_charge_for_computation:escrow_charge,
                                ondelivery_delivery_charges:Ext.util.Format.number(payable_on_delivery_cost_of_service,'0,000.00'),
                                ondelivery_delivery_charges_for_computation:payable_on_delivery_cost_of_service,
                                non_ondelivery_delivery_charges:Ext.util.Format.number(delivery_cost_on_wallet_or_online_payment,'0,000.00'),
                                non_ondelivery_delivery_charges_for_computation:delivery_cost_on_wallet_or_online_payment,
                                ondelivery_total_amount:Ext.util.Format.number((ondelivery_total_amount),'0,000.00'),
                                non_ondelivery_total_amount:Ext.util.Format.number((non_ondelivery_total_amount),'0,000.00')

                            };


                            win.down('form').getForm().setValues(values);

                            if(payment_method == 'ondelivery' && payment_preference == 'online'){
                                var total_amount_payable = ondelivery_total_amount + non_ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'ondelivery' && payment_preference == 'ondelivery'){
                                var total_amount_payable = ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'online'){
                                var total_amount_payable = total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }

                            console.log('total_amount_payable is:',total_amount_payable);

                            console.log('total_collectibles is:',total_collectibles);


                            var collectibe_values = {
                               amount:Ext.util.Format.number((total_collectibles),'0'),
                               summary_amount: Ext.util.Format.number((total_amount_payable),'0,000.00')

                            };
                            Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(collectibe_values);




        				}




        			});


        }else{
            field.reset();


        }

        if(win.down('#cartTermCheckbox').isDisabled(true)){
            win.down('#cartTermCheckbox').setDisabled(false);
        }


    },

    onStandardDeliveryRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');




        var cart_amount = win.down('form').down('numberfield[name=cart_amount_for_computation]').getValue();

        var total_ondelivery_total_amount = win.down('form').down('numberfield[name=ondelivery_total_amount_for_computation]').getValue();

        var total_non_ondelivery_total_amount = win.down('form').down('numberfield[name=non_ondelivery_total_amount_for_computation]').getValue();

        if(win.down('#primaryAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=city]').getValue();
        }else if(win.down('#permanentAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=delivery_city]').getValue();
        }else if(win.down('#corporateAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('textfield[name=corporate_city]').getValue();
        }else if(win.down('#preferredAddressRadio').getValue() == 1){
            var city_id = win.down('form').down('combobox[name=order_city]').getValue();
        }else{
            var city_id = 0;
        }


        if(win.down('#walletPaymentRadio').getValue() == 1){
            var payment_method = 'wallet';
        }else if(win.down('#onlinePaymentRadio').getValue() == 1){
            var payment_method = 'online';
        }else if(win.down('#paymentOnDeliveryRadio').getValue() == 1){
            var payment_method = 'ondelivery';
        }

        //get the ondelivery payment preference

        if(win.down('#scheduledPaymentForBothDeliveryAndVirtualRadio').getValue() == 1){
           var payment_preference = 'online';
        }else{
             var payment_preference = 'ondelivery';
        }


        var delivery_type = 'standard';

        if(newValue === true){


            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=PlatformSettings/gettheapplicabledeliveryamount',
                            params:{
                                city_id:city_id,
                                payment_method:payment_method,
                                delivery_type:delivery_type
                            },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var standard = jsonResponse.standard;
                                var exclusive_delivery_charge = jsonResponse.exclusives;
                                var escrow_charge = jsonResponse.escrow;

                                var is_exclusive = jsonResponse.is_exclusive_only;
                                var payable_on_delivery_cost_of_service = jsonResponse.payable_on_delivery_cost_of_service;
                                var delivery_cost_on_wallet_or_online_payment = jsonResponse.delivery_cost_on_wallet_or_online_payment;

                                if(is_exclusive == true || is_exclusive == 1){
                                    var total_delivery_cost = parseFloat(exclusive_delivery_charge);
                                }else{
                                   var total_delivery_cost = parseFloat(standard) + parseFloat(exclusive_delivery_charge);
                                }


                                console.log('the top priority delivery cost is:',standard);

                                console.log('the exclusive delivery cost is:',exclusive_delivery_charge);

                                 console.log('the excrow charge is is:',escrow_charge);

                            }
                            var total_amount = parseFloat(cart_amount) + parseFloat(total_delivery_cost) + parseFloat(escrow_charge);
                            var ondelivery_total_amount = parseFloat(total_ondelivery_total_amount) + parseFloat(payable_on_delivery_cost_of_service);
                            var non_ondelivery_total_amount = parseFloat(total_non_ondelivery_total_amount) + parseFloat(delivery_cost_on_wallet_or_online_payment) + parseFloat(escrow_charge);

                            var values = {

                                total_amount:Ext.util.Format.number((total_amount),'0,000.00'),
                                delivery_charges:Ext.util.Format.number(total_delivery_cost,'0,000.00'),
                                delivery_charges_for_computation:total_delivery_cost,
                                escrow_charge:Ext.util.Format.number(escrow_charge,'0,000.00'),
                                escrow_charge_for_computation:escrow_charge,
                                ondelivery_delivery_charges:Ext.util.Format.number(payable_on_delivery_cost_of_service,'0,000.00'),
                                ondelivery_delivery_charges_for_computation:payable_on_delivery_cost_of_service,
                                non_ondelivery_delivery_charges:Ext.util.Format.number(delivery_cost_on_wallet_or_online_payment,'0,000.00'),
                                non_ondelivery_delivery_charges_for_computation:delivery_cost_on_wallet_or_online_payment,
                                ondelivery_total_amount:Ext.util.Format.number((ondelivery_total_amount),'0,000.00'),
                                non_ondelivery_total_amount:Ext.util.Format.number((non_ondelivery_total_amount),'0,000.00')
                            };


                            win.down('form').getForm().setValues(values);

                            if(payment_method == 'ondelivery' && payment_preference == 'online'){
                                var total_amount_payable = ondelivery_total_amount + non_ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'ondelivery' && payment_preference == 'ondelivery'){
                                var total_amount_payable = ondelivery_total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }else if(payment_method == 'online'){
                                var total_amount_payable = total_amount;
                                var total_collectibles = (total_amount_payable) * 100;
                            }



                            var collectibe_values = {
                               amount:Ext.util.Format.number((total_collectibles),'0'),
                               summary_amount: Ext.util.Format.number((total_amount_payable),'0,000.00')

                            };
                            Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(collectibe_values);




        				}



        			});



        }else{
            field.reset();


        }

        if(win.down('#cartTermCheckbox').isDisabled(true)){
            win.down('#cartTermCheckbox').setDisabled(false);
        }


    },

    onPaymentSummaryWindowRender: function(component, eOpts) {

        /**var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=amount]').getValue();
        var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
        var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

        console.log('the amounttt isss:',amount);
        console.log('the invoice number isss:',invoice_number);
        console.log('the order number isss:',order_number);


        var values = {
            amount:amount,
            invoice_number:invoice_number,
            order_number:order_number

        };

        //load the form

        component.down('#summaryform').getForm().setValues(values);

        **/
    },

    onPayPaymentSummaryButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        win.destroy();
    },

    onPrimaryDeliveryAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        //get the selected city
        var city_id = win.down('#primaryCityId').getValue();


        win.down('#topPriority').reset();
        win.down('#priority').reset();
        win.down('#standard').reset();
        win.down('#cartTermCheckbox').reset();
        win.down('#cartTermCheckbox').setDisabled(true);
        win.down('#paymentOnDeliveryRadio').reset();
        win.down('#permanentAddressRadio').reset();
        win.down('#corporateAddressRadio').reset();
        win.down('#preferredAddressRadio').reset();
        win.down('#directPaymentContainer').setVisible(true);
        win.down('#paymentondeliveryContainer').setVisible(false);

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=City/isPaymentOnDeliveryPossibleInThisCity',
        				 params:{
        					city_id:city_id
        				 },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var ondelivery_payment = jsonResponse.ondelivery_payment;
                                //var hamper_exist =1;

                              if(ondelivery_payment == 1 || ondelivery_payment == true){
                                    win.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }else{
                                    win.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }
                                var cart_amount = win.down('#cartAmount').getValue();
                                var values = {
                                    delivery_charges:Ext.util.Format.number((0),'0,000.00'),
                                    total_amount:cart_amount,
                                    escrow_charge:Ext.util.Format.number((0),'0,000.00'),
                                    is_delivery_selected:1,
                                    selected_delivery_city_id:city_id

                                 };

                                win.down('form').getForm().setValues(values);


        					}

        				}




        			});




    },

    onPermanentAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        //get the selected city
        var city_id = win.down('#permanentCityId').getValue();

        win.down('#topPriority').reset();
        win.down('#priority').reset();
        win.down('#standard').reset();
        win.down('#cartTermCheckbox').reset();
        win.down('#cartTermCheckbox').setDisabled(true);
        win.down('#paymentOnDeliveryRadio').reset();
        win.down('#primaryAddressRadio').reset();
        win.down('#corporateAddressRadio').reset();
        win.down('#preferredAddressRadio').reset();
        win.down('#directPaymentContainer').setVisible(true);
        win.down('#paymentondeliveryContainer').setVisible(false);




        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=City/isPaymentOnDeliveryPossibleInThisCity',
        				 params:{
        					city_id:city_id
        				 },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var ondelivery_payment = jsonResponse.ondelivery_payment;
                                //var hamper_exist =1;

                              if(ondelivery_payment == 1 || ondelivery_payment == true){
                                    win.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }else{
                                    win.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }
                                var cart_amount = win.down('#cartAmount').getValue();
                                var values = {
                                    delivery_charges:Ext.util.Format.number((0),'0,000.00'),
                                    total_amount:cart_amount,
                                    escrow_charge:Ext.util.Format.number((0),'0,000.00'),
                                    is_delivery_selected:1,
                                    selected_delivery_city_id:city_id

                                 };

                                win.down('form').getForm().setValues(values);


        					}

        				}




        			});


    },

    onCorporateAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        //get the selected city
        var city_id = win.down('#corporateCityId').getValue();

        win.down('#topPriority').reset();
        win.down('#priority').reset();
        win.down('#standard').reset();
        win.down('#cartTermCheckbox').reset();
        win.down('#cartTermCheckbox').setDisabled(true);
        win.down('#paymentOnDeliveryRadio').reset();
        win.down('#primaryAddressRadio').reset();
        win.down('#permanentAddressRadio').reset();
        win.down('#preferredAddressRadio').reset();
        win.down('#directPaymentContainer').setVisible(true);
        win.down('#paymentondeliveryContainer').setVisible(false);


        var cart_amount = win.down('#cartAmount').getValue();

        var values = {
            delivery_charges:Ext.util.Format.number((0),'0,000.00'),
            total_amount:cart_amount,
            escrow_charge:Ext.util.Format.number((0),'0,000.00'),
            is_delivery_selected:1

        };

        win.down('form').getForm().setValues(values);


                 Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=City/isPaymentOnDeliveryPossibleInThisCity',
        				 params:{
        					city_id:city_id
        				 },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var ondelivery_payment = jsonResponse.ondelivery_payment;
                                //var hamper_exist =1;

                              if(ondelivery_payment == 1 || ondelivery_payment == true){
                                    win.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }else{
                                    win.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }
                                var cart_amount = win.down('#cartAmount').getValue();
                                var values = {
                                    delivery_charges:Ext.util.Format.number((0),'0,000.00'),
                                    total_amount:cart_amount,
                                    escrow_charge:Ext.util.Format.number((0),'0,000.00'),
                                    is_delivery_selected:1,
                                    selected_delivery_city_id:city_id

                                 };

                                win.down('form').getForm().setValues(values);


        					}

        				}




        			});


    },

    onPreferredAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        //get the selected city
        var city_id = win.down('#givenCityId').getValue();


        win.down('#topPriority').reset();
        win.down('#priority').reset();
        win.down('#standard').reset();
        win.down('#cartTermCheckbox').reset();
        win.down('#cartTermCheckbox').setDisabled(true);
        win.down('#paymentOnDeliveryRadio').reset();
        win.down('#primaryAddressRadio').reset();
        win.down('#permanentAddressRadio').reset();
        win.down('#corporateAddressRadio').reset();
        win.down('#directPaymentContainer').setVisible(true);
        win.down('#paymentondeliveryContainer').setVisible(false);


        var cart_amount = win.down('#cartAmount').getValue();

        var values = {
            delivery_charges:Ext.util.Format.number((0),'0,000.00'),
            total_amount:cart_amount,
            escrow_charge:Ext.util.Format.number((0),'0,000.00'),
            is_delivery_selected:1

        };

        win.down('form').getForm().setValues(values);


         Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=City/isPaymentOnDeliveryPossibleInThisCity',
        				 params:{
        					city_id:city_id
        				 },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var ondelivery_payment = jsonResponse.ondelivery_payment;
                                //var hamper_exist =1;

                              if(ondelivery_payment == 1 || ondelivery_payment == true){
                                    win.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }else{
                                    win.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }
                                var cart_amount = win.down('#cartAmount').getValue();
                                var values = {
                                    delivery_charges:Ext.util.Format.number((0),'0,000.00'),
                                    total_amount:cart_amount,
                                    escrow_charge:Ext.util.Format.number((0),'0,000.00'),
                                    is_delivery_selected:1,
                                    selected_delivery_city_id:city_id

                                 };

                                win.down('form').getForm().setValues(values);


        					}

        				}




        			});



    },

    onCartTermAndConditionCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var is_delivery_selected = win.down('form').down('hiddenfield[name=is_delivery_selected]').getValue();

        if(is_delivery_selected == 1 || is_delivery_selected == true){
          if(newValue == 1){
            //activate the term button
            win.down('#termsBtn').setDisabled(false);
            win.down('#paymentBtn').setDisabled(false);
            win.down('#makewalletpaymentBtn').setDisabled(false);
            win.down('#makeondeliverypaymentBtn').setDisabled(false);
            win.down('#scheduledonlinepaymentBtn').setDisabled(false);
            win.down('#makescheduledwalletpaymentBtn').setDisabled(false);

        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#paymentBtn').setDisabled(true);
            win.down('#makewalletpaymentBtn').setDisabled(true);
            win.down('#makeondeliverypaymentBtn').setDisabled(true);
            win.down('#scheduledonlinepaymentBtn').setDisabled(true);
            win.down('#makescheduledwalletpaymentBtn').setDisabled(true);


        }
        }else{
            field.reset();
            Ext.Msg.alert('City of Delivery!', "Please select the preferred delivery address location and continue to payment");
        }
    },

    onPaymentMethodsComparismButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.PaymentMethosComparisonWin');

        win.show();
    },

    onPaymentOnDeliveryRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#directPaymentContainer').setVisible(false);
            win.down('#paymentondeliveryContainer').setVisible(true);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#paymentBtn').setVisible(false);
             win.down('#makescheduledwalletpaymentBtn').setVisible(false);
            win.down('#scheduledonlinepaymentBtn').setVisible(true);
             win.down('#scheduledWalletPaymentRadio').reset();
            win.down('#scheduledOnlinePaymentRadio').reset();
            win.down('#scheduledDeliveryPaymentRadio').reset();
            win.down('#scheduledPaymentForBothDeliveryAndVirtualRadio').reset();
             win.down('#makewalletpaymentBtn').setVisible(false);
            win.down('#topPriority').reset();
             win.down('#priority').reset();
             win.down('#standard').reset();
            win.down('#cartTermCheckbox').setDisabled(true);
            win.down('#cartTermCheckbox').reset();
        }
    },

    onWalletPaymentRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#directPaymentContainer').setVisible(true);
            win.down('#paymentondeliveryContainer').setVisible(false);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#paymentBtn').setVisible(false);
            win.down('#makewalletpaymentBtn').setVisible(true);
             win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(false);
             win.down('#makescheduledwalletpaymentBtn').setVisible(false);
            win.down('#topPriority').reset();
             win.down('#priority').reset();
             win.down('#standard').reset();
            win.down('#cartTermCheckbox').setDisabled(true);
            win.down('#cartTermCheckbox').reset();
        }
    },

    onOnlinePaymentRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#directPaymentContainer').setVisible(true);
            win.down('#paymentondeliveryContainer').setVisible(false);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#paymentBtn').setVisible(true);
            win.down('#makewalletpaymentBtn').setVisible(false);
             win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(false);
            win.down('#topPriority').reset();
             win.down('#priority').reset();
             win.down('#standard').reset();
            win.down('#cartTermCheckbox').setDisabled(true);
            win.down('#cartTermCheckbox').reset();

        }
    },

    onOnDeliveryScheduledPaymentRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#scheduledOtherPaymentMethodsContainer').setDisabled(true);
            win.down('#scheduledOtherMeansOfPaymentContainer').setDisabled(true);
            win.down('#scheduledOnDeliveryPaymentMethodsContainer').setDisabled(false);
           win.down('#makeondeliverypaymentBtn').setVisible(true);
             win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(false);

        }
    },

    onScheduledWalletPaymentRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#scheduledOtherPaymentMethodsContainer').setDisabled(false);
            //win.down('#scheduledOnDeliveryPaymentMethodsContainer').setDisabled(true);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(true);

        }
    },

    onScheduledOnlinePaymentRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#scheduledOtherPaymentMethodsContainer').setDisabled(false);
           // win.down('#scheduledOnDeliveryPaymentMethodsContainer').setDisabled(true);
            win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#scheduledonlinepaymentBtn').setVisible(true);
            win.down('#makescheduledwalletpaymentBtn').setVisible(false);
        }
    },

    onMakingPaymentFromWalletButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');

                    if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/makeThisOrderPaymentFromWallet',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                   	win.close();


        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/makeThisOrderPaymentFromWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onMakingPaymentOnDeliveryButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');

                    if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/makeThisOrderPaymentOnDelivery',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                   	win.close();


        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Order/makeThisOrderPaymentOnDelivery',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onMakingScheduledOnlinePaymentButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/makeThisOrderScheduledOnlineAndOndeliveryPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var values = {
                                        order_number:result.order_number,
                                        invoice_number:result.invoice_number,
                                        membership_number:result.membership_number
                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                  store = this.getAllSubscriptionPaymentsGrid().getStore();

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/makeThisOrderScheduledOnlineAndOndeliveryPayment',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();

                                    var values = {
                                        order_number:result.order_number,
                                        invoice_number:result.invoice_number,
                                        membership_number:result.membership_number
                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onScheduledPaymentFromWalletButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');

                    if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Order/makeThisOrderPaymentFromWalletAndOnDelivery',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                   	win.close();


        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/makeThisOrderPaymentFromWalletAndOnDelivery',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onScheduledPaymentFromBothPaymentMethodsRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#scheduledOtherPaymentMethodsContainer').setDisabled(false);
            win.down('#scheduledOnDeliveryPaymentMethodsContainer').setDisabled(false);
           win.down('#makeondeliverypaymentBtn').setVisible(false);
             win.down('#scheduledonlinepaymentBtn').setVisible(false);
            win.down('#makescheduledwalletpaymentBtn').setVisible(true);
            win.down('#scheduledOtherMeansOfPaymentContainer').setDisabled(false);
            win.down('#scheduledWalletPaymentRadio').reset();
            win.down('#scheduledOnlinePaymentRadio').reset();


        }
    },

    onGivenCityComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //get the selected city
        var city_id = combo.getValue();


        win.down('#topPriority').reset();
        win.down('#priority').reset();
        win.down('#standard').reset();
        win.down('#cartTermCheckbox').reset();
        win.down('#cartTermCheckbox').setDisabled(true);
        win.down('#paymentOnDeliveryRadio').reset();
        win.down('#primaryAddressRadio').reset();
        win.down('#permanentAddressRadio').reset();
        win.down('#corporateAddressRadio').reset();
        win.down('#directPaymentContainer').setVisible(true);
        win.down('#paymentondeliveryContainer').setVisible(false);


        var cart_amount = win.down('#cartAmount').getValue();

        var values = {
            delivery_charges:Ext.util.Format.number((0),'0,000.00'),
            total_amount:cart_amount,
            escrow_charge:Ext.util.Format.number((0),'0,000.00'),
            is_delivery_selected:1

        };

        win.down('form').getForm().setValues(values);


         Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=City/isPaymentOnDeliveryPossibleInThisCity',
        				 params:{
        					city_id:city_id
        				 },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var ondelivery_payment = jsonResponse.ondelivery_payment;
                                //var hamper_exist =1;

                              if(ondelivery_payment == 1 || ondelivery_payment == true){
                                    win.down('#paymentOnDeliveryRadio').setDisabled(false);
                                }else{
                                    win.down('#paymentOnDeliveryRadio').setDisabled(true);
                                }
                                var cart_amount = win.down('#cartAmount').getValue();
                                var values = {
                                    delivery_charges:Ext.util.Format.number((0),'0,000.00'),
                                    total_amount:cart_amount,
                                    escrow_charge:Ext.util.Format.number((0),'0,000.00'),
                                    is_delivery_selected:1,
                                    selected_delivery_city_id:city_id

                                 };

                                win.down('form').getForm().setValues(values);


        					}

        				}




        			});



    },

    onSpecialcountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var country_id = combo.getValue();

        //clear both the state and the city combos

        state_combo = win.down('#specialStateCombo');

        city_combo = win.down('#givenCityId');


        state_combo.reset();

        city_combo.reset();

        //load both the combo stores

        state_combo.getStore().load({
            params:{
                country_id:country_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:0,
                country_id:country_id

            }
        });
    },

    onSpecialStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var state_id = combo.getValue();

        //get the city and the country

        var city_combo = win.down('#givenCityId');

        var country_id = win.down('#specialCountryCombo').getValue();

        city_combo.reset();

        //reload this combo

        combo.getStore().load({
            params:{
                country_id:country_id,
                state_id:state_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:state_id,
                country_id:country_id

            }
        });
    },

    init: function(application) {
        this.control({
            "itemsinacartwin button#move-next": {
                click: this.onItemsInCartNextMoveButtonClick
            },
            "itemsinacartwin button#move-prev": {
                click: this.onMoveBackOnCartButtonClick
            },
            "itemsinacartwin button#paymentBtn": {
                click: this.onMakePaymentFromCartButtonClick
            },
            "itemsinacartwin dataview": {
                itemdblclick: this.onProductInCartDataviewItemDblClick
            },
            "productincartdetailwin": {
                render: this.onProductInCartWindowRender
            },
            "productwithconstiteuntsincartdetailwin": {
                render: this.onProductWithConstiuentsInCartWindowRender
            },
            "productincartdetailwin button#knowmoreBtn": {
                click: this.onProductInCartKnowMoreButtonClick
            },
            "productwithconstiteuntsincartdetailwin button#knowmoreBtn": {
                click: this.onProductWithConstituentInCartKnowMoreButtonClick
            },
            "productincartdetailwin button#viewimagesBtn": {
                click: this.onProductInCartImageViewsButtonClick
            },
            "productincartdetailwin dataview": {
                itemdblclick: this.onProductInTheCartDataviewItemDblClick
            },
            "productwithconstiteuntsincartdetailwin button#viewimagesBtn": {
                click: this.onProductWithConstituentInCartImageViewsButtonClick
            },
            "productwithconstiteuntsincartdetailwin dataview#primaryproductDataview": {
                itemdblclick: this.onProductWithConstituentInCartImageViewsDataviewItemDblClick
            },
            "productwithconstiteuntsincartdetailwin dataview#constituentsDataview": {
                itemdblclick: this.onConstituentsOfProductWithConstituentsDataviewItemDblClick
            },
            "button#removecartproductBtn": {
                click: this.onRemoveProductFromTheCartButtonClick
            },
            "button#savecartproductBtn": {
                click: this.onSaveChangesToProductInTheCartButtonClick
            },
            "itemsinacartwin": {
                render: this.onCartWindowRender
            },
            "radiofield#topPriority": {
                change: this.onTopPriorityDeliveryRadiofieldChange
            },
            "radiofield#priority": {
                change: this.onPriorityDeliveryRadiofieldChange
            },
            "radiofield#standard": {
                change: this.onStandardDeliveryRadiofieldChange
            },
            "paymentsummarywin": {
                render: this.onPaymentSummaryWindowRender
            },
            "paymentsummarywin button#payBtn": {
                click: this.onPayPaymentSummaryButtonClick
            },
            "radiofield#primaryAddressRadio": {
                change: this.onPrimaryDeliveryAddressRadiofieldChange
            },
            "radiofield#permanentAddressRadio": {
                change: this.onPermanentAddressRadiofieldChange
            },
            "radiofield#corporateAddressRadio": {
                change: this.onCorporateAddressRadiofieldChange
            },
            "radiofield#preferredAddressRadio": {
                change: this.onPreferredAddressRadiofieldChange
            },
            "checkboxfield#cartTermCheckbox": {
                change: this.onCartTermAndConditionCheckboxfieldChange
            },
            "button#paymentmethodscomparismBtn": {
                click: this.onPaymentMethodsComparismButtonClick
            },
            "radiofield#paymentOnDeliveryRadio": {
                change: this.onPaymentOnDeliveryRadiofieldChange
            },
            "radiofield#walletPaymentRadio": {
                change: this.onWalletPaymentRadiofieldChange
            },
            "radiofield#onlinePaymentRadio": {
                change: this.onOnlinePaymentRadiofieldChange
            },
            "radiofield#scheduledDeliveryPaymentRadio": {
                change: this.onOnDeliveryScheduledPaymentRadiofieldChange
            },
            "radiofield#scheduledWalletPaymentRadio": {
                change: this.onScheduledWalletPaymentRadiofieldChange
            },
            "radiofield#scheduledOnlinePaymentRadio": {
                change: this.onScheduledOnlinePaymentRadiofieldChange
            },
            "itemsinacartwin button#makewalletpaymentBtn": {
                click: this.onMakingPaymentFromWalletButtonClick
            },
            "itemsinacartwin  button#makeondeliverypaymentBtn": {
                click: this.onMakingPaymentOnDeliveryButtonClick
            },
            "itemsinacartwin button#scheduledonlinepaymentBtn": {
                click: this.onMakingScheduledOnlinePaymentButtonClick
            },
            "itemsinacartwin button#makescheduledwalletpaymentBtn": {
                click: this.onScheduledPaymentFromWalletButtonClick
            },
            "radiofield#scheduledPaymentForBothDeliveryAndVirtualRadio": {
                change: this.onScheduledPaymentFromBothPaymentMethodsRadiofieldChange
            },
            "combobox#givenCityId": {
                select: this.onGivenCityComboboxSelect
            },
            "combobox#specialCountryCombo": {
                select: this.onSpecialcountryComboboxSelect
            },
            "combobox#specialStateCombo": {
                select: this.onSpecialStateComboboxSelect
            }
        });
    }

});
