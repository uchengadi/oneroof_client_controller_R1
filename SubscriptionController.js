/*
 * File: app/controller/SubscriptionController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.SubscriptionController', {
    extend: 'Ext.app.Controller',

    stores: [
        'StatesInACountry',
        'CitiesInAState',
        'PermanentStatesInACountry',
        'CorporateCitiesInAState',
        'CorporateStatesInACountry',
        'PermanentCitiesInAState'
    ],
    views: [
        'SubscriptionOfMembershipForm',
        'MakeSubscriptionPaymentForm',
        'MembershipSubscriptionForm',
        'NewMembershipSubscriptionWin'
    ],

    onNewMembershipSubscriptionButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('membershipsubscriptionform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        console.log('the next active item is:', item);

        if(item.getXType() == 'makesubscriptionpaymentform' ){
            //change the button text to payment
            if(win.down('#typeCombo').getValue() == 3){
                win.down('#submitBtn').setVisible(true);
                 win.down('#paymentBtn').setVisible(false);
            }else{
                win.down('#paymentBtn').setVisible(true);
                win.down('#submitBtn').setVisible(false);
            }

           Ext.getCmp('next-next-move').setVisible(false);
        }
    },

    onEffectSubscriptionPaymentButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/registerThisNewMember',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;
                                    var email = result.email;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00'),
                                        email:email

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Membership Subscription");
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

        **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/registerThisNewMember',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;
                                    var email = result.email;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00'),
                                        email:email

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Membership Subscription");
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });




    },

    onPrevMembershipSubscriptionButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('membershipsubscriptionform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();

        console.log('the prev active item is:', item);

        if(item.getXType() == 'subscriptionofmembershipform' ){
            //change the button text to payment
          win.down('#paymentBtn').setVisible(false);
          win.down('#submitBtn').setVisible(false);
           Ext.getCmp('next-next-move').setVisible(true);
        }
    },

    onMembershipTypeComboboxSelect: function(combo, records, eOpts) {
        //get a handle to the gross amount

        var win = combo.up('window');

        var form = win.down('form');

        var operation = form.down('hiddenfield[name=operation]').getValue();

        var yearly_sub = win.down('#yearlySubscriptionRadio').getValue();
        var monthly_sub = win.down('#monthlySubscriptionRadio').getValue();

        if(yearly_sub == 1){
            var type = 'yearly';
        }else{
            var type = 'monthly';

        }



            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=MembershipFee/retrieveSubscriptionFeeInformation',
        			     params: {
                             membership_type_id:combo.getValue(),
                             number_of_years: win.down('#numberofyearsField').getValue(),
                             type:type,
                             number_of_months:win.down('#numberofmonthsField').getValue()

        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var gross_amount = jsonResponse.gross;
                                var discounted_amount = jsonResponse.discounted_amount;
                                var net_amount = jsonResponse.net_amount;
                                var code = jsonResponse.membership_code;

                                if(operation == 'registration'){
                                    if(code == 'freebee'){
                                        win.down('#paymentBtn').setVisible(false);
                                        win.down('#submitBtn').setVisible(true);
                                         win.down('#numberofyearsField').setDisabled(true);
                                        win.down('#numberofmonthsField').setDisabled(true);
                                        win.down('#subscriptionTypeContainer').setDisabled(true);
                                        win.down('#paymentSummaryContainer').setDisabled(true);

                                    }else{
                                        win.down('#paymentBtn').setVisible(true);
                                        win.down('#submitBtn').setVisible(false);
                                        win.down('#numberofyearsField').setDisabled(false);
                                        win.down('#numberofmonthsField').setDisabled(false);
                                        win.down('#subscriptionTypeContainer').setDisabled(false);
                                        win.down('#paymentSummaryContainer').setDisabled(false);

                                    }

                                }else{
                                    if(code == 'freebee'){
                                        win.down('#numberofyearsField').setDisabled(true);
                                        win.down('#numberofmonthsField').setDisabled(true);
                                        win.down('#subscriptionTypeContainer').setDisabled(true);
                                        win.down('#paymentSummaryContainer').setDisabled(true);
                                         //win.down('#changesubscriptionBtn').setDisabled(true);
                                    }else{
                                         win.down('#numberofyearsField').setDisabled(false);
                                        win.down('#numberofmonthsField').setDisabled(false);
                                        win.down('#subscriptionTypeContainer').setDisabled(false);
                                        win.down('#paymentSummaryContainer').setDisabled(false);

                                    }
                                }




        					}

        					var values = {

                                gross:gross_amount,
                                gross_for_display:Ext.util.Format.number(gross_amount,'0,000.00'),
                                discount:discounted_amount,
                                discount_for_display:Ext.util.Format.number(discounted_amount,'0,000.00'),
                                net:net_amount,
                                net_for_display:Ext.util.Format.number(net_amount,'0,000.00')



        					};


        					//form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        win.down('#numberofyearsField').reset();
        win.down('#numberofmonthsField').reset();

    },

    onYearSubscriptionNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        //get a handle to the gross amount

        var win = field.up('window');

        var form = win.down('form');

        var type = 'yearly';

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=MembershipFee/retrieveSubscriptionFeeInformation',
        			     params: {
                             membership_type_id:win.down('#typeCombo').getValue(),
                             number_of_years: newValue,
                             type:type,
                              number_of_months:0
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var gross_amount = jsonResponse.gross;
                                var discounted_amount = jsonResponse.discounted_amount;
                                var net_amount = jsonResponse.net_amount;




        					}

        					var values = {

                                gross:gross_amount,
                                gross_for_display:Ext.util.Format.number(gross_amount,'0,000.00'),
                                discount:discounted_amount,
                                discount_for_display:Ext.util.Format.number(discounted_amount,'0,000.00'),
                                net:net_amount,
                                net_for_display:Ext.util.Format.number(net_amount,'0,000.00')



        					};


        					//form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});
    },

    onMonthlySuibscriptionNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        //get a handle to the gross amount

        var win = field.up('window');

        var form = win.down('form');

        var type = 'monthly';

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=MembershipFee/retrieveSubscriptionFeeInformation',
        			     params: {
                             membership_type_id:win.down('#typeCombo').getValue(),
                             number_of_months: newValue,
                             type:type,
                             number_of_years:0
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var gross_amount = jsonResponse.gross;
                                var discounted_amount = jsonResponse.discounted_amount;
                                var net_amount = jsonResponse.net_amount;




        					}

        					var values = {

                                gross:gross_amount,
                                gross_for_display:Ext.util.Format.number(gross_amount,'0,000.00'),
                                discount:discounted_amount,
                                discount_for_display:Ext.util.Format.number(discounted_amount,'0,000.00'),
                                net:net_amount,
                                net_for_display:Ext.util.Format.number(net_amount,'0,000.00')



        					};


        					//form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});
    },

    onSubmitThisRegistrationButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/RegisterThisNewBasicMember',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/RegisterThisNewBasicMember',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onChangeMembershipSubscriptionRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#update_onlyBtn').setVisible(false);
            win.down('#updateandrenewBtn').setVisible(false);
            win.down('#updateandextendBtn').setVisible(false);
             win.down('#subscriptionDetailContainer').setDisabled(false);
            win.down('#changesubscriptionBtn').setVisible(true);
            win.down('#typeCombo').reset();
            win.down('#termsCheckbox').reset();
            win.down('#numberofyearsField').reset();
            win.down('#numberofmonthsField').reset();
            win.down('#monthlySubscriptionRadio').reset();
            win.down('#yearlySubscriptionRadio').reset();
        }
    },

    onChangeMembershipSubscriptionButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/changeThisMemberMembershipSubscription',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Membership Subscription");
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/changeThisMemberMembershipSubscription',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Membership Subscription");
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onPrimaryCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var country_id = combo.getValue();

        //clear both the state and the city combos

        state_combo = win.down('#primaryStateCombo');

        city_combo = win.down('#primaryCityCombo');


        state_combo.reset();

        city_combo.reset();

        //load both the combo stores

        state_combo.getStore().load({
            params:{
                country_id:country_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:0,
                country_id:country_id

            }
        });



    },

    onPermanentCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var country_id = combo.getValue();

        //clear both the state and the city combos

        state_combo = win.down('#permanentStateCombo');

        city_combo = win.down('#permanentStateCombo');


        state_combo.reset();

        city_combo.reset();

        //load both the combo stores

        state_combo.getStore().load({
            params:{
                country_id:country_id
            }
        });


        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:0,
                country_id:country_id

            }
        });
    },

    onCorporateCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var country_id = combo.getValue();

        //clear both the state and the city combos

        state_combo = win.down('#corporateStateCombo');

        city_combo = win.down('#corporateCityCombo');


        state_combo.reset();

        city_combo.reset();

        //load both the combo stores

        state_combo.getStore().load({
            params:{
                country_id:country_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:0,
                country_id:country_id

            }
        });
    },

    onPrimaryStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var state_id = combo.getValue();

        //get the city and the country

        var city_combo = win.down('#primaryCityCombo');

        var country_id = win.down('#primaryCountryCombo').getValue();

        city_combo.reset();

        //reload this combo

        combo.getStore().load({
            params:{
                country_id:country_id,
                state_id:state_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:state_id,
                country_id:country_id

            }
        });





    },

    onPermanentStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var state_id = combo.getValue();

        //get the city and the country

        var city_combo = win.down('#permanentCityCombo');

        var country_id = win.down('#permanentCountryCombo').getValue();

        city_combo.reset();

        //reload this combo

        combo.getStore().load({
            params:{
                country_id:country_id,
                state_id:state_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:state_id,
                country_id:country_id

            }
        });
    },

    onCorporateStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var state_id = combo.getValue();

        //get the city and the country

        var city_combo = win.down('#corporateCityCombo');

        var country_id = win.down('#corporateCountryCombo').getValue();

        city_combo.reset();

        //reload this combo

        combo.getStore().load({
            params:{
                country_id:country_id,
                state_id:state_id
            }
        });

        //load the city combo

        city_combo.getStore().load({
            params:{
                state_id:state_id,
                country_id:country_id

            }
        });
    },

    onOnlyBuyItemsRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');


        if(newValue == 1 || newValue == true){
            win.down('#basicSubmitBtn').setVisible(true);
            win.down('#cancelBtn').setVisible(true);
           // win.down('#basicSubmitBtn').setDisabled(false);
            Ext.getCmp('next-next-move').setVisible(false);
            Ext.getCmp('prev-prev-move').setVisible(false);
        }else{
            win.down('#basicSubmitBtn').setVisible(false);
            win.down('#cancelBtn').setVisible(false);
           // win.down('#basicSubmitBtn').setDisabled(true);
            Ext.getCmp('next-next-move').setVisible(true);
            Ext.getCmp('prev-prev-move').setVisible(true);
        }
    },

    onNextRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');


        if(newValue == 1 || newValue == true){
            win.down('#basicSubmitBtn').setVisible(false);
           // win.down('#basicSubmitBtn').setDisabled(true);
            Ext.getCmp('next-next-move').setVisible(true);
        }else{
            win.down('#basicSubmitBtn').setVisible(true);
           // win.down('#basicSubmitBtn').setDisabled(false);
            Ext.getCmp('next-next-move').setVisible(false);
        }
    },

    onBasicRegistrationButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/RegisterThisNewBasicMemberQuickly',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Members/RegisterThisNewBasicMemberQuickly',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    init: function(application) {
        this.control({
            "newmembershipsubscriptionwin button#next-next-move": {
                click: this.onNewMembershipSubscriptionButtonClick
            },
            "newmembershipsubscriptionwin button#paymentBtn": {
                click: this.onEffectSubscriptionPaymentButtonClick
            },
            "newmembershipsubscriptionwin button#prev-prev-move": {
                click: this.onPrevMembershipSubscriptionButtonClick
            },
            "combobox#typeCombo": {
                select: this.onMembershipTypeComboboxSelect
            },
            "numberfield#numberofyearsField": {
                change: this.onYearSubscriptionNumberfieldChange
            },
            "numberfield#numberofmonthsField": {
                change: this.onMonthlySuibscriptionNumberfieldChange
            },
            "newmembershipsubscriptionwin button#submitBtn": {
                click: this.onSubmitThisRegistrationButtonClick
            },
            "radiofield#changeMembershipTypeRadio": {
                change: this.onChangeMembershipSubscriptionRadiofieldChange
            },
            "button#changesubscriptionBtn": {
                click: this.onChangeMembershipSubscriptionButtonClick
            },
            "combobox#primaryCountryCombo": {
                select: this.onPrimaryCountryComboboxSelect
            },
            "combobox#permanentCountryCombo": {
                select: this.onPermanentCountryComboboxSelect
            },
            "combobox#corporateCountryCombo": {
                select: this.onCorporateCountryComboboxSelect
            },
            "combobox#primaryStateCombo": {
                select: this.onPrimaryStateComboboxSelect
            },
            "combobox#permanentStateCombo": {
                select: this.onPermanentStateComboboxSelect
            },
            "combobox#corporateStateCombo": {
                select: this.onCorporateStateComboboxSelect
            },
            "radiofield#onlybuyRadio": {
                change: this.onOnlyBuyItemsRadiofieldChange
            },
            "radiofield#next-next-move": {
                change: this.onNextRadiofieldChange
            },
            "button#basicSubmitBtn": {
                click: this.onBasicRegistrationButtonClick
            }
        });
    }

});
