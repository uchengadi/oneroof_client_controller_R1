/*
 * File: app/controller/CentralViewController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.CentralViewController', {
    extend: 'Ext.app.Controller',

    views: [
        'ProductdetailsPanelForProductsWithConstituentsWin',
        'MakeAConsumptionDecisionForm',
        'MakeAConsumptionDecisionWin'
    ],

    onCentralPanelProductDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record.get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var is_a_hamper = jsonResponse.product.is_a_hamper;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var is_paas = jsonResponse.is_paas;
                                var monthly_paas_subscription_cost = jsonResponse.paas_cost;
                                var minimum_quantity_for_paas_subscription = jsonResponse.paas_min_quantity;
                                var maximum_quantity_for_paas_subscription = jsonResponse.paas_max_quantity_allowed;
                                var minimum_paas_duration = jsonResponse.min_paas_duration;
                                var maximum_paas_duration = jsonResponse.max_paas_duration;
                                var is_rentable = jsonResponse.product.is_rentable;
                                var rent_cost_per_day = jsonResponse.product.rent_cost_per_day;
                                var maximum_rent_quantity_per_cycle = jsonResponse.product.maximum_rent_quantity_per_cycle;
                                var minimum_rent_duration = jsonResponse.product.minimum_rent_duration;
                                var minimum_rent_quantity_per_cycle = jsonResponse.product.minimum_rent_quantity_per_cycle;


                                console.log('the maximum rent quantity is:',maximum_rent_quantity_per_cycle);

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

                                }else{
                                    win.down('#productVideoContainer').setVisible(false);
                                }

                                if(is_paas == 0 || is_paas == false){
                                    win.down('#asAServiceDecisionRadio').setDisabled(true);
                                }else{
                                    win.down('#asAServiceDecisionRadio').setDisabled(false);
                                }

                                if(is_rentable == 0 || is_rentable == false){
                                    win.down('#rentDecisionRadio').setDisabled(true);
                                }else{
                                    win.down('#rentDecisionRadio').setDisabled(false);
                                }



                               /** if(jsonResponse.validity == true){
                                  var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                 var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                              }else{
                                var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                   var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:record.get('product_type_id'),
                                product_id:record.get('id'),
                                category_id:record.get('category_id'),
                                service_id:record.get('service_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'noncart',
                                operation_detail:'loggedin',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                escrow_request_from:'noncart',
                                is_a_hamper:is_a_hamper,
                                is_store_hamper_content:1,
                                is_quote_only:0,
                                is_escrow_only:0,
                                is_quote_and_escrow:0,
                                is_presubscription:0,
                                is_presubscription_and_escrow:0,
                                is_presubscription_and_drawdown:0,
                                is_postsubscription:0,
                                is_postsubscription_and_escrow:0,
                                is_hamper:0,
                                is_mainstore:1,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                monthly_paas_subscription_cost:monthly_paas_subscription_cost,
                                monthly_paas_subscription_cost_for_display: Ext.util.Format.number(monthly_paas_subscription_cost,'0,000.00'),
                                minimum_quantity_for_paas_subscription:minimum_quantity_for_paas_subscription,
                                minimum_quantity_for_paas_subscription_for_display:Ext.util.Format.number(minimum_quantity_for_paas_subscription,'0,000'),
                                maximum_quantity_for_paas_subscription:maximum_quantity_for_paas_subscription,
                                rent_cost_per_day:rent_cost_per_day,
                                rent_cost_per_day_for_display:Ext.util.Format.number(rent_cost_per_day,'0,000.00'),
                                maximum_rent_quantity_per_cycle:maximum_rent_quantity_per_cycle,
                                minimum_rent_duration:minimum_rent_duration,
                                minimum_rent_duration_for_display:Ext.util.Format.number(minimum_rent_duration,'0,000'),
                                minimum_rent_quantity_per_cycle:minimum_rent_quantity_per_cycle,
                                minimum_rent_quantity_per_cycle_for_display:Ext.util.Format.number(minimum_rent_quantity_per_cycle,'0,000'),
                                rent_whats_product_per_item:whats_product_per_item,
                                minimum_paas_duration:minimum_paas_duration,
                                minimum_paas_duration_for_display:Ext.util.Format.number(minimum_paas_duration,'0,000'),
                                maximum_paas_duration:maximum_paas_duration


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record);

                           win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});






    },

    onSearchingForAProductInAServiceAndCategoryButtonClick: function(button, e, eOpts) {
        var mainviewport = button.up('mainviewport');

        var service = mainviewport.down('#serviceCombo').getValue();

        var category = mainviewport.down('#productCategoryCombo').getValue();

        var type = mainviewport.down('#productTypeCombo').getValue();

        var searchstring  = mainviewport.down('#searchCombo').getValue();


        //load the database

        var dataview = mainviewport.down('#productsDataview');

        dataview.getStore().load({
            params:{
                service:service,
                category:category,
                type:type,
                searchstring:searchstring
            }
        });
    },

    onSearchingForAProductInAServiceComboboxSpecialkey: function(field, e, eOpts) {
        var mainviewport = field.up('mainviewport');

        var service = mainviewport.down('#serviceCombo').getValue();

        var category = mainviewport.down('#productCategoryCombo').getValue();

        var type = mainviewport.down('#productTypeCombo').getValue();

        var searchstring  = mainviewport.down('#searchCombo').getValue();


        //load the database

        var dataview = mainviewport.down('#productsDataview');

        if(e.getKey() == e.ENTER){

            dataview.getStore().load({
            params:{
                service:service,
                category:category,
                type:type,
                searchstring:searchstring
            }
        });



        }


    },

    onProductCategoryComboboxSelect: function(combo, records, eOpts) {
        var viewport = combo.up('mainviewport');

        var category_id = combo.getValue();

        //get the product type combo

        var type_combo = viewport.down('#productTypeCombo');

        var service_id = viewport.down('#serviceCombo').getValue();

        type_combo.reset();

        //reload this combo

        combo.getStore().load({
            params:{
                service_id:service_id,
                category_id:category_id
            }
        });

        //load the combo

        type_combo.getStore().load({
            params:{
                category_id:category_id,
                service_id:service_id
            }
        });



    },

    onServiceComboboxSelect: function(combo, records, eOpts) {
        var viewport = combo.up('mainviewport');

        var service_id = combo.getValue();

        //get the category combo

        var category_combo = viewport.down('#productCategoryCombo');

        var type_combo = viewport.down('#productTypeCombo');


        category_combo.reset();

        type_combo.reset();

        //category_combo.getStore().reload();

        type_combo.getStore().reload();

        //load the combo

        category_combo.getStore().load({
            params:{
                service_id:service_id
             }


        });


        type_combo.getStore().load({
            params:{
                category_id:0,
                service_id:service_id
            }
        });


    },

    onServiceComboboxChange: function(field, newValue, oldValue, eOpts) {
        var viewport = field.up('mainviewport');

        //get the category combo

        var category_combo = viewport.down('#productCategoryCombo');

        var type_combo = viewport.down('#productTypeCombo');

        //get the


        category_combo.reset();

        type_combo.reset();



        //load the combo

        category_combo.getStore().load({
            params:{
                service_id:newValue
            }
        });


        type_combo.getStore().load({
            params:{
                category_id:0,
                service_id:newValue
            }
        });

    },

    onProdutCategoryComboboxChange: function(field, newValue, oldValue, eOpts) {
        var viewport = field.up('mainviewport');


        //get the product type combo

        var type_combo = viewport.down('#productTypeCombo');

        var service_id = viewport.down('#serviceCombo').getValue();

        type_combo.reset();


        //load the combo

        type_combo.getStore().load({
            params:{
                category_id:newValue,
                service_id:service_id
            }
        });


    },

    onBuyItDecisionRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#buyitContainer').setVisible(true);
           // win.down('#buyitContainer').setDisabled(false);

            win.down('#rentitContainer').setVisible(false);
           // win.down('#rentitContainer').setDisabled(true);

            win.down('#asAServiceContainer').setVisible(false);
            // win.down('#asAServiceContainer').setDisabled(true);

              win.down('#asFaasContainer').setVisible(false);


            win.down('#bucketToolbar').setVisible(false);

        }else{
             win.down('#buyitContainer').setVisible(false);
           // win.down('#buyitContainer').setDisabled(true);

        }




    },

    onRentDecisionRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#buyitContainer').setVisible(false);
            // win.down('#buyitContainer').setDisabled(true);

            win.down('#rentitContainer').setVisible(true);
            // win.down('#rentitContainer').setDisabled(false);

            win.down('#asAServiceContainer').setVisible(false);
           // win.down('#asAServiceContainer').setDisabled(true);

             win.down('#asFaasContainer').setVisible(false);


            win.down('#bucketToolbar').setVisible(false);

        }else{
            win.down('#rentitContainer').setVisible(false);
            // win.down('#rentitContainer').setDisabled(true);
        }


    },

    onAsAServiceRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#buyitContainer').setVisible(false);
            // win.down('#buyitContainer').setDisabled(true);

            win.down('#rentitContainer').setVisible(false);
           // win.down('#rentitContainer').setDisabled(true);

            win.down('#asAServiceContainer').setVisible(true);
             //win.down('#asAServiceContainer').setDisabled(false);

             win.down('#asFaasContainer').setVisible(false);

            win.down('#bucketToolbar').setVisible(true);
        }else{
            win.down('#asAServiceContainer').setVisible(false);
            win.down('#bucketToolbar').setVisible(false);
            // win.down('#asAServiceContainer').setDisabled(true);
        }


    },

    onAsFaasRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#buyitContainer').setVisible(false);
            // win.down('#buyitContainer').setDisabled(true);

            win.down('#rentitContainer').setVisible(false);
            // win.down('#rentitContainer').setDisabled(false);

            win.down('#asAServiceContainer').setVisible(false);
           // win.down('#asAServiceContainer').setDisabled(true);

             win.down('#asFaasContainer').setVisible(true);


            win.down('#bucketToolbar').setVisible(false);

        }else{
            win.down('#asFaasContainer').setVisible(false);
            // win.down('#rentitContainer').setDisabled(true);
        }


    },

    init: function(application) {
        this.control({
            "centralpanel productsview": {
                itemdblclick: this.onCentralPanelProductDataviewItemDblClick
            },
            "centralpanel button#searchBtn": {
                click: this.onSearchingForAProductInAServiceAndCategoryButtonClick
            },
            "centralpanel combobox#searchCombo": {
                specialkey: this.onSearchingForAProductInAServiceComboboxSpecialkey
            },
            "combobox#productCategoryCombo": {
                select: this.onProductCategoryComboboxSelect,
                change: this.onProdutCategoryComboboxChange
            },
            "combobox#serviceCombo": {
                select: this.onServiceComboboxSelect,
                change: this.onServiceComboboxChange
            },
            "radiofield#buyDecisionRadio": {
                change: this.onBuyItDecisionRadiofieldChange
            },
            "radiofield#rentDecisionRadio": {
                change: this.onRentDecisionRadiofieldChange
            },
            "radiofield#asAServiceDecisionRadio": {
                change: this.onAsAServiceRadiofieldChange
            },
            "radiofield#asFaasDecisionRadio": {
                change: this.onAsFaasRadiofieldChange
            }
        });
    }

});
