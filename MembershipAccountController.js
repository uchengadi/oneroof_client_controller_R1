/*
 * File: app/controller/MembershipAccountController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.controller.MembershipAccountController', {
    extend: 'Ext.app.Controller',

    models: [
        'HamperContainers'
    ],
    stores: [
        'OccurrenceOfHistoryProductNotExceedingSixMonths',
        'OccurrenceOfHistoryProductBeyondSixMonths',
        'ResponsesToAMemberQuote',
        'AllMembers',
        'HamperHasProducts',
        'ProductsThatCouldBeInHamper',
        'ServiceForHamper',
        'ServiceCategoriesForHamper',
        'CategoryProductTypesForHamper',
        'AllHamperContainers',
        'SingleHamperContainer'
    ],
    views: [
        'MemberPurchaseHistoryForm',
        'MemberAccountProfileForm',
        'MemberAccountDetailsForm',
        'PaymentRenewalForm',
        'MemberAccountDetailWin',
        'OccurrenceProductNotExceedingSixMonthsGrid',
        'OccurrenceProductBeyondSixMonthsGrid',
        'OccurrenceProductNotExceedingSixMonthsWin',
        'OccurrenceProductBeyondSixMonthsWin',
        'MemberQuoteResponsesWin',
        'ResponsesToAMembersQuoteRequestGrid',
        'QuoteResponseWin',
        'QuoteResponseForm',
        'ViewAllTheProductsThisVoucherCanBuyWin',
        'AllTheProductsAVoucherCouldBeUsedOnGrid',
        'AllTheCategoriesAVoucherCouldBeSpentOnGrid',
        'ViewAllTheCategoriesThisVoucherCanBuyWin'
    ],

    refs: [
        {
            ref: 'allLastSixMonthsProductTransactionHistoryGrid',
            selector: 'occurrenceproductnotexceedingsixmonthswin grid'
        },
        {
            ref: 'allBeyondSixMonthsProductTransactionGrid',
            selector: 'occurrenceproductbeyondsixmonthswin grid'
        },
        {
            ref: 'allMyMembershipConnectionGrid',
            selector: 'memberaccountdetailwin #myconnectionsGrid'
        },
        {
            ref: 'allMyConnectionsToOtherMembers',
            selector: 'memberconnectionswin grid'
        },
        {
            ref: 'allMyTradableProductsGrid',
            selector: 'memberaccountdetailwin #tradableproductsforvendorGrid'
        },
        {
            ref: 'allMyProductSubscriptionGrid',
            selector: 'memberaccountdetailwin #productsubscriptionGrid'
        },
        {
            ref: 'allInitiatedQuoteGrid',
            selector: 'memberaccountdetailwin #initiatedquotesgrid'
        },
        {
            ref: 'allReceivedQuoteGrid',
            selector: 'memberaccountdetailwin #receivedquotegrid'
        },
        {
            ref: 'allQuoteResponseGrid',
            selector: 'memberquoteresponseswin grid'
        },
        {
            ref: 'allInitiatedEscrowGrid',
            selector: 'memberaccountdetailwin #initiatedescrowgrid'
        },
        {
            ref: 'allReceivedEscrowGrid',
            selector: 'memberaccountdetailwin #receivedescrowgrid'
        },
        {
            ref: 'allInitiatedFuturesGrid',
            selector: 'memberaccountdetailwin #initiatedfuturesgrid'
        },
        {
            ref: 'allReceivedFuturesGrid',
            selector: 'memberaccountdetailwin #receivedfuturesgrid'
        },
        {
            ref: 'allMemberVoucherGrid',
            selector: 'memberaccountdetailwin #membervoucherGrid'
        },
        {
            ref: 'allMemberWalletGrid',
            selector: 'memberaccountdetailwin #memberwalletGrid'
        },
        {
            ref: 'allCategoriesInVoucherGrid',
            selector: 'voucherlimiterswin voucherlimitedtocategoriesgrid'
        },
        {
            ref: 'allProductsInVoucherGrid',
            selector: 'voucherlimiterswin voucherlimitedtoproductsgrid'
        },
        {
            ref: 'allMemberVoucherBeneficiaryGrid',
            selector: 'voucherbeneficiarieswin grid'
        },
        {
            ref: 'allProductsVoucherFundCanBuyGrid',
            selector: 'viewalltheproductsthisvouchercanbuywin alltheproductsavouchercouldbeusedongrid'
        },
        {
            ref: 'allCategoriesAVoucherFundCouldBeUsedForGrid',
            selector: 'viewallthecategoriesthisvouchercanbuywin allthecategoriesavouchercouldbespentongrid'
        },
        {
            ref: 'allProductsInACategoryGrid',
            selector: 'productsinacategorywin grid'
        },
        {
            ref: 'allOwnHampersGrid',
            selector: 'memberaccountdetailwin #ownhampersgrid'
        },
        {
            ref: 'allConnectedMembersHamperBeneficiariesGrid',
            selector: 'hamperdeliverymanagerwin hamperconnectedmemberbeneficiarygrid'
        },
        {
            ref: 'allNonConnectedMemberHamperBeneficiariesGrid',
            selector: 'hamperdeliverymanagerwin hampersfornonconnetedmembersgrid'
        },
        {
            ref: 'allNonMemberHamperBeneficiariesGrid',
            selector: 'hamperdeliverymanagerwin hampersfornonmembersgrid'
        },
        {
            ref: 'allOthersHamperSentToMemberGrid',
            selector: 'memberaccountdetailwin #othershampersgrid'
        }
    ],

    onForwardButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('memberaccountdetailsform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        if(item.getXType() == 'paymentrenewalform' ){
            //change the button text to payment
          win.down('#update_onlyBtn').setVisible(true);
           Ext.getCmp('forward').setVisible(false);


         console.log('member status is:',win.down('#membershipStatus').getValue());
         if(win.down('#membershipStatus').getValue() == 'active'){
                win.down('#updateandextendRadio').setDisabled(false);
            }else if(win.down('#membershipStatus').getValue() == 'inactive'){
                win.down('#updateandrenewRadio').setDisabled(false);
            }


        }



    },

    onBackwardButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('memberaccountdetailsform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();

        console.log('the prev active item is:', item);

        if(item.getXType() == 'memberpurchasehistoryform' ){
            //change the button text to payment
           win.down('#updateonlyRadio').reset();
           win.down('#updateandrenewRadio').reset();
          win.down('#update_onlyBtn').setVisible(false);
           win.down('#updateandrenewBtn').setVisible(false);
           Ext.getCmp('forward').setVisible(true);

        }
    },

    onUpdateOnlyRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#update_onlyBtn').setVisible(true);
            win.down('#updateandrenewBtn').setVisible(false);
            win.down('#updateandextendBtn').setVisible(false);
             win.down('#subscriptionDetailContainer').setDisabled(true);
             win.down('#typeCombo').reset();
             win.down('#changesubscriptionBtn').setVisible(false);
            win.down('#termsCheckbox').reset();
            win.down('#numberofyearsField').reset();
            win.down('#numberofmonthsField').reset();
            win.down('#monthlySubscriptionRadio').reset();
            win.down('#yearlySubscriptionRadio').reset();
        }
    },

    onUpdateAndRenewRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#update_onlyBtn').setVisible(false);
            win.down('#updateandrenewBtn').setVisible(true);
            win.down('#updateandextendBtn').setVisible(false);
             win.down('#subscriptionDetailContainer').setDisabled(false);
            win.down('#typeCombo').reset();
             win.down('#changesubscriptionBtn').setVisible(false);
            win.down('#termsCheckbox').reset();
            win.down('#numberofyearsField').reset();
            win.down('#numberofmonthsField').reset();
            win.down('#monthlySubscriptionRadio').reset();
            win.down('#yearlySubscriptionRadio').reset();
        }
    },

    onUpdateMemberAccountInformationButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/updateNonMemberAccountInformation',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/updateNonMemberAccountInformation',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onUpdateAndRenewMemberAccountButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/updateAndRenewMemberhipInformation',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Renewal of Membership Subscription");
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Members/updateAndRenewMemberhipInformation',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Renewal of Membership Subscription");
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onAccountDetailCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('memberaccountdetailwin');

        if(newValue  == 1){
            win.down('#termsBtn').setDisabled(false);
            win.down('#termsBtn').setDisabled(false);
            win.down('#update_onlyBtn').setDisabled(false);
            win.down('#updateandrenewBtn').setDisabled(false);
            win.down('#updateandextendBtn').setDisabled(false);
            win.down('#changesubscriptionBtn').setDisabled(false);
        }else{
           win.down('#termsBtn').setDisabled(true);
            win.down('#update_onlyBtn').setDisabled(true);
            win.down('#updateandrenewBtn').setDisabled(true);
            win.down('#updateandextendBtn').setDisabled(true);
            win.down('#changesubscriptionBtn').setDisabled(true);
        }
    },

    onTermsAndConditionsButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.TermsAndConditionsWin');

        var form = win.down('form');


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=TermsAndConditions/retrieveTermsAndConditionContent',
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var membership_terms_and_conditions = jsonResponse.terms.membership_terms_and_conditions;
                                var purchase_terms_and_conditions = jsonResponse.terms.purchase_terms_and_conditions;
                                var generic_terms_and_conditions = jsonResponse.terms.generic_terms_and_conditions;
                                var status = jsonResponse.terms.status;
                                var id = jsonResponse.terms.id;




        					}



        					var values = {

                                id:id,
                                membership_terms_and_conditions:membership_terms_and_conditions,
                                purchase_terms_and_conditions:purchase_terms_and_conditions,
                                generic_terms_and_conditions:generic_terms_and_conditions,
                                status:status



        					};


        					form.getForm().setValues(values);


        				}




        			});

        win.show();
    },

    onMemberAccountDetailWindowRender: function(component, eOpts) {
        //load the existing orders dataview

        component.down('#existingOrders').getStore().load();

        //load the below six months orders dataview

        component.down('#lastSixMonthOrders').getStore().load();


        //load the beyond six months orders dataview

        component.down('#ordersBeyondSixMonths').getStore().load();

        //load all grid in this window

        component.down('#myconnectionsGrid').getStore().load();

        component.down('#ownhampersgrid').getStore().load();

        component.down('#initiatedfuturesgrid').getStore().load();

        component.down('#receivedfuturesgrid').getStore().load();

        component.down('#initiatedquotesgrid').getStore().load();

        component.down('#receivedfuturesgrid').getStore().load();

        component.down('#receivedescrowgrid').getStore().load();

        component.down('#initiatedescrowgrid').getStore().load();

        component.down('#productsubscriptionGrid').getStore().load();

        component.down('#tradableproductsforvendorGrid').getStore().load();

        //get the wallet total expendable and suspended values

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheTotalAvailableAndSuspendedValuesInTheWallet',

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var wallet_available_value = jsonResponse.wallet_available_value;
                                var wallet_suspended_value = jsonResponse.wallet_suspended_value;
                                var wallet_total_value = jsonResponse.wallet_total_value;

                            } //success ends here

                            var values = {

                                wallet_available_value:Ext.util.Format.number(wallet_available_value,'0,000.00'),
                                wallet_suspended_value:Ext.util.Format.number(wallet_suspended_value,'0,000.00'),
                                wallet_total_value:Ext.util.Format.number(wallet_total_value,'0,000.00')


                            };

                                //load the form
                           //win.down('form').loadRecord(record[0]);

                            component.down('form').getForm().setValues(values);

                            component.show();
        				}




        			});


        //get the id of this member

        var member_id = component.down('form').down('hiddenfield[name=user_id_of_member]').getValue();

        //load the dataview

        component.down('#memberPictureDataview').getStore().load({
            params:{
                id:member_id
            }
        });


    },

    onHistoryPurchasedOrdersDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record.get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var quantity_of_purchase = jsonResponse.quantity_requested;
                                var prevailing_retail_selling_price = jsonResponse.retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.member_sellig_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.member_sellig_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code=jsonResponse.service_code;
                                var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                var is_hamper = jsonResponse.is_a_hamper;
                                 var is_quoted = jsonResponse.is_quoted;

                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                if(jsonResponse.is_both_quoted_and_escrowed == 1){
                                    var requesting_for_a_quote =1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = jsonResponse.escrow_id;
                                    var quote_id = jsonResponse.quote_id;
                                    var future_trading = jsonResponse.future_trading;
                                }else if(jsonResponse.is_escrowed_only == 1){
                                    var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = jsonResponse.escrow_id;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }else if(jsonResponse.is_quoted_only == 1){
                                     var requesting_for_a_quote =1;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = jsonResponse.quote_id;
                                    var future_trading = jsonResponse.future_trading;
                                }else{
                                     var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('amount to be paid is:',amount_to_be_paid);
                                console.log('amount to be saved is:',amount_save_on_purchase);
                                console.log('the record is:',record);
                            }
                            var values = {

                                type_id:record.get('product_type_id'),
                                product_id:record.get('id'),
                                category_id:record.get('category_id'),
                                service_id:record.get('service_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:per_portion_price,
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                quantity_of_purchase:quantity_of_purchase,
                                operation:'account',
                                operation_detail:'account_existing',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                amount_to_be_paid:amount_to_be_paid,
                                amount_save_on_purchase:amount_save_on_purchase,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_with_video:is_with_video,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                requesting_for_a_quote:requesting_for_a_quote,
                                need_escrow_agreement:need_escrow_agreement,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                is_future_tradable:future_trading,
                                future_trading:future_trading,
                                is_hamper:is_hamper,
                                product_quantity_in_the_hamper:quantity_of_purchase,
                                product_quantity_in_this_quote:quantity_of_purchase,
                                price_per_hamper_for_display:prevailing_retail_selling_price_for_display
                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                            win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});







    },

    onChangeAMemberPasswordButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ChangeMemberPasswordWin');

        win.show();
    },

    onChangeThisMemberPasswordButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/ChangePasswordByOwner',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    win.close();

        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/ChangePasswordByOwner',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onUpdateAndExtendRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1){
            win.down('#update_onlyBtn').setVisible(false);
            win.down('#updateandrenewBtn').setVisible(false);
            win.down('#updateandextendBtn').setVisible(true);
             win.down('#subscriptionDetailContainer').setDisabled(false);
            win.down('#typeCombo').reset();
             win.down('#changesubscriptionBtn').setVisible(false);
            win.down('#termsCheckbox').reset();
            win.down('#numberofyearsField').reset();
            win.down('#numberofmonthsField').reset();
            win.down('#monthlySubscriptionRadio').reset();
            win.down('#yearlySubscriptionRadio').reset();
        }
    },

    onUpdateAndExtendMembershipSubscriptionButtonClick: function(button, e, eOpts) {


        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/updateAndExtendMemberhipInformation',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

        							win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Extending Membership Subscription");
                                    summary_win.show();
                                    //redirect to quickteller site for payment
                                   // window.open('https://www.quickteller.com/cobuy');
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/updateAndExtendMemberhipInformation',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();

                                    var net_amount = result.amount;
                                    var amount = net_amount * 100;
                                    var summary_amount = net_amount;

                                    var values = {
                                        order_number:result.invoice,
                                        invoice_number:result.invoice,
                                        amount:Ext.util.Format.number((amount),'0'),
                                        summary_amount: Ext.util.Format.number((summary_amount),'0,000.00')

                                    };

                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                         amount:amount,
                                         invoice_number:invoice_number,
                                         order_number:order_number

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    summary_win.setTitle("Extending Membership Subscription");
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });





    },

    onLastSixMonthsProductsOccurrenceDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.OccurrenceProductNotExceedingSixMonthsWin');

        var values = {
            product_id:record.get('id')


        };

        win.down('form').getForm().setValues(values);

        win.setTitle(record.get('name')+ ' ' + ' ' + "Last Six Months Transactions history");
        win.show();
    },

    onBeyondSixMonthsProductsOccurrenceDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.OccurrenceProductBeyondSixMonthsWin');

        var values = {
            product_id:record.get('id')


        };


        //load the form

        win.down('form').getForm().setValues(values);

        win.setTitle(record.get('name')+ ' ' + ' ' + "Beyond Six Months Transactions history");

        win.show();
    },

    onLastSixMonthsProductOccurrenceHistoryWindowRender: function(component, eOpts) {
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        //load the grid

        component.down('grid').getStore().load({
            params:{
                product_id:product_id
            }
        });
    },

    onBeyondSixMonthsProductTransactionHistoryWindowRender: function(component, eOpts) {
        var product_id = component.down('form').down('hiddenfield[name=product_id]').getValue();

        //load the grid

        component.down('grid').getStore().load({
            params:{
                product_id:product_id
            }
        });
    },

    onLastSixMonthsProductHistoryGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var grid = this.getAllLastSixMonthsProductTransactionHistoryGrid(),
        		record = grid.getSelectionModel().getSelection();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproducthistoryinformation',
                          params:{
                              product_id: record[0].get('product_id'),
                              order_id: record[0].get('order_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var quantity_of_purchase = jsonResponse.quantity_requested;
                                var prevailing_retail_selling_price = jsonResponse.retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(record[0].get('prevailing_retail_selling_price_per_item_at_purchase'),'0,000.00');
                                var per_portion_price = jsonResponse.member_sellig_price;
                                var per_portion_price_for_display = Ext.util.Format.number(record[0].get('cobuy_member_price_per_item_at_purchase'),'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code=jsonResponse.service_code;
                                var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                var is_hamper = record[0].get('is_hamper');
                                 var is_quoted = record[0].get('is_quote_only');

                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = record[0].get('number_of_portion') * record[0].get('cobuy_member_price_per_item_at_purchase');
                                    var amount_save_on_purchase = record[0].get('number_of_portion') * record[0].get('amount_saved_per_item_on_this_order');
                                }else{
                                  var amount_to_be_paid = record[0].get('number_of_portion') * record[0].get('prevailing_retail_selling_price_per_item_at_purchase');
                                  var amount_save_on_purchase = record[0].get('number_of_portion') * record[0].get('amount_saved_per_item_on_this_order');
                                }
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                if(record[0].get('is_quote_and_escrow_only') == 1 || record[0].get('is_quote_and_escrow_only') == true ){
                                    var requesting_for_a_quote =1;
                                    var is_quotable = 1;
                                     var is_escrowable = 1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = record[0].get('escrow_id');
                                    var quote_id = record[0].get('quote_id');
                                    var future_trading = jsonResponse.future_trading;
                                }else if(record[0].get('is_escrow_only') == 1 || record[0].get('is_escrow_only') == true){
                                    var requesting_for_a_quote =0;
                                     var is_quotable = 0;
                                     var is_escrowable = 1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = record[0].get('escrow_id');
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }else if(record[0].get('is_quote_only') == 1 || record[0].get('is_quote_only') == true){
                                     var requesting_for_a_quote =1;
                                     var is_quotable = 1;
                                     var is_escrowable = 0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = record[0].get('quote_id');
                                    var future_trading = jsonResponse.future_trading;
                                }else{
                                     var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                    var is_quotable = 0;
                                     var is_escrowable = 0;
                                }

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                               console.log('is it escrowed only?:',record['is_escrow_only']);
                                console.log('is it quoted only:',record['is_quote_only']);
                               console.log('is it escrowed and quoted:',record['is_quote_and_escrow_only']);
                            }
                            var values = {

                                product_id:record[0].get('product_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:record[0].get('cobuy_member_price_per_item_at_purchase'),
                                prevailing_retail_selling_price:record[0].get('prevailing_retail_selling_price_per_item_at_purchase'),
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                quantity_of_purchase:record[0].get('number_of_portion'),
                                operation:'account',
                                operation_detail:'account_history',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                amount_to_be_paid:amount_to_be_paid,
                                history_amount_to_be_paid_for_display:Ext.util.Format.number(amount_to_be_paid,'0,000.00'),
                                amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase,'0,000.00'),
                                 history_amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase,'0,000.00'),
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                history:1,
                                order:record[0].get('order_id'),
                                date_ordered:record[0].get('date_ordered'),
                                is_with_video:is_with_video,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                requesting_for_a_quote:requesting_for_a_quote,
                                need_escrow_agreement:need_escrow_agreement,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                is_future_tradable:future_trading,
                                is_hamper:is_hamper,
                                is_quotable:is_quotable,
                                is_escrowable:is_escrowable,
                                product_quantity_in_the_hamper:record[0].get('number_of_portion'),
                                price_per_hamper_for_display:prevailing_retail_selling_price_for_display
                               //start_price_validity_period:record[0].get('start_price_validity_period'),
                               //end_price_validity_period:record[0].get('end_price_validity_period')


                            };

                                //load the form
                            win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onOccurenceBeyondSixMonthsProductJHistoryGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var grid = this.getAllBeyondSixMonthsProductTransactionGrid(),
        		record = grid.getSelectionModel().getSelection();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproducthistoryinformation',
                          params:{
                              product_id: record[0].get('product_id'),
                              order_id: record[0].get('order_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var quantity_of_purchase = jsonResponse.quantity_requested;
                                var prevailing_retail_selling_price = jsonResponse.retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(record[0].get('prevailing_retail_selling_price_per_item_at_purchase'),'0,000.00');
                                var per_portion_price = jsonResponse.member_sellig_price;
                                var per_portion_price_for_display = Ext.util.Format.number(record[0].get('cobuy_member_price_per_item_at_purchase'),'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code=jsonResponse.service_code;
                                var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                var is_hamper = record[0].get('is_hamper');
                                 var is_quoted = record[0].get('is_quote_only');

                                console.log('could tjis be a hamper:',is_hamper);
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = record[0].get('number_of_portion') * record[0].get('cobuy_member_price_per_item_at_purchase');
                                    var amount_save_on_purchase = record[0].get('number_of_portion') * record[0].get('amount_saved_per_item_on_this_order');
                                }else{
                                  var amount_to_be_paid = record[0].get('number_of_portion') * record[0].get('prevailing_retail_selling_price_per_item_at_purchase');
                                  var amount_save_on_purchase = record[0].get('number_of_portion') * record[0].get('amount_saved_per_item_on_this_order');
                                }
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                if(record[0].get('is_quote_and_escrow_only') == 1 || record[0].get('is_quote_and_escrow_only') == true ){
                                    var requesting_for_a_quote =1;
                                    var is_quotable = 1;
                                     var is_escrowable = 1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = record[0].get('escrow_id');
                                    var quote_id = record[0].get('quote_id');
                                    var future_trading = jsonResponse.future_trading;
                                }else if(record[0].get('is_escrow_only') == 1 || record[0].get('is_escrow_only') == true){
                                    var requesting_for_a_quote =0;
                                     var is_quotable = 0;
                                     var is_escrowable = 1;
                                    var need_escrow_agreement = 1;
                                    var escrow_id = record[0].get('escrow_id');
                                    var quote_id = 0;
                                    var future_trading = 0;
                                }else if(record[0].get('is_quote_only') == 1 || record[0].get('is_quote_only') == true){
                                     var requesting_for_a_quote =1;
                                     var is_quotable = 1;
                                     var is_escrowable = 0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = record[0].get('quote_id');
                                    var future_trading = jsonResponse.future_trading;
                                }else{
                                     var requesting_for_a_quote =0;
                                    var need_escrow_agreement = 0;
                                    var escrow_id = 0;
                                    var quote_id = 0;
                                    var future_trading = 0;
                                    var is_quotable = 0;
                                     var is_escrowable = 0;
                                }

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}

                                console.log('is it escrowed only?:',record['is_escrow_only']);
                                console.log('is it quoted only:',record['is_quote_only']);
                               console.log('is it escrowed and quoted:',record['is_quote_and_escrow_only']);

                            }
                            var values = {

                                product_id:record[0].get('product_id'),
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                per_portion_price:record[0].get('cobuy_member_price_per_item_at_purchase'),
                                prevailing_retail_selling_price:record[0].get('prevailing_retail_selling_price_per_item_at_purchase'),
                                quantity:Ext.util.Format.number(quantity,'0,000'),
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                quantity_of_purchase:record[0].get('number_of_portion'),
                                operation:'account',
                                operation_detail:'account_history',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                amount_to_be_paid:amount_to_be_paid,
                                history_amount_to_be_paid_for_display:Ext.util.Format.number(amount_to_be_paid,'0,000.00'),
                                amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase,'0,000.00'),
                                 history_amount_save_on_purchase_for_display:Ext.util.Format.number(amount_save_on_purchase,'0,000.00'),
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                history:1,
                                order:record[0].get('order_id'),
                                date_ordered:record[0].get('date_ordered'),
                                is_with_video:is_with_video,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                requesting_for_a_quote:requesting_for_a_quote,
                                need_escrow_agreement:need_escrow_agreement,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                is_future_tradable:future_trading,
                                is_hamper:is_hamper,
                                is_quotable:is_quotable,
                                is_escrowable:is_escrowable,
                                product_quantity_in_the_hamper:record[0].get('number_of_portion'),
                                price_per_hamper_for_display:prevailing_retail_selling_price_for_display
                               //start_price_validity_period:record[0].get('start_price_validity_period'),
                               //end_price_validity_period:record[0].get('end_price_validity_period')


                            };

                                //load the form
                            win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onConnectingToThisMemberButtonClick: function(button, e, eOpts) {
        var win = button.up('window');


        //get the membership number in the textfield
        var membership_number = win.down('#otherMemberBox').getValue();



        var connectwin = Ext.create('Cobuy.view.ConnectingToAMemberWin');

        var values = {
            membership_number:membership_number
        };

        //set the value of the form
        connectwin.down('form').getForm().setValues(values);

        connectwin.show();
    },

    onMakingConnectionToAMemberButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/ConnectMeToThisMember',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();
                                    Ext.getCmp('myconnectionsGrid').getStore().load();


        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/ConnectMeToThisMember',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             Ext.getCmp('myconnectionsGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onApplyForAProductTradingRequestButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#productBox').getValue();

        Ext.Msg.show({
                         title:'Product Vendor Request?',
                         msg: 'Are you requesting to trade on this product?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Product/requestToTradeOnProduct',
                                    params: {
                                        product_code: product_code

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            win.down('#tradableproductsforvendorGrid').getStore().load();



                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });


    },

    onSubscribeToProductButtonClick: function(button, e, eOpts) {




        /**formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    //Ext.getCmp('productsubscriptionGrid').getStore().load();

                      			//win.close();

        						var subscriptionwin = Ext.create('Cobuy.view.ProductSubscriptionWin');

        						var values = {
        							product_code:product_code,
        							product_id:result.product_id
        						};

        						//set the value of the form
        						subscriptionwin.down('form').getForm().setValues(values);

        						subscriptionwin.show();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
        **/

        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#productSubscriptionBox').getValue();


        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             var subscriptionwin = Ext.create('Cobuy.view.ProductSubscriptionWin');

        						var values = {
        							product_code:product_code,
        							product_id:result.product_id
        						};

        						//set the value of the form
        						subscriptionwin.down('form').getForm().setValues(values);

        						subscriptionwin.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onPostSubscriptionRequestRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue === true){
            win.down('#postsubscriptionBtn').setVisible(true);
            win.down('#presubscriptionBtn').setVisible(false);
        }else{
            win.down('#postsubscriptionBtn').setVisible(false);
            win.down('#presubscriptionBtn').setVisible(true);
        }
    },

    onPreSubscriptionRequestRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        //confirm if this poduct could be subscribed to


        var win = field.up('window');

        var product_code = win.down('form').down('textfield[name=product_code]').getValue();


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/confirmIfThisProductIsSubscribable',
                          params:{
                             product_code:product_code

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                if(jsonResponse.is_subscribable === true){
                                    if(newValue === true){
                                        win.down('#postsubscriptionBtn').setVisible(false);
                                        win.down('#presubscriptionBtn').setVisible(true);
                                    }else{
                                        win.down('#postsubscriptionBtn').setVisible(true);
                                        win.down('#presubscriptionBtn').setVisible(false);
                                    }

                                }else{
                                    win.down('#postsubscriptionBtn').setVisible(true);
                                    win.down('#presubscriptionBtn').setVisible(false);
                                }


                                console.log('is product escrowble:',jsonResponse.is_subscribable);

                            } //success ends here


        				}




        			});






    },

    onPostSubscriptionRequestButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/requestForProductSubscription',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
        							win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/requestForProductSubscription',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                               Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onPreSubscriptionRequestButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var subscription_quantity = win.down('form').down('numberfield[name=subscription_quantity]').getValue();

        console.log('the productt id is',product_id);

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id:product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var subscription_win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var subscription_win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.prevailing_retail_selling_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase= subscription_quantity;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'noncart',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                code:code,
                                is_for_presubscription:1,
                                subscription_type:'pre',
                                operation_type:'subscription',
                                escrow_request_from:'pre',
                                is_store_hamper_content:0,
                                is_quote_only:0,
                                is_escrow_only:0,
                                is_quote_and_escrow:0,
                                is_presubscription:1,
                                is_presubscription_and_escrow:0,
                                is_presubscription_and_drawdown:0,
                                is_postsubscription:0,
                                is_postsubscription_and_escrow:0,
                                is_hamper:0,
                                is_mainstore:0,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            subscription_win.down('form').getForm().setValues(values);

                            subscription_win.show();
        				}




        			});


    },

    onKnowMoreOfThisTradableProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#productBox').getValue();


        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    //Ext.getCmp('productsubscriptionGrid').getStore().load();

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id: result.product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }
                                console.log('the product id is:',result.product_id);

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                               // operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        							//win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}



    },

    onKnowMoreOfThisProductForSubscriptionButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#productSubscriptionBox').getValue();


        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    //Ext.getCmp('productsubscriptionGrid').getStore().load();

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id: result.product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }
                                console.log('the product id is:',result.product_id);

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                               // operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        							//win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}



    },

    onViewingMyConnectionsToOthersButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.MemberConnectionsWin');

        win.show();
    },

    onAcceptRejectingMemberConnectionButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyMembershipConnectionGrid(),
        		record = grid.getSelectionModel().getSelection();





        if(record[0]){
           var win = Ext.create('Cobuy.view.DetailInformationOfAMemberWin');
            //make the accept button visible
            win.down('#acceptmemberBtn').setVisible(true);
            win.down('#rejectmemberBtn').setVisible(true);
            win.down('#disconnectmemberBtn').setVisible(false);
            win.down('#suspendmemberBtn').setVisible(false);
            win.down('#unsuspendmemberBtn').setVisible(false);
            win.down('#changepasswordBtn').setDisabled(true);
            win.down('#username').setVisible(false);

          win.down('#additionalmemberinfoform').setDisabled(true);
          win.down('#memberdetailform').setDisabled(true);
          win.down('#memberPicture').setDisabled(true);

            console.log('the member is:',record[0].get('other_member_id'));

            var values = {
                other_member_id:record[0].get('other_member_id')
            };

            win.down('#othermemberform').getForm().setValues(values);


            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please Select a member to either accept or reject');

        }





    },

    onDisconnectingAMemberButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyMembershipConnectionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
           var win = Ext.create('Cobuy.view.DetailInformationOfAMemberWin');
            //make the accept button visible
            win.down('#acceptmemberBtn').setVisible(false);
            win.down('#rejectmemberBtn').setVisible(false);
            win.down('#disconnectmemberBtn').setVisible(true);
            win.down('#suspendmemberBtn').setVisible(false);
            win.down('#unsuspendmemberBtn').setVisible(false);
            win.down('#changepasswordBtn').setDisabled(true);
            win.down('#username').setVisible(false);


            win.down('#additionalmemberinfoform').setDisabled(true);
            win.down('#memberdetailform').setDisabled(true);
            win.down('#memberPicture').setDisabled(true);

            console.log('the member is:',record[0].get('other_member_id'));

            var values = {
                other_member_id:record[0].get('other_member_id')
            };

            win.down('#othermemberform').getForm().setValues(values);


            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please Select a member to either accept or reject');

        }



    },

    onSuspendingAMemberButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyMembershipConnectionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
           var win = Ext.create('Cobuy.view.DetailInformationOfAMemberWin');
            //make the accept button visible
            win.down('#acceptmemberBtn').setVisible(false);
            win.down('#rejectmemberBtn').setVisible(false);
            win.down('#disconnectmemberBtn').setVisible(false);
            win.down('#suspendmemberBtn').setVisible(true);
            win.down('#unsuspendmemberBtn').setVisible(true);
            win.down('#changepasswordBtn').setDisabled(true);
            win.down('#username').setVisible(false);
            win.down('#additionalmemberinfoform').setDisabled(true);
            win.down('#memberdetailform').setDisabled(true);
            win.down('#memberPicture').setDisabled(true);

            console.log('the member is:',record[0].get('other_member_id'));

            var values = {
                other_member_id:record[0].get('other_member_id')
            };

            win.down('#othermemberform').getForm().setValues(values);


            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please Select a member to either accept or reject');

        }


    },

    onRemoveTradableProductButtonClick: function(button, e, eOpts) {

        var grid = this.getAllMyTradableProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please Select a member to either accept or reject');

        }


    },

    onSchedulingSubscriptionDeliveryButtonClick: function(button, e, eOpts) {

        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var subscription_type = record[0].get('type');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'subscription_scheduling',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                                //per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                subscription_type:subscription_type,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                is_delivery_scheduled:record[0].get('is_delivery_scheduled'),
                                day_of_delivery:record[0].get('day_of_delivery'),
                                week_of_delivery:record[0].get('week_of_delivery'),
                                delivery_frequency:record[0].get('delivery_frequency'),
                                date_of_first_delivery:record[0].get('date_of_first_delivery'),
                                 escrow_id:record[0].get('escrow_id')

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to schedule delivery frequency');

        }


    },

    onUnsubscribingAMemberButtonClick: function(button, e, eOpts) {

        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'unsubscription',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                 escrow_id:record[0].get('escrow_id')

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to unsubscribe');

        }


    },

    onModifyingQuoteButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var quote_id = record[0].get('id');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('this quote is escrowable:',need_escrow_agreement);

                                 console.log('this quote is for future',future_trading);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'initiated_quote',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                quote_id:quote_id,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select a quote to modify');
        }
    },

    onQuoteResponseButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var quote_id = record[0].get('id');

            var win = Ext.create('Cobuy.view.MemberQuoteResponsesWin');

            var values = {
                quote_id: quote_id
            };
            win.down('#quoteidform').getForm().setValues(values);
        win.show();
        }else{

            Ext.Msg.alert('Error', 'Please select a quote to view responses');
        }

    },

    onModifyingEscrowButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedEscrowGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                //var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}



                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'initiated_escrow',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an escrow to modify');
        }
    },

    onCancelAnescrowButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedEscrowGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                               // var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}




                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'cancel_escrow',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an escrow to cancel');
        }
    },

    onInvokingEscrowButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedEscrowGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                               // var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}





                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'invoke_escrow',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an escrow to invoke');
        }
    },

    onViewingReceivedEscrowButtonClick: function(button, e, eOpts) {
        var grid = this.getAllReceivedEscrowGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                               // var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                                var is_with_video = jsonResponse.product.is_with_video;

                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}



                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'received_escrow',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an escrow to view');
        }
    },

    onAcceptingEscrowButtonClick: function(button, e, eOpts) {
        console.log('accepting escrow button clicked');
    },

    onRejectingReceivedEscrowButtonClick: function(button, e, eOpts) {
        console.log('rejecting escrow button clicked');
    },

    onModifyingFuturesButtonClick: function(button, e, eOpts) {
        console.log('modifying futures button clicked');
    },

    onCancelFuturesRequestButtonClick: function(button, e, eOpts) {
        console.log('cancel futures button clicked');
    },

    onCreateNewVoucherButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.CreateNewVoucherWin');

        win.show();
    },

    onTopUpVoucherButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.ToppingUpVoucherWin');
               var form = win.down('form');
                form.loadRecord(record[0]);

            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please select a voucher to top up');
        }


    },

    onLimitVoucherButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.VoucherLimitersWin');
               var form = win.down('form');
                form.loadRecord(record[0]);

            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please select a voucher to limit');
        }


    },

    onCreateNewHampersButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.CreateNewHampersWin');

        win.show();
    },

    onAssignHampersToBeneficiariesButtonClick: function(button, e, eOpts) {
        console.log('assign hampers to beneficiaries');
    },

    onDetailInformationOfMemberWindowRender: function(component, eOpts) {
        var other_member_id = component.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Members/retrieveThisMemberAccountInformation',
                            params:{
                                other_member_id:other_member_id
                               },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var username = jsonResponse.member.username;
                                var email = jsonResponse.member.email;
                                var membership_number = jsonResponse.member.membership_number;
                                var firstname = jsonResponse.member.firstname;
                                var middlename = jsonResponse.member.middlename;
                                var lastname = jsonResponse.member.lastname;
                                var gender = jsonResponse.member.gender;
                                var address1 = jsonResponse.member.address1;
                                var address2 = jsonResponse.member.address2;
                                var dateofbirth = jsonResponse.member.dateofbirth;
                                var religion = jsonResponse.member.religion;
                                var maritalstatus = jsonResponse.member.maritalstatus;
                                var category = jsonResponse.member.category;
                                var landline = jsonResponse.member.landline;
                                var mobile_line = jsonResponse.member.mobile_line;
                                var delivery_address1 = jsonResponse.member.delivery_address1;
                                var delivery_address2 = jsonResponse.member.delivery_address2;
                                var corporate_address1 = jsonResponse.member.corporate_address1;
                                var corporate_address2 = jsonResponse.member.corporate_address2;
                                var name_of_organization = jsonResponse.member.name_of_organization;
                                var unique_registration_number = jsonResponse.member.unique_registration_number;
                                var business_category = jsonResponse.member.business_category;
                                var membershiptype = jsonResponse.membershiptype;
                                var renewal_date = jsonResponse.date_of_renewal;
                                var member_city = jsonResponse.member_city;
                                var member_state = jsonResponse.member_state;
                                var member_country = jsonResponse.member_country;
                                var member_delivery_city = jsonResponse.member_delivery_city;
                                var member_delivery_state = jsonResponse.member_delivery_state;
                                var member_delivery_country = jsonResponse.member_delivery_country;
                                var member_corporate_city = jsonResponse.member_corporate_city;
                                var member_corporate_state = jsonResponse.member_corporate_state;
                                var member_corporate_country = jsonResponse.member_corporate_country;
                                var id = jsonResponse.member.id;
                                var city_id = jsonResponse.member.city_id;
                                var state_id=jsonResponse.member.state_id;
                                var country_id=jsonResponse.member.country_id;
                                var delivery_city_id = jsonResponse.member.delivery_city_id;
                                var delivery_state_id=jsonResponse.member.delivery_state_id;
                                var delivery_country_id = jsonResponse.member.delivery_country_id;
                                var corporate_city_id = jsonResponse.member.corporate_city_id;
                                var corporate_state_id = jsonResponse.member.corporate_state_id;
                                var corporate_country_id = jsonResponse.member.corporate_country_id;
                                var membership_status = jsonResponse.membership_status;
                                var member_picture = jsonResponse.member.picture;
                                var role = jsonResponse.member.role;
                                var status = jsonResponse.member.status;
                                var usertype =  jsonResponse.member.usertype;
                                var membership_type_id = jsonResponse.membership_type_id;






        					}

                            console.log('the picture of this member is:',member_picture);

                            //get the handle to the image

                            var image = component.down('#memberPicture');

                            //get the image source

                            image.setSrc('../cobuy_images/icons' + '/' + member_picture);



        					var values = {

                                username:username,
                                email:email,
                                membership_number:membership_number,
                                firstname:firstname,
                                middlename:middlename,
                                lastname:lastname,
                                gender:gender,
                                address1:address1,
                                address2:address2,
                                dateofbirth:dateofbirth,
                                religion:religion,
                                maritalstatus:maritalstatus,
                                category:category,
                                landline:landline,
                                mobile_line:mobile_line,
                                delivery_address1:delivery_address1,
                                delivery_address2:delivery_address2,
                                corporate_address1:corporate_address1,
                                corporate_address2:corporate_address2,
                                name_of_organization:name_of_organization,
                                unique_registration_number:unique_registration_number,
                                business_category:business_category,
                                membership_type:membershiptype,
                                renewal_due_date:renewal_date,
                                city:member_city,
                                state:member_state,
                                country:member_country,
                                delivery_city:member_delivery_city,
                                delivery_state:member_delivery_state,
                                delivery_country:member_delivery_country,
                                corporate_city:member_corporate_city,
                                corporate_state:member_corporate_state,
                                corporate_country:member_corporate_country,
                                id:id,
                                city_id:city_id,
                                state_id:state_id,
                                country_id:country_id,
                                delivery_city_id:delivery_city_id,
                                delivery_state_id:delivery_state_id,
                                delivery_country_id:delivery_country_id,
                                corporate_city_id:corporate_city_id,
                                corporate_state_id:corporate_state_id,
                                corporate_country_id:corporate_country_id,
                                membership_status:membership_status,
                                role:role,
                                status:status,
                                usertype:usertype,
                                membership_type_id:membership_type_id

        					};


        					component.down('form').getForm().setValues(values);


        				}




        			});
    },

    onAcceptAMemberInYourConnectionButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        console.log('the other members id for acceptance is:',other_member_id);

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/acceptThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Members/acceptThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            member_id:jsonResponse.member_id
                                        }
                                    });

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onRejectMemberInYourConnectionButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        console.log('the other members id for acceptance is:',other_member_id);

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/rejectThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/rejectThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            member_id:jsonResponse.member_id
                                        }
                                    });

                                   win.close();

                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onDisconnectMemberConnectionButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        console.log('the other members id for acceptance is:',other_member_id);

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/disconnectThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Members/disconnectThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            member_id:jsonResponse.member_id
                                        }
                                    });

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSuspendThisMemberConnectionButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        console.log('the other members id for acceptance is:',other_member_id);

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/suspendThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Members/suspendThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            member_id:jsonResponse.member_id
                                        }
                                    });

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onUnsuspendedThisMemberConnectionButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();

        console.log('the other members id for acceptance is:',other_member_id);

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/unsuspendThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMyMembershipConnectionGrid(),
            store = grid.getStore();

        var win = button.up('window');

        var other_member_id = win.down('#othermemberform').down('hiddenfield[name=other_member_id]').getValue();xt.Ajax.request({
           url: '/cobuy/index.php?r=Members/unsuspendThisMemberInMyConnection',
                            params:{
                                other_member_id: other_member_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            member_id:result.member_id
                                        }
                                    });

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onMyMembersConnectionsGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {

        var win = dataview.up('window');

        if(record.get('status') == 'pending'){
            win.down('#acceptrejectmemberBtn').setDisabled(false);
            win.down('#disconnectmemberBtn').setDisabled(true);
            win.down('#suspendmemberBtn').setDisabled(true);

        }else if(record.get('status') == 'accepted'){
            win.down('#acceptrejectmemberBtn').setDisabled(true);
            win.down('#disconnectmemberBtn').setDisabled(false);
            win.down('#suspendmemberBtn').setDisabled(false);
        }else if(record.get('status')== 'suspended'){
            win.down('#acceptrejectmemberBtn').setDisabled(true);
            win.down('#disconnectmemberBtn').setDisabled(true);
            win.down('#suspendmemberBtn').setDisabled(false);
        }
    },

    onDisconnectFromThisMemberButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyConnectionsToOtherMembers(),
           record =  grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = button.up('window');

        Ext.Msg.show({
                         title:'Disconnecting from a Member?',
                         msg: 'Are you sure you want to disconnect from this member?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Members/disconnectingFromThisMember',
                                    params: {
                                        member_id: record[0].get('member_id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load({
                                                params:{
                                                   member_id: record[0].get('other_member_id')
                                                }
                                            });

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else{

             Ext.Msg.alert('Error', 'Please Select a member to disconnect from');
        }

























    },

    onMemberConnectionWindowRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onRemoveFromTradingListButtonClick: function(button, e, eOpts) {
        //var grid = this.getAllMyTradableProductsGrid(),
          //  store = grid.getStore();

        /**var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/removeThisProductFromThisVendor',
                            params:{
                                product_id: product_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('tradableproductsforvendorGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window');
        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/removeThisProductFromThisVendor',
                            params:{
                                product_id: product_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              Ext.getCmp('tradableproductsforvendorGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onVendorProductGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {

        var grid = this.getAllMyTradableProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please Select a member to either accept or reject');

        }


    },

    onTopUpSubscriptionQuantityButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var subscription_type = record[0].get('type');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'topup',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                subscription_type:subscription_type,
                                is_presubscription_topup:1,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                  escrow_id:record[0].get('escrow_id')

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to unsubscribe');

        }
    },

    onEscrowTheSubscriptionButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var subscription_status = record[0].get('status');
                                var subscription_type = record[0].get('type');
                                var quantity_of_purchase= subscription_quantity;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'escrow_subscription',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                subscription_status:subscription_status,
                                subscription_type:subscription_type,
                                operation_type:'subscription',
                                escrow_request_from:subscription_type,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to unsubscribe');

        }
    },

    onDrawDownOnsubscriptionButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'drawdown',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                is_store_hamper_content:0,
                                is_quote_only:0,
                                is_escrow_only:0,
                                is_quote_and_escrow:0,
                                is_presubscription:0,
                                is_presubscription_and_escrow:0,
                                is_presubscription_and_drawdown:1,
                                is_postsubscription:0,
                                is_postsubscription_and_escrow:0,
                                is_hamper:0,
                                is_mainstore:0,
                                is_with_video:is_with_video,
                                video_for:video_for,
                                escrow_id:record[0].get('escrow_id')


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to unsubscribe');

        }
    },

    onProductSubscriptionGridGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('type') == 'pre' && record.get('status')=='active'){
             win.down('#drawdownBtn').setDisabled(false);
            win.down('#drawdownBtn').setVisible(true);


        }else{
            win.down('#drawdownBtn').setDisabled(true);
            win.down('#drawdownBtn').setVisible(true);

        }

        if((record.get('type') == 'post' && record.get('status')=='active') && (record.get('need_escrow_agreement')==0 && record.get('is_escrow_accepted') ==0)){
            win.down('#escrowsubscriptionBtn').setDisabled(false);
            win.down('#escrowsubscriptionBtn').setVisible(true);

        }else{
            win.down('#escrowsubscriptionBtn').setDisabled(true);
            win.down('#escrowsubscriptionBtn').setVisible(true);
        }
        if(record.get('type') == 'pre' && record.get('status')=='inactive'){
             win.down('#quantitytopupBtn').setDisabled(true);
        }else{
             win.down('#quantitytopupBtn').setDisabled(false);
        }


    },

    onScheduleThisSubscriptionButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var subscription_type = win.down('form').down('hiddenfield[name=subscription_type]').getValue();

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var remaining_subscription_quantity = win.down('form').down('numberfield[name=remaining_subscription_quantity]').getValue();

        var is_delivery_scheduled = win.down('form').down('hiddenfield[name=is_delivery_scheduled]').getValue();

        var day_of_delivery = win.down('form').down('hiddenfield[name=day_of_delivery]').getValue();

        var week_of_delivery = win.down('form').down('hiddenfield[name=week_of_delivery]').getValue();

        var delivery_frequency = win.down('form').down('hiddenfield[name=delivery_frequency]').getValue();

        var date_of_first_delivery = win.down('form').down('datefield[name=date_of_first_delivery]').getValue();

        console.log('subb typpe is:',subscription_type);

        var subscription_win = Ext.create('Cobuy.view.ScheduleSubscriptionDeliveryWin');

        if(subscription_type == 'pre'){
            subscription_win.down('#deliverydrawdown').setVisible(true);
        }
         if(is_delivery_scheduled == 0){
            var values = {
            product_code:product_code,
            product_id:product_id,
            subscription_type:subscription_type,
            remaining_subscription_quantity:remaining_subscription_quantity

        };
        }else{
            var values = {
                product_code:product_code,
                product_id:product_id,
                subscription_type:subscription_type,
                remaining_subscription_quantity:remaining_subscription_quantity,
                day_of_delivery:day_of_delivery,
                week_of_delivery:week_of_delivery,
                delivery_frequency:delivery_frequency,
                date_of_first_delivery:date_of_first_delivery

        };
        }


        //load the form

        subscription_win.down('form').getForm().setValues(values);

        win.close();

        subscription_win.show();
    },

    onUnscribeFromThisProductButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/unsubscribeFromThisProduct',
                            params:{
                                product_id: product_id
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window');
        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Product/unsubscribeFromThisProduct',
                            params:{
                                product_id: product_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onToppingUpSubscriptionButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var subscription_type = win.down('form').down('hiddenfield[name=subscription_type]').getValue();

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var total_subscribed_quantity = win.down('form').down('numberfield[name=subscription_quantity]').getValue();

        var remain_subscribed_value = win.down('form').down('numberfield[name=remaining_subscription_quantity]').getValue();

        console.log('product code is:',product_code);
        console.log('total subscription quantity is:',total_subscribed_quantity);
        console.log('remaining subscription quantity is:',remain_subscribed_value);
        console.log('subscription_type is:',subscription_type);




        //var win = Ext.create('Cobuy.view.TopUpSubscriptionWin');



        var top_win = Ext.create('Cobuy.view.TopUpSubscriptionWin');

        var values = {
            product_code:product_code,
            product_id:product_id,
            total_subscription_quantity:total_subscribed_quantity,
            remaining_subscription_quantity:remain_subscribed_value,
            subscription_type:subscription_type,
            is_presubscription_topup:1

        };

        //load the form

         top_win.down('form').getForm().setValues(values);

        win.close();

        top_win.show();
    },

    onEscrowThisSubscriptionButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var subscription_type = win.down('form').down('hiddenfield[name=subscription_type]').getValue();

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var total_subscribed_quantity = win.down('form').down('numberfield[name=subscription_quantity]').getValue();

        var remain_subscribed_value = win.down('form').down('numberfield[name=remaining_subscription_quantity]').getValue();

        var subscription_status = win.down('form').down('hiddenfield[name=subscription_status]').getValue();

        console.log('product code is:',product_code);
        console.log('total subscription quantity is:',total_subscribed_quantity);
        console.log('remaining subscription quantity is:',remain_subscribed_value);
        console.log('subscription_type is:',subscription_type);




        //var win = Ext.create('Cobuy.view.TopUpSubscriptionWin');



        var escrow_win = Ext.create('Cobuy.view.EscrowThisProductSubscriptionWin');

        var values = {
            product_code:product_code,
            product_id:product_id,
            total_subscription_quantity:total_subscribed_quantity,
            remaining_subscription_quantity:remain_subscribed_value,
            subscription_type:subscription_type,
            operation:'escrow_subscription',
            status:subscription_status,
            is_quotable:0

        };

        //load the form

         escrow_win.down('form').getForm().setValues(values);

        win.close();

        escrow_win.show();
    },

    onDrawingDownOnThisSubscriptionButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var subscription_type = win.down('form').down('hiddenfield[name=subscription_type]').getValue();

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var total_subscribed_quantity = win.down('form').down('numberfield[name=subscription_quantity]').getValue();

        var remain_subscribed_value = win.down('form').down('numberfield[name=remaining_subscription_quantity]').getValue();

        console.log('product code is:',product_code);
        console.log('total subscription quantity is:',total_subscribed_quantity);
        console.log('remaining subscription quantity is:',remain_subscribed_value);
        console.log('subscription_type is:',subscription_type);



        var drawdown_win = Ext.create('Cobuy.view.SubscribedProductDrawdownWin');

        var values = {
            product_code:product_code,
            product_id:product_id,
            total_subscription_quantity:total_subscribed_quantity,
            remaining_subscription_quantity:remain_subscribed_value,
            subscription_type:subscription_type,
            is_presubscription_drawdown:1

        };

        //load the form

         drawdown_win.down('form').getForm().setValues(values);

        win.close();

        drawdown_win.show();
    },

    onSendingPreSubscriptionToCartButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMyProductSubscriptionGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
          Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'tocart',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                quantity_of_purchase:subscription_quantity,
                                is_for_presubscription:1,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});

        }else{
            Ext.Msg.alert('Error', 'Please select a subscription to unsubscribe');

        }
    },

    onDetailOfSubscribedProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#thisproductSubscriptionBox').getValue();


        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    //Ext.getCmp('productsubscriptionGrid').getStore().load();

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                               product_id: result.product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var subscription_quantity = jsonResponse.subscription_quantity;
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = jsonResponse.need_escrow_agreement;
                               // var subscription_type = record[0].get('type');
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                console.log('the subscription quantity is:',subscription_quantity);
                                 console.log('the remaining subscription quantity is:',remaining_quantity);
                                console.log('the subscription amount is:',subscription_amount);
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'detail',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                subscription_quantity:subscription_quantity,
                                remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                                subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement
                               // subscription_type:subscription_type

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                          // win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        							//win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}



    },

    onScheduleSubscriptionDeliveryButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/ScheduleTheDeliveryOfThisProductForAMember',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Product/ScheduleTheDeliveryOfThisProductForAMember',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                               Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onDrawdownOnProductSubscriptionButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/drawdownOnASubscribedProduct',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Product/drawdownOnASubscribedProduct',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onEscrowThisSubscribedProductButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/escrowThisSubscribedProduct',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Product/escrowThisSubscribedProduct',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
                         var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onToppingUpASubscribedProductButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/toppingUpThisSubscribedProduct',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                    Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/addingProductToCart',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              Ext.getCmp('productsubscriptionGrid').getStore().load();
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onTopupSubscriptionWindowRender: function(component, eOpts) {
        var subscription_type = component.down('hiddenfield[name=subscription_type]').getValue();

        if(subscription_type == 'pre'){
            component.down('#topupthispresuibscriptionBtn').setVisible(true);
            component.down('#topupthissuibscriptionBtn').setVisible(false);
        }else{
            component.down('#topupthispresuibscriptionBtn').setVisible(false);
            component.down('#topupthissuibscriptionBtn').setVisible(true);
        }
    },

    onToppingUpAPresubscribedProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var topup_quantity = win.down('form').down('numberfield[name=topup_quantity]').getValue();

        console.log('the productt id is',product_id);

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id:product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var subscription_win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var subscription_win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.prevailing_retail_selling_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase= topup_quantity;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'noncart',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                code:code,
                                is_for_presubscription:1,
                                is_for_presubscription_topup:1,
                                subscription_type:'pre',
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            subscription_win.down('form').getForm().setValues(values);

                            subscription_win.show();
        				}




        			});
    },

    onInitiatedQuoteGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('status') == 'live'){
            win.down('#modifyquoteBtn').setDisabled(false);
            win.down('#quoteresponsesBtn').setDisabled(false);
            win.down('#viewinitiatedacceptedquoteBtn').setDisabled(true);
             win.down('#cancelquoteBtn').setDisabled(false);
        }else if(record.get('status') == 'accepted'){
            win.down('#modifyquoteBtn').setDisabled(true);
            win.down('#quoteresponsesBtn').setDisabled(true);
            win.down('#viewinitiatedacceptedquoteBtn').setDisabled(false);
            win.down('#cancelquoteBtn').setDisabled(true);
        }else{
            win.down('#modifyquoteBtn').setDisabled(true);
            win.down('#quoteresponsesBtn').setDisabled(true);
            win.down('#viewinitiatedacceptedquoteBtn').setDisabled(true);
            win.down('#cancelquoteBtn').setDisabled(true);
        }
    },

    onReceivedQuoteGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('status') == 'live'){
            win.down('#viewquoterequestBtn').setDisabled(false);
            win.down('#viewreceivedacceptedquoteBtn').setDisabled(true);
        }else if(record.get('status') == 'accepted'){
            win.down('#viewquoterequestBtn').setDisabled(true);
            win.down('#viewreceivedacceptedquoteBtn').setDisabled(false);

        }else{
            win.down('#viewquoterequestBtn').setDisabled(true);
            win.down('#viewreceivedacceptedquoteBtn').setDisabled(true);
        }
    },

    onEffectingModificationOnAQuoteButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllInitiatedQuoteGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/effectTheModificationOfAQuote',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('receivedquotegrid').getStore().load();
                                     Ext.getCmp('initiatedescrowgrid').getStore().load();
                                    Ext.getCmp('receivedescrowgrid').getStore().load();
                                     Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                     Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllInitiatedQuoteGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Quote/effectTheModificationOfAQuote',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             store.load();
                                    Ext.getCmp('receivedquotegrid').getStore().load();
                                     Ext.getCmp('initiatedescrowgrid').getStore().load();
                                    Ext.getCmp('receivedescrowgrid').getStore().load();
                                     Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                     Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onCancelAQuoteButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var quote_id = record[0].get('id');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('this quote is escrowable:',need_escrow_agreement);

                                 console.log('this quote is for future',future_trading);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'cancel_quote',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                quote_id:quote_id,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select a quote to modify');
        }
    },

    onCancelThisQuoteButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllInitiatedQuoteGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/cancelThisQuote',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('receivedquotegrid').getStore().load();
                                     Ext.getCmp('initiatedescrowgrid').getStore().load();
                                    Ext.getCmp('receivedescrowgrid').getStore().load();
                                     Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                     Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllInitiatedQuoteGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Quote/cancelThisQuote',

           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('receivedquotegrid').getStore().load();
                                     Ext.getCmp('initiatedescrowgrid').getStore().load();
                                    Ext.getCmp('receivedescrowgrid').getStore().load();
                                     Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                     Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onViewingThisQuoteRequestButtonClick: function(button, e, eOpts) {
        var grid = this.getAllReceivedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var quote_id = record[0].get('id');
                                var quote_number = record[0].get('quote_number');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('this quote is escrowable:',need_escrow_agreement);

                                 console.log('this quote is for future',future_trading);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'received_quote',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                quote_id:quote_id,
                                quote_number:quote_number,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select a quote to modify');
        }
    },

    onSendThisQuoteResponseButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var quote_id = win.down('form').down('hiddenfield[name=quote_id]').getValue();

        var need_escrow_agreement = win.down('form').down('checkboxfield[name=need_escrow_agreement]').getValue();

        var future_trading = win.down('form').down('checkboxfield[name=future_trading]').getValue();

        var quote_number = win.down('form').down('hiddenfield[name=quote_number]').getValue();

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var quantity_of_purchase = win.down('form').down('numberfield[name=quantity_of_purchase]').getValue();


        console.log('the product id is:',product_id);

        console.log('the quote id is:',quote_id);

        console.log('the escrow needed id is:',need_escrow_agreement);

        console.log('the futures needed id is:',future_trading);

        console.log('the quote number id is:',quote_number);

        console.log('the quantity of purchase is:',quantity_of_purchase);



        var quote_win = Ext.create('Cobuy.view.QuoteResponseWin');

        quote_win.down('#viewescrowBtn').setVisible(false);
        quote_win.down('#previewescrowBtn').setVisible(true);


        var values = {
            product_id:product_id,

            quote_id:quote_id,
            need_escrow_agreement:need_escrow_agreement,
            future_trading:future_trading,
            quote_number:quote_number,
            product_code:product_code,
            quantity_of_purchase:quantity_of_purchase

        };

        quote_win.down('form').getForm().setValues(values);

        win.destroy();

        quote_win.show();
    },

    onAcceptEscrowCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var future_trading = win.down('form').down('hiddenfield[name=future_trading]').getValue();

        var future_terms = win.down('#acceptfuturesCheckbox').getValue();

        var quotation_terms = win.down('#quotationtermsandconditionsCheckbox').getValue();

        console.log('escrow value is:',newValue);
        console.log('future value is:',future_terms);
        console.log('quotation value is:',quotation_terms);

        if(newValue == 1 || newValue === true){
            if(future_trading == 'true'){
                if(future_terms ==1 && quotation_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                 win.down('#sendquotationBtn').setDisabled(true);
                }
            }else{
                if(quotation_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
                }
            }


        }else{
             win.down('#sendquotationBtn').setDisabled(true);
        }
    },

    onAcceptFuturesCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var need_escrow_agreement = win.down('form').down('hiddenfield[name=need_escrow_agreement]').getValue();

        var escrow_terms = win.down('#acceptescrowCheckbox').getValue();

        var quotation_terms = win.down('#quotationtermsandconditionsCheckbox').getValue();

        if(newValue == 1 || newValue === true){
            if(need_escrow_agreement == 'true'){
                if(escrow_terms ==1 && quotation_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
            }
            }else{
                if(quotation_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
                }
            }


        }else{
             win.down('#sendquotationBtn').setDisabled(true);
        }
    },

    onAcceptQuotationCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var need_escrow_agreement = win.down('form').down('hiddenfield[name=need_escrow_agreement]').getValue();

        var future_trading = win.down('form').down('hiddenfield[name=future_trading]').getValue();

        var escrow_terms = win.down('#acceptescrowCheckbox').getValue();

        var futures_terms = win.down('#acceptfuturesCheckbox').getValue();

        if(newValue == 1 || newValue === true){

            if(need_escrow_agreement == 'true' && future_trading == 'true'){
                if(escrow_terms ==1 && futures_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
                }
            }else if(need_escrow_agreement == 'true' && future_trading == 'false'){
                if(escrow_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
                }
            }else if(need_escrow_agreement == 'false' && future_trading == 'true'){
                if(futures_terms ==1){
                    win.down('#sendquotationBtn').setDisabled(false);
                }else{
                     win.down('#sendquotationBtn').setDisabled(true);
                }
            }else{
                win.down('#sendquotationBtn').setDisabled(false);
            }


        }else{
             win.down('#sendquotationBtn').setDisabled(true);
        }
    },

    onQuoteResponseWindowRender: function(component, eOpts) {
        var quote_id = component.down('form').down('hiddenfield[name=quote_id]').getValue();

        var need_escrow_agreement = component.down('form').down('hiddenfield[name=need_escrow_agreement]').getValue();

        var future_trading = component.down('form').down('hiddenfield[name=future_trading]').getValue();

        if(need_escrow_agreement == 'true' || need_escrow_agreement ==1){
            component.down('#escrowContainer').setDisabled(false);
        }else{
            component.down('#escrowContainer').setDisabled(true);
        }

        if(future_trading == 'true' || future_trading == 1){
             component.down('#futuresContainer').setDisabled(false);
        }else{
            component.down('#futuresContainer').setDisabled(true);
        }


        console.log('the escrow form:',component.down('form'));
        if(quote_id>0){
             Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievethisquotefuturesinformation',
                          params:{
                              quote_id: quote_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var delivery_month = jsonResponse.futures.delivery_month;
                                var delivery_year = jsonResponse.futures.delivery_year;
                                var payment_method = jsonResponse.futures.payment_method;
                                var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;


        					}
                            var values = {
                                delivery_month:delivery_month,
                                delivery_year:delivery_year,
                                payment_method:payment_method,
                                staggered_payment_frequency:staggered_payment_frequency



                            };

                            //load the futures data
                            component.down('form').getForm().setValues(values);



        				}




        			});
        }
    },

    onDisplayThisQuoteButtonClick: function(button, e, eOpts) {
        var quote_win = button.up('window');

        //get the membership number in the textfield
        var product_id = quote_win.down('form').down('hiddenfield[name=product_id]').getValue();

        var quote_id_2 = quote_win.down('form').down('hiddenfield[name=quote_id]').getValue();

        var need_escrow_agreement_2 = quote_win.down('form').down('hiddenfield[name=need_escrow_agreement]').getValue();

        var future_trading_2 = quote_win.down('form').down('hiddenfield[name=future_trading]').getValue();

        var quantity_of_purchase_2 = quote_win.down('form').down('hiddenfield[name=quantity_of_purchase]').getValue();

        console.log('the quantity of purchaseeeee is:',parseInt(quantity_of_purchase_2));

        console.log('the product id is:',product_id);

        console.log('the quoteeee id is:',quote_id_2);


         Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: product_id
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = parseInt(quantity_of_purchase_2);
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                var need_escrow_agreement = need_escrow_agreement_2;
                                var future_trading =  future_trading_2;
                                var quote_id = quote_id_2;
                                var quote_number = quote_number;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('this quote is escrowable:',need_escrow_agreement);

                                 console.log('this quote is for future',future_trading);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'send_quote',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:need_escrow_agreement,
                                requesting_for_a_quote:1,
                                future_trading:future_trading,
                                quote_id:quote_id,
                                quote_number:quote_number,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                          // win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});



    },

    onSendingThisQuoteResponseButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/sendingQuotationToThisQuoteRequest',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
                                   // Ext.getCmp('productsubscriptionGrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Quote/sendingQuotationToThisQuoteRequest',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onMemberQuoteResponseWindowRender: function(component, eOpts) {
        var quote_id = component.down('#quoteidform').down('hiddenfield[name=quote_id]').getValue();

        //load the grid

        component.down('grid').getStore().load({
            params:{
                quote_id:quote_id
            }
        });
    },

    onViewingAQuoteResponseButtonClick: function(button, e, eOpts) {
        var grid = this.getAllQuoteResponseGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

                var win = Ext.create('Cobuy.view.QuoteResponseWin');
                var form = win.down('form');

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievequoteinformation',
                          params:{
                              quote_id:record[0].get('quote_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var quote_number = jsonResponse.quote.quote_number;
                                var product_id = jsonResponse.quote.product_id;
                                var quantity_of_purchase = jsonResponse.quote.quantity;
                                var escrow_id = jsonResponse.escrow.id;

                                var delivery_month = jsonResponse.futures.delivery_month;
                                var delivery_year = jsonResponse.futures.delivery_year;
                                var payment_method = jsonResponse.futures.payment_method;
                                var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;

                              if(record[0].get('is_quote_escrowed') === true || record[0].get('is_quote_escrowed') ==1){
                                win.down('#escrowContainer').setDisabled(false);
                                }else{
                                        win.down('#escrowContainer').setDisabled(true);
                                 }

                                if(record[0].get('is_future_facility_terms_accepted') === true || record[0].get('is_future_facility_terms_accepted') == 1){
                                     win.down('#futuresContainer').setDisabled(false);
                                        }else{
                                                win.down('#futuresContainer').setDisabled(true);
                                 }
                                if(record[0].get('is_with_video') == 1 || record[0].get('is_with_video')==true){
                                    win.down('#viewproductdemoContainer').setDisabled(false);
                                }else{
                                    win.down('#viewproductdemoContainer').setDisabled(true);
                                }
                                win.down('#uploadquotationfile').setVisible(false);
                                win.down('#termsandconditions').setVisible(false);
                                win.down('#quotationdecision').setVisible(true);
                                win.down('#viewquotationfile').setVisible(true);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#acceptquotationBtn').setVisible(true);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#amountquotedBox').setReadOnly(true);
                                win.down('#productvideoContainer').setVisible(false);
                                win.down('#viewproductdemoContainer').setVisible(true);



                            } //success ends here

                            var values = {
                                quote_number:quote_number,
                                accept_escrow:record[0].get('is_quote_escrowed'),
                                need_escrow_agreement:record[0].get('is_quote_escrowed'),
                                accept_futures:record[0].get('is_future_facility_terms_accepted'),
                                future_trading:record[0].get('is_future_facility_terms_accepted'),
                                total_amount_quoted:record[0].get('total_amount_quoted'),
                                quote_id:record[0].get('quote_id'),
                                product_id: product_id,
                                //product_code:product_code,
                                quantity_of_purchase:quantity_of_purchase,
                                delivery_month:delivery_month,
                                delivery_year:delivery_year,
                                payment_method:payment_method,
                                staggered_payment_frequency:staggered_payment_frequency,
                                quote_responder:record[0].get('member_id'),
                                escrow_id:escrow_id




                            };

                                //load the form
                          form.loadRecord(record[0]);

                            form.getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{

            Ext.Msg.alert('Error', 'Please select a quotation to view');
        }


    },

    onAcceptQutationRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
                win.down('#acceptquotationBtn').setVisible(true);
                win.down('#acceptquotationBtn').setDisabled(false);
                win.down('#sendquotationBtn').setVisible(false);
                win.down('#rejectquotationBtn').setVisible(false);
                win.down('#okBtn').setVisible(false);

        }
    },

    onRejectQuotationRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#acceptquotationBtn').setVisible(false);
            win.down('#sendquotationBtn').setVisible(false);
            win.down('#rejectquotationBtn').setVisible(true);
        }
    },

    onAcceptingQuotationButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllQuoteResponseGrid(),
        		store = grid.getStore();


        var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();
                    var quote_id =  win.down('form').down('hiddenfield[name=quote_id]').getValue();
        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/acceptingThisMemberQuotation',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    store.load({
                                        params:{
                                            quote_id:quote_id
                                        }
                                    });
                                    Ext.getCmp('initiatedquotesgrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllQuoteResponseGrid(),
        		store = grid.getStore();


        var win = button.up('window'),
        			formPanel = win.down('form');

        var quote_id =  win.down('form').down('hiddenfield[name=quote_id]').getValue();

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Quote/acceptingThisMemberQuotation',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            quote_id:quote_id
                                        }
                                    });
                                    Ext.getCmp('initiatedquotesgrid').getStore().load();
                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onRejectingQuotationButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllQuoteResponseGrid(),
        		store = grid.getStore();


        var win = button.up('window'),
        			formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();
                    var quote_id =  win.down('form').down('hiddenfield[name=quote_id]').getValue();
        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Quote/rejectingThisMemberQuotation',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load({
                                        params:{
                                            quote_id:quote_id
                                        }
                                    });
                                    Ext.getCmp('initiatedquotesgrid').getStore().load();
                                     Ext.getCmp('receivedquotegrid').getStore().load();
                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllQuoteResponseGrid(),
        		store = grid.getStore();


        var win = button.up('window'),
        			formPanel = win.down('form');

         var quote_id =  win.down('form').down('hiddenfield[name=quote_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Quote/rejectingThisMemberQuotation',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            quote_id:quote_id
                                        }
                                    });
                                    Ext.getCmp('initiatedquotesgrid').getStore().load();
                                     Ext.getCmp('receivedquotegrid').getStore().load();
                                   win.close();

                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onViewingAcceptedQuotationButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.QuoteResponseWin');
                var form = win.down('form');

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievequoteinformation',
                          params:{
                              quote_id:record[0].get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var quote_number = jsonResponse.quote.quote_number;
                                var product_id = jsonResponse.quote.product_id;
                                var quantity_of_purchase = jsonResponse.quote.quantity;
                                 var quote_responder = jsonResponse.response.member_id;
                                var escrow_id = jsonResponse.escrow.id;

                                if(record[0].get('is_for_future') == 1 || record[0].get('is_for_future') ===true){

                                    var delivery_month = jsonResponse.futures.delivery_month;
                                    var delivery_year = jsonResponse.futures.delivery_year;
                                    var payment_method = jsonResponse.futures.payment_method;
                                    var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;
                                    var accept_futures = jsonResponse.response.is_future_facility_terms_accepted;
                                    var future_trading = jsonResponse.response.is_future_facility_terms_accepted;
                                    var is_with_video = jsonResponse.response.is_with_video;

                                    if(accept_futures === true || accept_futures == 1){
                                     win.down('#futuresContainer').setDisabled(false);
                                        }else{
                                                win.down('#futuresContainer').setDisabled(true);
                                     }
                                }
                                if(record[0].get('is_escrowed') == 1 || record[0].get('is_escrowed') === true ){
                                    var accept_escrow = jsonResponse.response.is_quote_escrowed;
                                    var need_escrow_agreement = jsonResponse.response.is_quote_escrowed;
                                    if(accept_escrow === true || accept_escrow ==1){
                                        win.down('#escrowContainer').setDisabled(false);
                                    }else{
                                        win.down('#escrowContainer').setDisabled(true);
                                     }
                                }
                                if(is_with_video == 1 || is_with_video == true){
                                    win.down('#viewproductdemoContainer').setDisabled(false);
                                }else{
                                    win.down('#viewproductdemoContainer').setDisabled(true);
                                }

                                if(jsonResponse.response === null){
                                    var total_amount_quoted  = 0;
                                }else{
                                    var total_amount_quoted = jsonResponse.response.total_amount_quoted;
                                }

                                console.log('the quote responder is:',quote_responder);


                                win.down('#uploadquotationfile').setVisible(false);
                                win.down('#termsandconditions').setVisible(false);
                                win.down('#quotationdecision').setVisible(true);
                                win.down('#viewquotationfile').setVisible(true);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#acceptquotationBtn').setVisible(false);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#amountquotedBox').setReadOnly(true);
                                win.down('#maintoolbar').setVisible(false);
                                win.down('#viewingtoolbar').setVisible(true);
                                win.down('#productvideoContainer').setVisible(false);
                                 win.down('#viewproductdemoContainer').setVisible(true);



                            } //success ends here

                            var values = {
                                quote_number:quote_number,
                                accept_escrow:accept_escrow,
                                need_escrow_agreement:need_escrow_agreement,
                                accept_futures:accept_futures,
                                future_trading:future_trading,
                                total_amount_quoted:total_amount_quoted,
                                quote_id:record[0].get('id'),
                                product_id: product_id,
                                //product_code:product_code,
                                quantity_of_purchase:quantity_of_purchase,
                                delivery_month:delivery_month,
                                delivery_year:delivery_year,
                                payment_method:payment_method,
                                staggered_payment_frequency:staggered_payment_frequency,
                                quotation_decision:'accepted',
                                quote_responder:quote_responder,
                                escrow_id:escrow_id





                            };

                                //load the form
                          form.loadRecord(record[0]);

                            form.getForm().setValues(values);

                            win.show();
        				}




        			});




        }else{
            Ext.Msg.alert('Error', 'Please select a an accepted quotation to view');
        }
    },

    onOkButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        win.destroy();
    },

    onViewingAcceptedReceivedQuotationButtonClick: function(button, e, eOpts) {
        var grid = this.getAllReceivedQuoteGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.QuoteResponseWin');
                var form = win.down('form');

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Quote/retrievequoteinformation',
                          params:{
                              quote_id:record[0].get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var quote_number = jsonResponse.quote.quote_number;
                                var product_id = jsonResponse.quote.product_id;
                                var quantity_of_purchase = jsonResponse.quote.quantity;
                                var quote_responder = jsonResponse.response.member_id;
                                var escrow_id = jsonResponse.escrow.id;

                                if(record[0].get('is_for_future') == 1 || record[0].get('is_for_future') ===true){

                                    var delivery_month = jsonResponse.futures.delivery_month;
                                    var delivery_year = jsonResponse.futures.delivery_year;
                                    var payment_method = jsonResponse.futures.payment_method;
                                    var staggered_payment_frequency = jsonResponse.futures.staggered_payment_frequency;
                                    var accept_futures = jsonResponse.response.is_future_facility_terms_accepted;
                                    var future_trading = jsonResponse.response.is_future_facility_terms_accepted;
                                    var is_with_video = jsonResponse.response.is_with_video;

                                    if(accept_futures === true || accept_futures == 1){
                                     win.down('#futuresContainer').setDisabled(false);
                                        }else{
                                                win.down('#futuresContainer').setDisabled(true);
                                     }
                                }
                                if(record[0].get('is_escrowed') == 1 || record[0].get('is_escrowed') === true ){
                                    var accept_escrow = jsonResponse.response.is_quote_escrowed;
                                    var need_escrow_agreement = jsonResponse.response.is_quote_escrowed;
                                    if(accept_escrow === true || accept_escrow ==1){
                                        win.down('#escrowContainer').setDisabled(false);
                                    }else{
                                        win.down('#escrowContainer').setDisabled(true);
                                     }
                                }
                                if(is_with_video == 1 || is_with_video == true){
                                    win.down('#viewproductdemoContainer').setDisabled(false);
                                }else{
                                    win.down('#viewproductdemoContainer').setDisabled(true);
                                }


                                if(jsonResponse.response === null){
                                    var total_amount_quoted  = 0;
                                }else{
                                    var total_amount_quoted = jsonResponse.response.total_amount_quoted;
                                }
                                console.log('the quote responder is:',quote_responder);



                                win.down('#uploadquotationfile').setVisible(false);
                                win.down('#termsandconditions').setVisible(false);
                                win.down('#quotationdecision').setVisible(true);
                                win.down('#viewquotationfile').setVisible(true);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#acceptquotationBtn').setVisible(false);
                                win.down('#sendquotationBtn').setVisible(false);
                                win.down('#amountquotedBox').setReadOnly(true);
                                win.down('#maintoolbar').setVisible(false);
                                win.down('#viewingtoolbar').setVisible(true);
                                win.down('#productvideoContainer').setVisible(false);
                                win.down('#viewproductdemoContainer').setVisible(true);



                            } //success ends here

                            var values = {
                                quote_number:quote_number,
                                accept_escrow:accept_escrow,
                                need_escrow_agreement:need_escrow_agreement,
                                accept_futures:accept_futures,
                                future_trading:future_trading,
                                total_amount_quoted:total_amount_quoted,
                                quote_id:record[0].get('id'),
                                product_id: product_id,
                                //product_code:product_code,
                                quantity_of_purchase:quantity_of_purchase,
                                delivery_month:delivery_month,
                                delivery_year:delivery_year,
                                payment_method:payment_method,
                                staggered_payment_frequency:staggered_payment_frequency,
                                quotation_decision:'accepted',
                                quote_responder:quote_responder,
                                escrow_id:escrow_id





                            };

                                //load the form
                          form.loadRecord(record[0]);

                            form.getForm().setValues(values);
                             win.show();

        				}




        			});




        }else{
            Ext.Msg.alert('Error', 'Please select a an accepted quotation to view');
        }
    },

    onInitiatedEscrowGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('quote_id')>0 ){
            win.down('#modifyescrowBtn').setDisabled(true);
            win.down('#cancelescrowBtn').setDisabled(true);
            if(record.get('status')=='accepted'){
                win.down('#invokeescrowBtn').setDisabled(false);
            }else{
                win.down('#invokeescrowBtn').setDisabled(true);
            }


        }else{
            if(record.get('status') == 'live'){
                win.down('#modifyescrowBtn').setDisabled(false);
                win.down('#cancelescrowBtn').setDisabled(false);
            }else{
                win.down('#modifyescrowBtn').setDisabled(true);
                win.down('#cancelescrowBtn').setDisabled(true);
            }
            if(record.get('status')=='accepted'){
                win.down('#invokeescrowBtn').setDisabled(false);
            }else{
                win.down('#invokeescrowBtn').setDisabled(true);
            }

        }
    },

    onReceivedEscrowGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('quote_id')>0){
            win.down('#acceptescrowBtn').setDisabled(true);
            win.down('#rejectescrowBtn').setDisabled(true);


        }else{
            if(record.get('status') == 'live'){
                win.down('#acceptescrowBtn').setDisabled(false);
                win.down('#rejectescrowBtn').setDisabled(false);
            }else{
                win.down('#acceptescrowBtn').setDisabled(true);
                win.down('#rejectescrowBtn').setDisabled(true);
            }
        }
    },

    onCancellingTheEscrowButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Escrow/cancelThisEscrow',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    if(result.escrow_operation_for != 'noncart'){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                    }
                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   //  Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   // Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Escrow/cancelThisEscrow',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    if(jsonResponse.escrow_operation_for != 'noncart'){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                    }
                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   //  Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   // Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onModifyingThisEscrowButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Escrow/modifyingThisEscrow',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    if(result.escrow_operation_for != 'noncart'){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                    }
                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   //  Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   // Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Escrow/modifyingThisEscrow',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    if(jsonResponse.escrow_operation_for != 'noncart'){
                                        Ext.getCmp('productsubscriptionGrid').getStore().load();
                                    }
                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   //  Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   // Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onInvokingAnEscrowButtonClick: function(button, e, eOpts) {

        var win = button.up('window');

        var product_code = win.down('form').down('textfield[name=code]').getValue();

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        var escrow_id = win.down('form').down('hiddenfield[name=escrow_id]').getValue();

        var escrow_number = win.down('form').down('hiddenfield[name=escrow_number]').getValue();

        var is_quoted = win.down('form').down('hiddenfield[name=is_quotable]').getValue();
        var is_futures = win.down('form').down('hiddenfield[name=is_future_tradable]').getValue();
        var quantity = win.down('form').down('numberfield[name=quantity_of_purchase]').getValue();

        var escrow_win = Ext.create('Cobuy.view.InvocationOfAnEscrowWin');

        var values = {
            product_code:product_code,
            escrow_number:escrow_number,
            escrow_id:escrow_id,
            product_id:product_id,
            is_quoted:is_quoted,
            is_futures:is_futures,
            quantity:quantity

        };

        escrow_win.down('form').getForm().setValues(values);

        win.close();

        escrow_win.show();
    },

    onEscrowTermsAndConditionsCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#invokethisescrowBtn').setDisabled(false);
        }else{
            win.down('#invokethisescrowBtn').setDisabled(true);
        }
    },

    onInvokingThisEscrowButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Escrow/invokingThisEscrow',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();

                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllInitiatedEscrowGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Escrow/invokingThisEscrow',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();

                                    //Ext.getCmp('receivedquotegrid').getStore().load();
                                   Ext.getCmp('initiatedescrowgrid').getStore().load();
                                   Ext.getCmp('receivedescrowgrid').getStore().load();
                                   //  Ext.getCmp('initiatedfuturesgrid').getStore().load();
                                   //  Ext.getCmp('receivedfuturesgrid').getStore().load();

                                   win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onInitiatedFuturesGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('quote_id')> 0){
           win.down('#modifyfuturesBtn').setDisabled(true);
            win.down('#cancelfuturesrequestBtn').setDisabled(true);
        }else{
             win.down('#modifyfuturesBtn').setDisabled(false);
            win.down('#cancelfuturesrequestBtn').setDisabled(false);
        }
    },

    onViewingThisFuturesButtonClick: function(button, e, eOpts) {
        var grid = this.getAllReceivedFuturesGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductfuturesinformation',
                          params:{
                              quote_id: record[0].get('quote_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                //var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}



                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'received_future',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:1,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an future to view');
        }
    },

    onViewingThisInitiatedFuturesButtonClick: function(button, e, eOpts) {
        var grid = this.getAllInitiatedFuturesGrid(),
        		record = grid.getSelectionModel().getSelection();



        if(record[0]){

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductfuturesinformation',
                          params:{
                              quote_id: record[0].get('quote_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var quantity_of_purchase = record[0].get('quantity');
                                var remaining_subscription_quantity = jsonResponse.remaining_subscription_quantity;
                                var per_delivery_quantity = jsonResponse.per_delivery_quantity;
                                 //var subscription_amount = subscription_quantity * prevailing_retail_selling_price;
                                //var need_escrow_agreement = record[0].get('is_escrowed');
                                var future_trading = record[0].get('is_for_future');
                                var escrow_id = record[0].get('id');
                                var quote_id = record[0].get('quote_id');
                                var escrow_request_from = record[0].get('escrow_operation_for');
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;

                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}




                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                quantity_of_purchase:quantity_of_purchase,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'received_future',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                               // subscription_quantity:subscription_quantity,
                               // remaining_subscription_quantity:remaining_subscription_quantity,
                               // per_delivery_quantity:per_delivery_quantity,
                               // subscription_amount:Ext.util.Format.number(subscription_amount,'0,000.00'),
                                need_escrow_agreement:1,
                                requesting_for_a_quote:1,
                                future_trading:1,
                                escrow_id:escrow_id,
                                quote_id:quote_id,
                                escrow_request_from:escrow_request_from,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        }else{
           Ext.Msg.alert('Error', 'Please select an future to view');
        }
    },

    onEscrowCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#invokethisescrowBtn').setDisabled(false);
        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#invokethisescrowBtn').setDisabled(true);
        }
    },

    onVoucherCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#creatingvoucherBtn').setDisabled(false);
        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#creatingvoucherBtn').setDisabled(true);
        }
    },

    onToppingUpVoucherCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#topupvoucherBtn').setDisabled(false);
        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#topupvoucherBtn').setDisabled(true);
        }
    },

    onContainerLimiterRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 ||newValue == true){
            win.down('#categorylimiterContainer').setVisible(true);
             win.down('#productlimiterContainer').setVisible(false);
            win.down('#categoryContainer').setVisible(true);
             win.down('#productContainer').setVisible(false);
        }else{
             win.down('#categorylimiterContainer').setVisible(false);
             win.down('#productlimiterContainer').setVisible(true);
            win.down('#categoryContainer').setVisible(false);
             win.down('#productContainer').setVisible(true);
        }
    },

    onProductLimiterRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        console.log('the newvalue is:',newValue);

        if(newValue == 1 || newValue == true){
            win.down('#categorylimiterContainer').setVisible(false);
             win.down('#productlimiterContainer').setVisible(true);
            win.down('#categoryContainer').setVisible(false);
             win.down('#productContainer').setVisible(true);
        }else{
            win.down('#categorylimiterContainer').setVisible(true);
             win.down('#productlimiterContainer').setVisible(false);
            win.down('#categoryContainer').setVisible(true);
             win.down('#productContainer').setVisible(false);
        }
    },

    onFundingOwnWalletButtonClick: function(button, e, eOpts) {

        var grid = this.getAllMemberVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.FundingOwnWalletWin');
               var form = win.down('form');
                form.loadRecord(record[0]);

            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please select a voucher');
        }


    },

    onAllocateAllowanceButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.VoucherBeneficiariesWin');
               var form = win.down('form');
                form.loadRecord(record[0]);

            win.show();

        }else{
            Ext.Msg.alert('Error', 'Please select a voucher');
        }


    },

    onAddingNewVoucherBeneficiaryButtonClick: function(button, e, eOpts) {
        var voucher_win = button.up('window');

        var voucher_number = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_number]').getValue();

        var voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_value]').getValue();

        var remaining_voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=remaining_voucher_value]').getValue();

        var voucher_id = voucher_win.down('#voucheridform').down('hiddenfield[name=id]').getValue();




        var operation = 'add';

        var win = Ext.create('Cobuy.view.FundingAnotherMemberWalletWin');
        if(operation == 'add'){
            win.down('#fundamemberwalletBtn').setVisible(true);
            win.down('#activateamemberfundBtn').setVisible(false);
            win.down('#suspendamemberfundBtn').setVisible(false);
            win.down('#unsuspendamemberfundBtn').setVisible(false);
             win.down('#removebeneficiaryBtn').setVisible(false);
            win.down('#topupbeneficiaryfundBtn').setVisible(false);
        }

        var values = {
            operation:operation,
            voucher_number:voucher_number,
            voucher_value:voucher_value,
            remaining_voucher_value:remaining_voucher_value,
            voucher_id:voucher_id

        };

        win.down('form').getForm().setValues(values);




        win.show();
    },

    onActivateBeneficiaryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

                                var voucher_win = button.up('window');

                                var voucher_number = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_number]').getValue();

                                var voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_value]').getValue();

                                var remaining_voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=remaining_voucher_value]').getValue();

                                var voucher_id = voucher_win.down('#voucheridform').down('hiddenfield[name=id]').getValue();

                                var allocated_voucher_value= record[0].get('actual_voucher_share');

                                var operation = 'activate';


            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheNameOfTheOwnerOfThisWallet',
                          params:{
                              wallet_id: record[0].get('wallet_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var name = jsonResponse.name;
                               var win = Ext.create('Cobuy.view.FundingAnotherMemberWalletWin');
                                if(operation == 'activate'){
                                    win.down('#fundamemberwalletBtn').setVisible(false);
                                    win.down('#activateamemberfundBtn').setVisible(true);
                                    win.down('#suspendamemberfundBtn').setVisible(false);
                                    win.down('#unsuspendamemberfundBtn').setVisible(false);
                                     win.down('#removebeneficiaryBtn').setVisible(false);
                                    win.down('#topupbeneficiaryfundBtn').setVisible(false);
                                    win.down('#thismember').setReadOnly(true);
                                    win.down('#thisvoucherfundingBox').setReadOnly(true);
                                    win.down('#totalfundvalueContainer').setVisible(false);
                                    win.down('#totalfundvaluefordisplayContainer').setVisible(true);
                                    win.down('#unallocatedfundContainer').setVisible(false);
                                    win.down('#unallocatedfundfordisplayContainer').setVisible(true);
                                    win.down('#newvouchervalueformemberContainer').setVisible(false);
                                    win.down('#newvouchervalueformemberfordisplayContainer').setVisible(true);
                                  }






                            } //success ends here

                            var values = {
                                    operation:operation,
                                    voucher_number:voucher_number,
                                    voucher_value:voucher_value,
                                    remaining_voucher_value:remaining_voucher_value,
                                    voucher_id:voucher_id,
                                    allocated_voucher_value:allocated_voucher_value,
                                    total_voucher_value_display:Ext.util.Format.number((voucher_value),'0,000.00'),
                                    remaining_voucher_value_display:Ext.util.Format.number((remaining_voucher_value),'0,000.00'),
                                    allocated_voucher_value_display:Ext.util.Format.number((allocated_voucher_value),'0,000.00'),
                                    name:name,
                                    status:record[0].get('status')
                            };

                            win.down('form').loadRecord(record[0]);
                            win.down('form').getForm().setValues(values);

                            win.show();

        				}




        			});


        }else{

            Ext.Msg.alert('Error', 'Please select an item to active');
        }




    },

    onSuspendVoucherBeneficiaryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var voucher_win = button.up('window');

                                var voucher_number = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_number]').getValue();

                                var voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_value]').getValue();

                                var remaining_voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=remaining_voucher_value]').getValue();

                                var voucher_id = voucher_win.down('#voucheridform').down('hiddenfield[name=id]').getValue();

                                var allocated_voucher_value= record[0].get('actual_voucher_share');


            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheNameOfTheOwnerOfThisWallet',
                          params:{
                              wallet_id: record[0].get('wallet_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var name = jsonResponse.name;
                               var win = Ext.create('Cobuy.view.FundingAnotherMemberWalletWin');
                                var operation = 'suspend';
                                if(operation == 'suspend'){
                                    win.down('#fundamemberwalletBtn').setVisible(false);
                                    win.down('#activateamemberfundBtn').setVisible(false);
                                    win.down('#suspendamemberfundBtn').setVisible(true);
                                    win.down('#unsuspendamemberfundBtn').setVisible(true);
                                    win.down('#removebeneficiaryBtn').setVisible(false);
                                    win.down('#topupbeneficiaryfundBtn').setVisible(false);
                                    win.down('#thismember').setReadOnly(true);
                                    win.down('#thisvoucherfundingBox').setReadOnly(true);
                                    win.down('#totalfundvalueContainer').setVisible(false);
                                    win.down('#totalfundvaluefordisplayContainer').setVisible(true);
                                    win.down('#unallocatedfundContainer').setVisible(false);
                                    win.down('#unallocatedfundfordisplayContainer').setVisible(true);
                                    win.down('#newvouchervalueformemberContainer').setVisible(false);
                                    win.down('#newvouchervalueformemberfordisplayContainer').setVisible(true);
                                  }






                            } //success ends here

                            var values = {
                                    operation:operation,
                                    voucher_number:voucher_number,
                                    voucher_value:voucher_value,
                                    remaining_voucher_value:remaining_voucher_value,
                                    voucher_id:voucher_id,
                                    allocated_voucher_value:allocated_voucher_value,
                                    total_voucher_value_display:Ext.util.Format.number((voucher_value),'0,000.00'),
                                    remaining_voucher_value_display:Ext.util.Format.number((remaining_voucher_value),'0,000.00'),
                                    allocated_voucher_value_display:Ext.util.Format.number((allocated_voucher_value),'0,000.00'),
                                    name:name,
                                    status:record[0].get('status')
                            };

                            win.down('form').loadRecord(record[0]);
                            win.down('form').getForm().setValues(values);

                            win.show();

        				}




        			});



        }else{

           Ext.Msg.alert('Error', 'Please select an item to suspend or unsuspend');

        }



    },

    onRemoveBeneficiaryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		record = grid.getSelectionModel().getSelection();


        var voucher_win = button.up('window');
        var voucher_number = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_number]').getValue();

                                var voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_value]').getValue();

                                var remaining_voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=remaining_voucher_value]').getValue();

                                var voucher_id = voucher_win.down('#voucheridform').down('hiddenfield[name=id]').getValue();

                                var allocated_voucher_value= record[0].get('actual_voucher_share');


        if(record[0]){
            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheNameOfTheOwnerOfThisWallet',
                          params:{
                              wallet_id: record[0].get('wallet_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var name = jsonResponse.name;
                               var win = Ext.create('Cobuy.view.FundingAnotherMemberWalletWin');
                                var operation = 'remove';
                                if(operation == 'remove'){
                                    win.down('#fundamemberwalletBtn').setVisible(false);
                                    win.down('#activateamemberfundBtn').setVisible(false);
                                    win.down('#suspendamemberfundBtn').setVisible(false);
                                    win.down('#unsuspendamemberfundBtn').setVisible(false);
                                    win.down('#removebeneficiaryBtn').setVisible(true);
                                    win.down('#topupbeneficiaryfundBtn').setVisible(false);
                                    win.down('#thismember').setReadOnly(true);
                                    win.down('#thisvoucherfundingBox').setReadOnly(true);
                                    win.down('#totalfundvalueContainer').setVisible(false);
                                    win.down('#totalfundvaluefordisplayContainer').setVisible(true);
                                    win.down('#unallocatedfundContainer').setVisible(false);
                                    win.down('#unallocatedfundfordisplayContainer').setVisible(true);
                                    win.down('#newvouchervalueformemberContainer').setVisible(false);
                                    win.down('#newvouchervalueformemberfordisplayContainer').setVisible(true);
                                  }






                            } //success ends here

                            var values = {
                                    operation:operation,
                                    voucher_number:voucher_number,
                                    voucher_value:voucher_value,
                                    remaining_voucher_value:remaining_voucher_value,
                                    voucher_id:voucher_id,
                                    allocated_voucher_value:allocated_voucher_value,
                                    total_voucher_value_display:Ext.util.Format.number((voucher_value),'0,000.00'),
                                    remaining_voucher_value_display:Ext.util.Format.number((remaining_voucher_value),'0,000.00'),
                                    allocated_voucher_value_display:Ext.util.Format.number((allocated_voucher_value),'0,000.00'),
                                    name:name,
                                    status:record[0].get('status')
                            };

                            win.down('form').loadRecord(record[0]);
                            win.down('form').getForm().setValues(values);

                            win.show();

        				}




        			});


        }else{

           Ext.Msg.alert('Error', 'Please select an item to remove');
        }





    },

    onTopupBeneficiaryFundButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		record = grid.getSelectionModel().getSelection();

        var voucher_win = button.up('window');
         var voucher_number = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_number]').getValue();

                                var voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=voucher_value]').getValue();

                                var remaining_voucher_value = voucher_win.down('#voucheridform').down('hiddenfield[name=remaining_voucher_value]').getValue();

                                var voucher_id = voucher_win.down('#voucheridform').down('hiddenfield[name=id]').getValue();

                                var allocated_voucher_value= record[0].get('actual_voucher_share');

        if(record[0]){
            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheNameOfTheOwnerOfThisWallet',
                          params:{
                              wallet_id: record[0].get('wallet_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var name = jsonResponse.name;
                               var win = Ext.create('Cobuy.view.FundingAnotherMemberWalletWin');
                                var operation = 'topup';
                                if(operation == 'topup'){
                                    win.down('#fundamemberwalletBtn').setVisible(false);
                                    win.down('#activateamemberfundBtn').setVisible(false);
                                    win.down('#suspendamemberfundBtn').setVisible(false);
                                    win.down('#unsuspendamemberfundBtn').setVisible(false);
                                     win.down('#removebeneficiaryBtn').setVisible(false);
                                    win.down('#topupbeneficiaryfundBtn').setVisible(true);
                                    win.down('#newvouchervalueformemberContainer').setVisible(false);
                                     win.down('#topupvouchervalueContainer').setVisible(true);
                                    win.down('#existingvouchervalueformemberContainer').setVisible(true);
                                    win.down('#thismember').setReadOnly(true);
                                    win.down('#thisvoucherfundingBox').setReadOnly(true);
                                    win.down('#totalfundvalueContainer').setVisible(false);
                                    win.down('#totalfundvaluefordisplayContainer').setVisible(true);
                                    win.down('#unallocatedfundContainer').setVisible(false);
                                    win.down('#unallocatedfundfordisplayContainer').setVisible(true);
                                    win.down('#newvouchervalueformemberContainer').setVisible(false);
                                    win.down('#newvouchervalueformemberfordisplayContainer').setVisible(false);
                                    win.down('#existingvouchervalueformemberContainer').setVisible(true);
                                  }






                            } //success ends here

                            var values = {
                                    operation:operation,
                                    voucher_number:voucher_number,
                                    voucher_value:voucher_value,
                                    remaining_voucher_value:remaining_voucher_value,
                                    voucher_id:voucher_id,
                                    allocated_voucher_value:allocated_voucher_value,
                                    total_voucher_value_display:Ext.util.Format.number((voucher_value),'0,000.00'),
                                    remaining_voucher_value_display:Ext.util.Format.number((remaining_voucher_value),'0,000.00'),
                                    allocated_voucher_value_display:Ext.util.Format.number((allocated_voucher_value),'0,000.00'),
                                    name:name,
                                    status:record[0].get('status'),
                                    existing_voucher_value:Ext.util.Format.number((allocated_voucher_value),'0,000.00')
                            };

                            win.down('form').loadRecord(record[0]);
                            win.down('form').getForm().setValues(values);

                            win.show();

        				}




        			});



        }else{

            Ext.Msg.alert('Error', 'Please select an item to topup');
        }





    },

    onAcceptingFundingWalletsConditionCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var operation = win.down('form').down('hiddenfield[name=operation]').getValue();
        var status = win.down('form').down('hiddenfield[name=status]').getValue();

        console.log('this status is:',status);
        console.log('this operation is:',operation);


        if(newValue == 1 || newValue === true){
         if(operation =='add'){
            win.down('#termsBtn').setDisabled(false);
            win.down('#fundamemberwalletBtn').setDisabled(false);
        }else if(operation =='activate'){
             win.down('#termsBtn').setDisabled(false);
            win.down('#activateamemberfundBtn').setDisabled(false);

        }else if(operation =='suspend'){
            win.down('#termsBtn').setDisabled(false);
            if(status == 'suspend'){
                win.down('#unsuspendamemberfundBtn').setDisabled(false);
            }else if(status == 'active'){
                 win.down('#suspendamemberfundBtn').setDisabled(false);
            }else{
                win.down('#unsuspendamemberfundBtn').setDisabled(true);
                 win.down('#suspendamemberfundBtn').setDisabled(true);
            }


        }else if(operation =='remove'){
             win.down('#termsBtn').setDisabled(false);
            win.down('#removebeneficiaryBtn').setDisabled(false);
        }else if(operation == 'topup'){
              win.down('#termsBtn').setDisabled(false);
            win.down('#topupbeneficiaryfundBtn').setDisabled(false);
        }

        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#topupbeneficiaryfundBtn').setDisabled(true);
            win.down('#removebeneficiaryBtn').setDisabled(true);
            win.down('#suspendamemberfundBtn').setDisabled(true);
            win.down('#unsuspendamemberfundBtn').setDisabled(true);
            win.down('#activateamemberfundBtn').setDisabled(true);
            win.down('#activateamemberfundBtn').setDisabled(true);
            win.down('#fundamemberwalletBtn').setDisabled(true);
        }

    },

    onVoucherProductLimitersButtonClick: function(button, e, eOpts) {
        var grid = this.getAllMemberWalletGrid(),

        	record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var win = Ext.create('Cobuy.view.ViewAllTheProductsThisVoucherCanBuyWin');

            var values = {
                voucher_id:record[0].get('voucher_id')
            };

            win.down('#voucheridform').getForm().setValues(values);

            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a voucher in the wallet');
        }



    },

    onCategoryVoucherLimitersButtonClick: function(button, e, eOpts) {

        var grid = this.getAllMemberWalletGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){


            var win = Ext.create('Cobuy.view.ViewAllTheCategoriesThisVoucherCanBuyWin');

            var values = {
                voucher_id:record[0].get('voucher_id')
            };

            win.down('#voucheridform').getForm().setValues(values);

            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a voucher in the wallet');
        }








    },

    onAnalysisOnExpendableFundButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.MemberWalletAnalysisWin');

        var operation = 'expendable';

        if(operation == 'expendable'){
            win.down('#viewproductBtn').setVisible(true);
            win.down('#viewproductinthiscategoryBtn').setVisible(true);
        }else{
           win.down('#viewproductBtn').setVisible(false);
            win.down('#viewproductinthiscategoryBtn').setVisible(false);
        }

        win.setTitle('Analysis of the available funds in your wallet');

        var values = {
            operation:operation
        };

        win.down('#operationform').getForm().setValues(values);
        win.show();
    },

    onAnalysisOnSuspendedFundButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.MemberWalletAnalysisWin');

        win.setTitle('Analysis of the frozen funds in your wallet');

        var operation = 'suspended';

        var values = {
            operation:operation
        };

        win.down('#operationform').getForm().setValues(values);

        win.show();
    },

    onCreatingANewVoucherButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Voucher/creatingNewVoucherForMember',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                  var voucher_value = result.value * 100;
                                    console.log('the voucher value is:',Ext.util.Format.number((voucher_value),'0'));
                                   win.close();

                                    var values = {
                                        order_number:result.voucher_number,
                                        invoice_number:result.voucher_number,
                                        membership_number:result.membership_number,
                                        summary_amount:Ext.util.Format.number((result.value),'0,000.00'),
                                        amount:Ext.util.Format.number((voucher_value),'0'),
                                        email:result.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment to give value to this voucher");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Voucher/creatingNewVoucherForMember',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             store.load();
                                  var voucher_value = jsonResponse.value * 100;
                                    console.log('the voucher value is:',Ext.util.Format.number((voucher_value),'0'));
                                   win.close();

                                    var values = {
                                        order_number:jsonResponse.voucher_number,
                                        invoice_number:jsonResponse.voucher_number,
                                        membership_number:jsonResponse.membership_number,
                                        summary_amount:Ext.util.Format.number((jsonResponse.value),'0,000.00'),
                                        amount:Ext.util.Format.number((voucher_value),'0'),
                                        email:jsonResponse.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment to give value to this voucher");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onToppingUpAvoucherButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();



        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Voucher/toppingupthisvoucher',
                            params:{
                                id:voucher_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                  var voucher_value = result.value * 100;
                                    console.log('the voucher value is:',Ext.util.Format.number((voucher_value),'0'));
                                   win.close();

                                    var values = {
                                        order_number:result.voucher_number,
                                        invoice_number:result.voucher_number,
                                        membership_number:result.membership_number,
                                        summary_amount:Ext.util.Format.number((result.value),'0,000.00'),
                                        amount:Ext.util.Format.number((voucher_value),'0'),
                                        email:result.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment to give value to this voucher");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();



        var win = button.up('window'),
        			formPanel = win.down('form');

        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Voucher/toppingupthisvoucher',
                            params:{
                                id:voucher_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                  var voucher_value = jsonResponse.value * 100;
                                    console.log('the voucher value is:',Ext.util.Format.number((voucher_value),'0'));
                                   win.close();

                                    var values = {
                                        order_number:jsonResponse.voucher_number,
                                        invoice_number:jsonResponse.voucher_number,
                                        membership_number:jsonResponse.membership_number,
                                        summary_amount:Ext.util.Format.number((jsonResponse.value),'0,000.00'),
                                        amount:Ext.util.Format.number((voucher_value),'0'),
                                        email:jsonResponse.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment to give value to this voucher");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onMemberVoucherGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('status') == 'active'){
            win.down('#fundownwalletBtn').setDisabled(false);
             win.down('#allocateallowanceBtn').setDisabled(false);
        }else{
            win.down('#fundownwalletBtn').setDisabled(true);
             win.down('#allocateallowanceBtn').setDisabled(true);
        }
    },

    onAddCategoryToVoucherButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window');

        var category_id = win.down('#categoryBox').getValue();

        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();


        var formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Voucher/limitthisvouchertothiscategory',
                            params:{
                                voucher_id:voucher_id,
                                category_id:category_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');

                                    win.down('#vouchercategorylimiterGrid').getStore().load({
                                        params:{

                                            voucher_id:voucher_id
                                        }
                                    });
                                   // win.close();

                          } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window');

        var category_id = win.down('#categoryBox').getValue();

        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();

        var formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Voucher/limitthisvouchertothiscategory',
                            params:{
                                voucher_id:voucher_id,
                                category_id:category_id
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             win.down('#vouchercategorylimiterGrid').getStore().load({
                                        params:{

                                            voucher_id:voucher_id
                                        }
                                    });


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onVoucherLimiterWindowRender: function(component, eOpts) {
        var voucher_id = component.down('form').down('hiddenfield[name=id]').getValue();

        //load the category limiter grid

        component.down('#vouchercategorylimiterGrid').getStore().load({
            params:{
                voucher_id:voucher_id
            }
        });

        //load the product grid

        component.down('#vouherproductlimiterGrid').getStore().load({
            params:{
                voucher_id:voucher_id
            }
        });
    },

    onViewTheDetailsOfThisProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#productBox').getValue();


        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/retrieveTheIdOfThisProduct',
                            params:{
                                product_code:product_code
                            },
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							//store.load();

                                    //Ext.getCmp('productsubscriptionGrid').getStore().load();

                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id: result.product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }
                                console.log('the product id is:',result.product_id);

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                               // operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});


        							//win.close();
                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}



    },

    onAddingProductLimiterToAvoucherButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window');

        var product_code = win.down('#productBox').getValue();

        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();


        var formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Voucher/limitthisvouchertothisproduct',
                            params:{
                                voucher_id:voucher_id,
                                product_code:product_code
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');

                                    win.down('#vouherproductlimiterGrid').getStore().load({
                                        params:{

                                            voucher_id:voucher_id
                                        }
                                    });
                                   // win.close();

                          } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window');

        var product_code = win.down('#productBox').getValue();

        var voucher_id = win.down('form').down('hiddenfield[name=id]').getValue();


        var formPanel = win.down('form');

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Voucher/limitthisvouchertothisproduct',
                            params:{
                                voucher_id:voucher_id,
                                product_code:product_code
                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              win.down('#vouherproductlimiterGrid').getStore().load({
                                        params:{

                                            voucher_id:voucher_id
                                        }
                                    });


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onChangeCategoryStatusButtonClick: function(button, e, eOpts) {
        var grid = this.getAllCategoriesInVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var category_id = record[0].get('category_id');

        var voucher_id = record[0].get('voucher_id');

        var existing_status = record[0].get('status');


        Ext.Msg.show({
                         title:'Category Limiter Status Change',
                         msg: 'Are you sure you want to change the status of this category limiter on this voucher?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Voucher/changeTheStatusCategoryLimiterOfThisVoucher',
        							params:{
        								voucher_id:voucher_id,
        								category_id:category_id,
                                        existing_status:existing_status
        															},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            win.down('#vouchercategorylimiterGrid').getStore().load({
        									params:{

        											voucher_id:voucher_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });




        }else{
             Ext.Msg.alert('Error', 'Please select an item to effect the change');
        }
    },

    onRemoveCategoryFromVoucherListButtonClick: function(button, e, eOpts) {
        var grid = this.getAllCategoriesInVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var category_id = record[0].get('category_id');

        var voucher_id = record[0].get('voucher_id');



        Ext.Msg.show({
                         title:'Category Limiter Removal',
                         msg: 'Are you sure you want to remove this category limiter on this voucher?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Voucher/removeThisCategoryLimiterOfThisVoucher',
        							params:{
        								voucher_id:voucher_id,
        								category_id:category_id

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            win.down('#vouchercategorylimiterGrid').getStore().load({
        									params:{

        											voucher_id:voucher_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });




        }else{
             Ext.Msg.alert('Error', 'Please select an item to remove');
        }
    },

    onChangeTheStatusOfProductInVoucherListButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsInVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var product_id = record[0].get('product_id');

        var voucher_id = record[0].get('voucher_id');

        var existing_status = record[0].get('status');


        Ext.Msg.show({
                         title:'Product Limiter Status Change',
                         msg: 'Are you sure you want to change the status of this product limiter on this voucher?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Voucher/changeTheStatusProductLimiterOfThisVoucher',
        							params:{
        								voucher_id:voucher_id,
        								product_id:product_id,
        								existing_status:existing_status
        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            win.down('#vouherproductlimiterGrid').getStore().load({
        									params:{

        											voucher_id:voucher_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select an item to effect the change');
        }
    },

    onRemoveProductFromVoucherListButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsInVoucherGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var product_id = record[0].get('product_id');

        var voucher_id = record[0].get('voucher_id');


        Ext.Msg.show({
                         title:'Product Limiter Removal',
                         msg: 'Are you sure you want to remove this product limiter on this voucher?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Voucher/removeProductLimiterOfThisVoucher',
        							params:{
        								voucher_id:voucher_id,
        								product_id:product_id

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            win.down('#vouherproductlimiterGrid').getStore().load({
        									params:{

        											voucher_id:voucher_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select an item to remove');
        }
    },

    onFundingOnWalletTermsCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue === true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#fundwalletBtn').setDisabled(false);
        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#fundwalletBtn').setDisabled(true);
        }
    },

    onAllocatingFundsToOwnWalletButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();



        var win = button.up('window'),
        			formPanel = win.down('form');


        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/allocateFundToAWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('memberwalletGrid').getStore().load();


                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherGrid(),
        		store = grid.getStore();



        var win = button.up('window'),
        			formPanel = win.down('form');


        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Wallet/allocateFundToAWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('memberwalletGrid').getStore().load();


                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onFundingOtherMembersWalletButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/allocateFundToAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                   // Ext.getCmp('memberwalletGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Order/addingProductToCart',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                   // Ext.getCmp('memberwalletGrid').getStore().load();
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onActivatingAllocatedFundToAMemberButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/activateAllocateFundToAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Wallet/activateAllocateFundToAConnectedMemberWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });



    },

    onSuspendTheAllocatedFundToAMemberButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/suspendAllocateFundToAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Wallet/suspendAllocateFundToAConnectedMemberWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onUnsuspendTheAllocatedFundToAMemberButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/unsuspendAllocateFundToAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();
        Ext.Ajax.request({
         url: '/cobuy/index.php?r=Wallet/unsuspendAllocateFundToAConnectedMemberWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onRemoveAVoucherBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/removeAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Wallet/removeAConnectedMemberWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onTopUpBeneficiaryAllocatedValueButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Wallet/topupFundToAConnectedMemberWallet',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                   Ext.getCmp('memberwalletGrid').getStore().load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var grid = this.getAllMemberVoucherBeneficiaryGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        var voucher_id =  win.down('form').down('hiddenfield[name=voucher_id]').getValue();

        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Wallet/topupFundToAConnectedMemberWallet',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             store.load();
                                    Ext.getCmp('voucherbeneficiariesgrid').getStore().load({
                                        params:{
                                            voucher_id:voucher_id
                                        }
                                    });
                                    Ext.getCmp('membervoucherGrid').getStore().load();
                                   Ext.getCmp('memberwalletGrid').getStore().load();
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onVoucherBeneficiayWindowRender: function(component, eOpts) {
        var voucher_id = component.down('#voucheridform').down('hiddenfield[name=id]').getValue();

        //load the grid

        component.down('grid').getStore().load({
            params:{
                voucher_id:voucher_id
            }
        });
    },

    onVoucherBeneficiaryGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        if(record.get('status') == 'inactive'){
            win.down('#activatebeneficiaryfundBtn').setDisabled(false);
             win.down('#removebeneficiaryBtn').setDisabled(false);
             win.down('#topupbeneficiaryvalueBtn').setDisabled(false);
             win.down('#suspendbeneficiaryfundBtn').setDisabled(true);
        }else if(record.get('status') == 'active'){
            win.down('#suspendbeneficiaryfundBtn').setDisabled(false);
             win.down('#topupbeneficiaryvalueBtn').setDisabled(false);
             win.down('#activatebeneficiaryfundBtn').setDisabled(true);
            win.down('#removebeneficiaryBtn').setDisabled(true);
        }else if(record.get('status') == 'suspend'){
            win.down('#suspendbeneficiaryfundBtn').setDisabled(false);
            win.down('#topupbeneficiaryvalueBtn').setDisabled(false);
             win.down('#activatebeneficiaryfundBtn').setDisabled(true);
            win.down('#removebeneficiaryBtn').setDisabled(true);
        }else{
            win.down('#activatebeneficiaryfundBtn').setDisabled(true);
             win.down('#removebeneficiaryBtn').setDisabled(true);
             win.down('#topupbeneficiaryvalueBtn').setDisabled(true);
            win.down('#suspendbeneficiaryfundBtn').setDisabled(true);
        }
    },

    onViewingVoucherProductLimitersWindowRender: function(component, eOpts) {
        var voucher_id = component.down('#voucheridform').down('hiddenfield[name=voucher_id]').getValue();

        component.down('grid').getStore().load({
            params:{
                voucher_id:voucher_id
            }
        });
    },

    onViewingCategoriesThatLimitedAVoucherWindowRender: function(component, eOpts) {
        var voucher_id = component.down('#voucheridform').down('hiddenfield[name=voucher_id]').getValue();

        component.down('grid').getStore().load({
            params:{
                voucher_id:voucher_id
            }
        });
    },

    onViewingAProductForAVoucherLimiterButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsVoucherFundCanBuyGrid(),
        	record = grid.getSelectionModel().getSelection();

        if(record[0]){
            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('product_id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'voucher',
                                operation_detail:'voucher',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});



        }else{
             Ext.Msg.alert('Error', 'Please select a product in the voucher');
        }
    },

    onViewCategoryVoucherLimitersButtonClick: function(button, e, eOpts) {
        var grid = this.getAllCategoriesAVoucherFundCouldBeUsedForGrid(),

        	record = grid.getSelectionModel().getSelection();

        if(record[0]){
            var win = Ext.create('Cobuy.view.ProductsInACategoryWin');
            var values = {
                category_id:record[0].get('category_id')
            };
            win.down('#categoryidform').getForm().setValues(values);

            win.show();

        }else{
             Ext.Msg.alert('Error', 'Please select a category in the voucher');
        }
    },

    onViewingProductInCategoryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsInACategoryGrid(),
        	record = grid.getSelectionModel().getSelection();

        if(record[0]){
            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                              product_id: record[0].get('id')
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }

                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_quotable = jsonResponse.product.is_quotable;
                                 var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var code = jsonResponse.product.code;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                var video_for = jsonResponse.product.video_for;
                               var is_with_video = jsonResponse.product.is_with_video;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'voucher',
                                operation_detail:'voucher',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_quotable:is_quotable,
                                is_future_tradable:is_future_tradable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for

                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});



        }else{
             Ext.Msg.alert('Error', 'Please select a product in the voucher');
        }
    },

    onProductsInCategoryWindowRender: function(component, eOpts) {
        var category_id = component.down('#categoryidform').down('hiddenfield[name=category_id]').getValue();

        component.down('grid').getStore().load({
            params:{
                category_id:category_id
            }
        });
    },

    onMemberWalletAnalysisWindowRender: function(component, eOpts) {
        var operation = component.down('#operationform').down('hiddenfield[name=operation]').getValue();

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheAnalysisOfThisWallet',
                          params:{
                              operation:operation
                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var available_usable_fund = jsonResponse.available_usable_fund;
                                var available_funds_for_future = jsonResponse.available_funds_for_future;

                                console.log('the available usable fund is:',available_usable_fund);
                                console.log('the available_funds_for_future fund is:',available_funds_for_future);



                            } //success ends here

                            var values = {

                                available_usable_fund:Ext.util.Format.number(available_usable_fund,'0,000.00'),
                                available_funds_for_future:Ext.util.Format.number(available_funds_for_future,'0,000.00')


                            };

                                //load the form
                           //win.down('form').loadRecord(record[0]);

                            component.down('form').getForm().setValues(values);

                            component.show();
        				}




        			});

        //load the grids

        component.down('#productlimiterGrid').getStore().load({
            params:{
                operation:operation
            }
        });

        component.down('#categorylimiterGrid').getStore().load({
            params:{
                operation:operation
            }
        });


    },

    onRefreshingAvailableBalanceInTheWalletButtonClick: function(button, e, eOpts) {
        var win = button.up('memberaccountdetailwin');

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheTotalAvailableAndSuspendedValuesInTheWallet',

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var wallet_available_value = jsonResponse.wallet_available_value;
                                var wallet_suspended_value = jsonResponse.wallet_suspended_value;
                                var wallet_total_value = jsonResponse.wallet_total_value;

                            } //success ends here

                            var values = {

                                wallet_available_value:Ext.util.Format.number(wallet_available_value,'0,000.00'),
                                wallet_suspended_value:Ext.util.Format.number(wallet_suspended_value,'0,000.00'),
                                wallet_total_value:Ext.util.Format.number(wallet_total_value,'0,000.00')


                            };

                                //load the form
                           //win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onRefreshingSuspendedBalanceInTheWalletButtonClick: function(button, e, eOpts) {
        var win = button.up('memberaccountdetailwin');

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Wallet/getTheTotalAvailableAndSuspendedValuesInTheWallet',

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var wallet_available_value = jsonResponse.wallet_available_value;
                                var wallet_suspended_value = jsonResponse.wallet_suspended_value;
                                var wallet_total_value = jsonResponse.wallet_total_value;

                            } //success ends here

                            var values = {

                                wallet_available_value:Ext.util.Format.number(wallet_available_value,'0,000.00'),
                                wallet_suspended_value:Ext.util.Format.number(wallet_suspended_value,'0,000.00'),
                                wallet_total_value:Ext.util.Format.number(wallet_total_value,'0,000.00')


                            };

                                //load the form
                           //win.down('form').loadRecord(record[0]);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});
    },

    onCreatingNewCustomHampersButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/creatingOwnHamper',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Product/creatingOwnHamper',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                             store.load();
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onEditingTheHampersInfoButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOwnHampersGrid(),
        		record = grid.getSelectionModel().getSelection();

        var operation = 'edit';

        if(record[0]){

            var win = Ext.create('Cobuy.view.CreateNewHampersWin');

            var form = win.down('form');
            var values = {
                operation:operation,
                id:record[0].get('id')
            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);
            win.show();
        }else{
           Ext.Msg.alert('Error', 'Please select a hamper to edit');
        }



    },

    onCreateNewHamperWindowRender: function(component, eOpts) {

        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        if(operation =='edit'){
            component.down('#editBtn').setVisible(true);
            component.down('#viewBtn').setVisible(true);
            component.down('#createBtn').setVisible(false);
        }else{
            component.down('#editBtn').setVisible(false);
            component.down('#viewBtn').setVisible(false);
            component.down('#createBtn').setVisible(true);
        }
    },

    onEditingMemberHamperButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/editingOwnHamper',

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
        			formPanel = win.down('form');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/editingOwnHamper',
           params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onDeleteHampersButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOwnHampersGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var hamper_id = record[0].get('id');


        Ext.Msg.show({
                         title:'Hamper Removal',
                         msg: 'Are you sure you want to remove this hamper?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Product/removingHamper',
        							params:{
                                        hamper_id:hamper_id

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select a hamper to remove');
        }
    },

    onHamperDeliveryManagerButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOwnHampersGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var win = Ext.create('Cobuy.view.HamperDeliveryManagerWin');
            var values = {
                hamper_id:record[0].get('id'),
                hamper_label:record[0].get('name')
            };

            win.down('form').getForm().setValues(values);
            win.show();


        }else{
            Ext.Msg.alert('Error', 'Please select a hamper to manage its delivery');
        }


    },

    onAddingANewConnectedMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        var delivery_win = button.up('window');

        var hamper_id = delivery_win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var hamper_label = delivery_win.down('form').down('hiddenfield[name=hamper_label]').getValue();

        var operation = 'add';


        var win = Ext.create('Cobuy.view.AddingNewConnectedMemberBeneficiaryWin');
        var values = {
            hamper_id:hamper_id,
            hamper_label:hamper_label,
            operation:operation
        };

        win.down('form').getForm().setValues(values);

        win.show();
    },

    onRegisteredAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#deliveryaddresscontainer').setDisabled(true);
        }else{
            win.down('#deliveryaddresscontainer').setDisabled(false);
        }
    },

    onNonRegisteredAddressRadiofieldChange1: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#deliveryaddresscontainer').setDisabled(false);
        }else{
            win.down('#deliveryaddresscontainer').setDisabled(true);
        }
    },

    onEditingConnectedMembersInfoButtonClick: function(button, e, eOpts) {
        var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var hamper_label = button.up('window').down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();

        if(record[0]){


            var win = Ext.create('Cobuy.view.AddingNewConnectedMemberBeneficiaryWin');

             var form = win.down('form');
            if(record[0].get('hamper_container_id')>0){
                var hamper_container_id = record[0].get('hamper_container_id');
            }else{
                var hamper_container_id = "";
            }

            var values = {
                hamper_label:hamper_label,
                connected_member_beneficiary:record[0].get('beneficiary_id'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                address: record[0].get('place_of_delivery'),
                hamper_container_id:hamper_container_id


            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);
            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to edit');
        }




    },

    onRemovingConnectedMembersFromBeneficiaryListButtonClick: function(button, e, eOpts) {
        var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var hamper_id = record[0].get('hamper_id');

        var beneficiary_id = record[0].get('beneficiary_id');

        var hamper_label = win.down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();


        Ext.Msg.show({
                         title:'Remove Hamper Beneficiary',
                         msg: 'Are you sure you want to remove this hamper beneficiary?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Product/removeThisHamperBeneficiary',
        							params:{
        								hamper_id:hamper_id,
        								beneficiary_id:beneficiary_id,
                                        hamper_label:hamper_label

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load({
        									params:{

        											hamper_id:hamper_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select a hamper beneficiary item to remove');
        }
    },

    onConnectedMembersDeliveryReportButtonClick: function(button, e, eOpts) {
        var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var hamper_label = button.up('window').down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();

        if(record[0]){


            var win = Ext.create('Cobuy.view.HamperMemberDeliveryReportWin');

             var form = win.down('form');

            if(record[0].get('status') == 'returned'){
                win.down('#returnContainer').setVisible(true);
                win.down('#deliveryContainer').setVisible(false);
            }else{
                win.down('#returnContainer').setVisible(false);
                win.down('#deliveryContainer').setVisible(true);
            }

            var values = {
                hamper_label:hamper_label,
                connected_member_beneficiary:record[0].get('beneficiary_id'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                place_of_delivery: record[0].get('place_of_delivery'),
                status:record[0].get('status'),
                number_of_hampers_delivered:record[0].get('number_of_hampers_delivered'),
                courier_delivery_comment:record[0].get('courier_delivery_comment'),
                courier_delivery_return_comment:record[0].get('courier_delivery_comment'),
                beneficiary_delivery_comment:record[0].get('beneficiary_delivery_comment'),
                reason_for_hamper_return:record[0].get('reason_for_hamper_return'),
                date_hamper_was_delivered:record[0].get('date_hamper_was_delivered'),
                date_hamper_was_returned:record[0].get('date_hamper_was_returned'),
                delivery_was_made_to:record[0].get('beneficiary_id'),
                hamper_was_delivered_by:record[0].get('hamper_was_delivered_by'),
                hamper_was_returned_by:record[0].get('hamper_was_returned_by'),
                name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper'),
                actual_beneficiary:record[0].get('beneficiary_id'),
                the_name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper')


            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);
            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to view delivery report');
        }


    },

    onAddingNonConnectedMembersAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        var delivery_win = button.up('window');

        var hamper_id = delivery_win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var hamper_label = delivery_win.down('form').down('hiddenfield[name=hamper_label]').getValue();

        var operation = 'add';


        var win = Ext.create('Cobuy.view.AddlingNewNonConnectedMemberBeneficiaryWin');

        var values = {
            hamper_id:hamper_id,
            hamper_label:hamper_label,
            operation:operation
        };

        win.down('form').getForm().setValues(values);

        win.show();
    },

    onEditingNonConnectedMemberHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var hamper_label = button.up('window').down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();

        if(record[0]){


            var win = Ext.create('Cobuy.view.AddlingNewNonConnectedMemberBeneficiaryWin');

            var form = win.down('form');

            if(record[0].get('hamper_container_id')>0){
                var hamper_container_id = record[0].get('hamper_container_id');
            }else{
                var hamper_container_id = "";
            }


            var values = {
                hamper_label:hamper_label,
                non_connected_beneficiary:record[0].get('beneficiary_id'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                address: record[0].get('place_of_delivery'),
                beneficiary_id:record[0].get('beneficiary_id'),
                hamper_container_id:hamper_container_id


            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);

            win.down('#memberBtn').setVisible(false);

            win.down('#nonconnectedBeneficiary').setFieldLabel('Beneficiary');

            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to edit');
        }







    },

    onRemovingNonConnectedMemeberFromHamperBeneficiaryListButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var hamper_id = record[0].get('hamper_id');

        var beneficiary_id = record[0].get('beneficiary_id');

        var hamper_label = win.down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();


        Ext.Msg.show({
                         title:'Remove Hamper Beneficiary',
                         msg: 'Are you sure you want to remove this hamper beneficiary?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Product/removeThisHamperBeneficiary',
        							params:{
        								hamper_id:hamper_id,
        								beneficiary_id:beneficiary_id,
                                        hamper_label:hamper_label

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load({
        									params:{

        											hamper_id:hamper_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select a hamper beneficiary item to remove');
        }
    },

    onNonConnectedMemberDeliveryReportButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var hamper_label = button.up('window').down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();

        if(record[0]){


            var win = Ext.create('Cobuy.view.HamperMemberDeliveryReportWin');

             var form = win.down('form');

            if(record[0].get('status') == 'returned'){
                win.down('#returnContainer').setVisible(true);
                win.down('#deliveryContainer').setVisible(false);
            }else{
                win.down('#returnContainer').setVisible(false);
                win.down('#deliveryContainer').setVisible(true);
            }

            var values = {
                hamper_label:hamper_label,
                connected_member_beneficiary:record[0].get('beneficiary_id'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                place_of_delivery: record[0].get('place_of_delivery'),
                status:record[0].get('status'),
                number_of_hampers_delivered:record[0].get('number_of_hampers_delivered'),
                courier_delivery_comment:record[0].get('courier_delivery_comment'),
                beneficiary_delivery_comment:record[0].get('beneficiary_delivery_comment'),
                courier_delivery_return_comment:record[0].get('courier_delivery_comment'),
                reason_for_hamper_return:record[0].get('reason_for_hamper_return'),
                date_hamper_was_delivered:record[0].get('date_hamper_was_delivered'),
                date_hamper_was_returned:record[0].get('date_hamper_was_returned'),
                delivery_was_made_to:record[0].get('beneficiary_id'),
                hamper_was_delivered_by:record[0].get('hamper_was_delivered_by'),
                hamper_was_returned_by:record[0].get('hamper_was_returned_by'),
                name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper'),
                actual_beneficiary:record[0].get('beneficiary_id'),
                the_name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper')



            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);
            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to view delivery report');
        }


    },

    onAddingANonMemberHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        var delivery_win = button.up('window');

        var hamper_id = delivery_win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var hamper_label = delivery_win.down('form').down('hiddenfield[name=hamper_label]').getValue();

        var operation = 'add';


        var win = Ext.create('Cobuy.view.AddingANonMemberBeneficiaryWin');
        var values = {
            hamper_id:hamper_id,
            hamper_label:hamper_label,
            operation:operation
        };

        win.down('form').getForm().setValues(values);

        win.show();
    },

    onEditingANonMemberHamperButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){


            var win = Ext.create('Cobuy.view.AddingANonMemberBeneficiaryWin');
            var form = win.down('form');

            if(record[0].get('hamper_container_id')>0){
                var hamper_container_id = record[0].get('hamper_container_id');
            }else{
                var hamper_container_id = "";
            }

            var values = {
                hamper_label:record[0].get('hamper_label'),
                non_member_beneficiary:record[0].get('beneficiary'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                address: record[0].get('place_of_delivery'),
                id:record[0].get('id'),
                hamper_container_id:hamper_container_id


            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);

            form.loadRecord(record[0]);

            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to edit');
        }



    },

    onRemovingANonMemberAsBeneficiaryButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

        var win = button.up('window');

        var hamper_id = record[0].get('hamper_id');

        var beneficiary = record[0].get('beneficiary');

        var hamper_label = record[0].get('hamper_label');

        var id = record[0].get('id');



        Ext.Msg.show({
                         title:'Remove Hamper Beneficiary',
                         msg: 'Are you sure you want to remove this hamper beneficiary?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=HamperHasNonMemberBeneficiary/removeThisHamperBeneficiary',
        							params:{
        								hamper_id:hamper_id,
        								beneficiary:beneficiary,
                                        hamper_label:hamper_label,
                                        id:id

        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load({
        									params:{

        											hamper_id:hamper_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });



        }else{
             Ext.Msg.alert('Error', 'Please select a hamper beneficiary item to remove');
        }
    },

    onNonMemberDeliveryReportButtonClick: function(button, e, eOpts) {
        var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();


        if(record[0]){


            var win = Ext.create('Cobuy.view.HamperMemberDeliveryReportWin');

             var form = win.down('form');

            if(record[0].get('status') == 'returned'){
                win.down('#returnContainer').setVisible(true);
                win.down('#deliveryContainer').setVisible(false);
            }else{
                win.down('#returnContainer').setVisible(false);
                win.down('#deliveryContainer').setVisible(true);
            }

            var values = {
                hamper_label:record[0].get('hamper_label'),
                connected_member_beneficiary:record[0].get('beneficiary_id'),
                city:record[0].get('city_id'),
                state:record[0].get('state_id'),
                country:record[0].get('country_id'),
                place_of_delivery: record[0].get('place_of_delivery'),
                status:record[0].get('status'),
                number_of_hampers_delivered:record[0].get('number_of_hampers_delivered'),
                courier_delivery_comment:record[0].get('courier_delivery_comment'),
                courier_delivery_return_comment:record[0].get('courier_delivery_comment'),
                beneficiary_delivery_comment:record[0].get('beneficiary_delivery_comment'),
                reason_for_hamper_return:record[0].get('reason_for_hamper_return'),
                date_hamper_was_delivered:record[0].get('date_hamper_was_delivered'),
                date_hamper_was_returned:record[0].get('date_hamper_was_returned'),
                delivery_was_made_to:record[0].get('beneficiary'),
                hamper_was_delivered_by:record[0].get('hamper_was_delivered_by'),
                hamper_was_returned_by:record[0].get('hamper_was_returned_by'),
                name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper'),
                actual_beneficiary:record[0].get('beneficiary'),
                the_name_of_actual_receiver_of_the_hamper:record[0].get('name_of_actual_receiver_of_the_hamper')


            };

            form.loadRecord(record[0]);
            form.getForm().setValues(values);
            win.show();

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper beneficiary to view delivery report');
        }


    },

    onHamperDeliveryManagerWindowRender: function(component, eOpts) {
        //get both the hamper id and hamper label

        var hamper_id = component.down('#hamperform').down('hiddenfield[name=hamper_id]').getValue();

        var hamper_label = component.down('#hamperform').down('hiddenfield[name=hamper_label]').getValue();

        console.log('the hamper id is:',hamper_id);

        console.log('the hamper label is:',hamper_label);

        //load the connected beneficiaries grid

        component.down('#hamperconnectedmemberbeneficiarygrid').getStore().load({
            params:{
                hamper_id:hamper_id
            }
        });

        //load the non connected beneficiaries grid

        component.down('#hampersfornonconnetedmembersgrid').getStore().load({
            params:{
                hamper_id:hamper_id
            }
        });

        //load the non memeber beneficiaries grid

        component.down('#hampersfornonmembersgrid').getStore().load({
            params:{
                hamper_id:hamper_id
            }
        });

        component.setTitle(hamper_label + ' ' + ' ' + "Hamper Beneficiary Manager");



    },

    onAddingNewConnectedMemberHamperBeneficiaryWindowRender: function(component, eOpts) {
        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        if(operation =='add'){
            component.down('#addconnectedbeneficiaryBtn').setVisible(true);
            component.down('#editconnectedbeneficiaryBtn').setVisible(false);
            component.setTitle("Adding New Hamper Beneficiary");
        }else{
           component.down('#editconnectedbeneficiaryBtn').setVisible(true);
           component.down('#addconnectedbeneficiaryBtn').setVisible(false);
            component.setTitle("Editing Hamper Beneficiary Info");
        }

    },

    onAddingNonConnectedMemberAsHamperBeneficiaryWindowRender: function(component, eOpts) {
        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        if(operation =='add'){
            component.down('#addnonconnectedbeneficiaryBtn').setVisible(true);
            component.down('#editnonconnectedbeneficiaryBtn').setVisible(false);
            component.setTitle("Adding New Hamper Beneficiary");
        }else{
           component.down('#addnonconnectedbeneficiaryBtn').setVisible(false);
           component.down('#editnonconnectedbeneficiaryBtn').setVisible(true);
            component.setTitle("Editing Hamper Beneficiary Info");
        }
    },

    onAddingANonMemberAsHamperBeneficiaryWindowRender: function(component, eOpts) {
        var operation = component.down('form').down('hiddenfield[name=operation]').getValue();

        if(operation =='add'){
            component.down('#addnonmemberbeneficiaryBtn').setVisible(true);
            component.down('#editnonmemberbeneficiaryBtn').setVisible(false);
            component.setTitle("Adding New Hamper Beneficiary");
        }else{
           component.down('#addnonmemberbeneficiaryBtn').setVisible(false);
           component.down('#editnonmemberbeneficiaryBtn').setVisible(true);
            component.setTitle("Editing Hamper Beneficiary Info");
        }
    },

    onSaveTheAdditionOfAConnectedMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/addingAConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();
        Ext.Ajax.request({
          url: '/cobuy/index.php?r=Product/addingAConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                               store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveTheEdittedInfoOfConnectedMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/updateAConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllConnectedMembersHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/updateAConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveTheAdditionOfNonConnectedMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/addANonConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/addANonConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },


                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveTheEdittedInfoOfNonConnectedmemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/updateANonConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllNonConnectedMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/updateANonConnectedMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },


                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveTheAdditionOfNonMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=HamperHasNonMemberBeneficiary/addANonMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=HamperHasNonMemberBeneficiary/addANonMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },


                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();



                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onSaveTheEdittedInfoOfNonMemberAsHamperBeneficiaryButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=HamperHasNonMemberBeneficiary/updateANonMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var grid = this.getAllNonMemberHamperBeneficiariesGrid(),
        		record = grid.getSelectionModel().getSelection();

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = record[0].get('hamper_id');

        Ext.Ajax.request({
            url: '/cobuy/index.php?r=HamperHasNonMemberBeneficiary/updateANonMemberAsHamperBeneficiary',
                            params:{
                                hamper_id:hamper_id
                            },


                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                               grid.getStore().load({
                                        params:{
                                            hamper_id:hamper_id
                                        }
                                    });
                                    win.close();




                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onAddingAndEditingHamperContentButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOwnHampersGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var win = Ext.create('Cobuy.view.AddingProductsToHamperWin');
            var form = win.down('form');

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/getExtraInformationAboutAHamper',
                        params:{
                                hamper_id:record[0].get('id')
                         },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var total_hamper_cost = jsonResponse.total_hamper_cost;


                            } //success ends here

                            var values = {
                                 hamper_label:record[0].get('name'),
                                 hamper_id:record[0].get('id'),
                                cost_of_hamper:Ext.util.Format.number(total_hamper_cost,'0,000.00')
                               };
                            form.getForm().setValues(values);

                            //load the hamper dataview

                            win.down('#hamperDataview').getStore().load({
                                params:{
                                    hamper_id:record[0].get('id')
                                    }
                            });

                            win.show();
        				}



        });





        }else{
            Ext.Msg.alert('Error', 'Please select a hamper to add or edit its content');
        }




    },

    onSelectingAProductForhamperDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        var values = {
            add_product_name:record.get('name'),
            add_product_id:record.get('id')
        };

        win.down('form').getForm().setValues(values);
    },

    onAddingAProductToHamperButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=add_product_id]').getValue();

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var quantity = win.down('form').down('numberfield[name=product_quantity]').getValue();


        Ext.Msg.show({
                         title:'Adding Product to Hamper',
                         msg: 'Are you sure you want to add this product to this hamper?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Product/addingAProductToHamper',
        							params:{
        								product_id:product_id,
        								hamper_id:hamper_id,
                                        quantity:quantity


        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            var values = {
                                                cost_of_hamper:Ext.util.Format.number(result.price,'0,000.00')
                                            };
                                            win.down('form').getForm().setValues(values);
                                            win.down('#hamperDataview').getStore().load({
        									params:{

        											hamper_id:hamper_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });
    },

    onSelectingAProductInTheHamperDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        var values = {
            remove_product_name:record.get('name'),
            remove_product_id:record.get('id')
        };

        win.down('form').getForm().setValues(values);
    },

    onRemovingProductFromHamperButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var product_id = win.down('form').down('hiddenfield[name=remove_product_id]').getValue();

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();



        Ext.Msg.show({
                         title:'Remove Product from Hamper',
                         msg: 'Are you sure you want to remove this product from this hamper?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                   url: '/cobuy/index.php?r=Product/removingAProductFromHamper',
        							params:{
        								product_id:product_id,
        								hamper_id:hamper_id


        							},
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            var values = {
                                                cost_of_hamper:Ext.util.Format.number(result.price,'0,000.00')
                                            };
                                            win.down('form').getForm().setValues(values);
                                            win.down('#hamperDataview').getStore().load({
        									params:{

        											hamper_id:hamper_id
        										}
        									});

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });
    },

    onKnowmoreAboutThisProductDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        var form = win.down('form');

                     Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id: record.get('id')

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}


                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                               // operation_detail:'knowmore',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});




    },

    onKnowmoreAboutTheProductTheHamperDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = dataview.up('window');

        var form = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

                     Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrievethedetailofproductinhamper',
                          params:{
                             product_id: record.get('id'),
                              hamper_id: hamper_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var product_quantity_in_hamper = jsonResponse.quantity_in_hamper;
                                var product_cost_in_hamper = product_quantity_in_hamper * prevailing_retail_selling_price;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_a_hamper = jsonResponse.product.is_a_hamper;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');
                                }
                                console.log('tis product id is:',id);
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/


                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}




                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                               operation_detail:'hamper',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                product_quantity_in_the_hamper:product_quantity_in_hamper,
                                hamper_product_amount:Ext.util.Format.number(product_cost_in_hamper,'0,000.00'),
                                is_store_hamper_content:0,
                                hamper_id:hamper_id,
                                is_a_hamper:is_a_hamper,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});




    },

    onSearchingProductsForHamperButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var service = win.down('#serviceCombo').getValue();

        var category = win.down('#productCategoryCombo').getValue();

        var searchstring  = win.down('#searchCombo').getValue();


        //load the database

        var dataview = win.down('#productDataview');

        dataview.getStore().load({
            params:{
                service:service,
                category:category,
                searchstring:searchstring
            }
        });
    },

    onSearchingProductForHamperComboboxSpecialkey: function(field, e, eOpts) {
        var win = field.up('window');

        var service = win.down('#serviceCombo').getValue();

        var category = win.down('#productCategoryCombo').getValue();

        var searchstring  = win.down('#searchCombo').getValue();


        //load the database

        var dataview = win.down('#productDataview');

        if(e.getKey() == e.ENTER){

            dataview.getStore().load({
            params:{
                service:service,
                category:category,
                searchstring:searchstring
            }
        });



        }

    },

    onSendingHamperToCartButtonClick: function(button, e, eOpts) {

        var grid = this.getAllOwnHampersGrid(),
        		record = grid.getSelectionModel().getSelection();


        if(record[0]){
             var win = Ext.create('Cobuy.view.HamperCartWin');

             var form = win.down('form');

            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/getInformationAboutAHamperForCart',
                        params:{
                            hamper_id:record[0].get('id')
                        },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var total_beneficiary_number = jsonResponse.total_beneficiary_number;
                                var total_number_of_items_for_delivery = jsonResponse.total_number_of_items_for_delivery;
                                var cost_per_hamper = jsonResponse.cost_per_hamper;
                                var average_cost_of_hamper_delivery = jsonResponse.average_cost_of_hamper_delivery;
                                var total_cost_of_hamper = jsonResponse.total_cost_of_hamper;
                                var total_cost_of_delivery = jsonResponse.total_cost_of_delivery;
                                var terms_and_conditions = jsonResponse.terms_and_conditions;

                            } //success ends here
                         var values = {
                             hamper_label:record[0].get('name'),
                            hamper_id: record[0].get('id'),
                             total_beneficiary_number:total_beneficiary_number,
                             total_number_of_items_for_delivery:total_number_of_items_for_delivery,
                             cost_per_hamper:Ext.util.Format.number(cost_per_hamper,'0,000.00'),
                             average_cost_of_hamper_delivery:Ext.util.Format.number(average_cost_of_hamper_delivery,'0,000.00'),
                             total_cost_of_hamper:Ext.util.Format.number(total_cost_of_hamper,'0,000.00'),
                             total_cost_of_delivery:Ext.util.Format.number(total_cost_of_delivery,'0,000.00'),
                             terms_and_conditions:terms_and_conditions,
                             cost_per_hamper_for_computation:cost_per_hamper

                        };

                        form.loadRecord(record[0]);
                        form.getForm().setValues(values);
                        win.show();
                }




        			});



        }else{
           Ext.Msg.alert('Error', 'Please select a hamper for the cart ');
        }


    },

    onHamperCartTermsAndConditionsCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#sendhampertocartBtn').setDisabled(false);

        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#sendhampertocartBtn').setDisabled(true);
        }
    },

    onSendThisHamperToCartButtonClick: function(button, e, eOpts) {
        /**var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        //var hamper_id = record[0].get('id');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=order/addingThisHamperToCart',

                            //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
                                    store.load();
                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var grid = this.getAllOwnHampersGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=order/addingThisHamperToCart',
            params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                               store.load();
                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });
    },

    onRedirectingTheDeliveryOfHamperButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOthersHamperSentToMemberGrid(),
            record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var win = Ext.create('Cobuy.view.HamperRedirectionWin');
            var form = win.down('form');



            Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/getInformationAboutAHamper',
                        params:{
                            hamper_id:record[0].get('hamper_id')
                        },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var hamper_label = jsonResponse.hamper_label;


                            } //success ends here
                         var values = {
                         city:record[0].get('city_id'),
                         state:record[0].get('state_id'),
                         country:record[0].get('country_id'),
                         place_of_delivery:record[0].get('place_of_delivery'),
                         delivery_address_option:1,
                         hamper_id:record[0].get('hamper_id'),
                         beneficiary_id:record[0].get('beneficiary_id'),
                         hamper_label:hamper_label,
                         place_of_delivery:record[0].get('place_of_delivery')
                    };
                    form.loadRecord(record[0]);
                    form.getForm().setValues(values);

                    win.show();
                }




         });

        }else{
           Ext.Msg.alert('Error', 'Please select a hamper to redirect');
        }



    },

    onRedirectHamperTermsAndConditionsCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#termsBtn').setDisabled(false);
            win.down('#redirecthamperdeliveryBtn').setDisabled(false);
        }else{
            win.down('#termsBtn').setDisabled(true);
            win.down('#redirecthamperdeliveryBtn').setDisabled(true);
        }
    },

    onScheduledDeliveryAddressCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#newaddressestochoosefromContainer').setDisabled(true);
            win.down('#thisscheduledaddressContainer').setDisabled(false);
        }else{
             win.down('#newaddressestochoosefromContainer').setDisabled(false);
             win.down('#thisscheduledaddressContainer').setDisabled(true);
        }
    },

    onPrimaryAddressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#deliveryaddresscontainer').setDisabled(true);
            //win.down('#delivertoregisterprimaryaddressContainer').setDisabled(false);
            //win.down('#scheduledeliveryaddressContainer').setDisabled(true);

        }else{
            win.down('#deliveryaddresscontainer').setDisabled(false);
           // win.down('#delivertoregisterprimaryaddressContainer').setDisabled(true);
           // win.down('#scheduledeliveryaddressContainer').setDisabled(true);
        }
    },

    onNewPreferrableAdressRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#deliveryaddresscontainer').setDisabled(false);
           // win.down('#delivertoregisterprimaryaddressContainer').setDisabled(true);
           // win.down('#scheduledeliveryaddressContainer').setDisabled(true);

        }else{
            win.down('#deliveryaddresscontainer').setDisabled(true);
           // win.down('#delivertoregisterprimaryaddressContainer').setDisabled(false);
           // win.down('#scheduledeliveryaddressContainer').setDisabled(true);
        }
    },

    onRedirectingThisHamperDeliveryButtonClick: function(button, e, eOpts) {


        /**var grid = this.getAllOthersHamperSentToMemberGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        //var hamper_id = record[0].get('id');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=order/redirectingThisHamperToPreferredLocation',

                            //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							//Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							store.load();

                                   if(result.value != 0){
                                        var invoice_value = result.value * 100;
                                    console.log('the redirection value is:',Ext.util.Format.number((invoice_value),'0'));

                                    console.log('the invoice number is:',result.invoice_number);
                                   win.close();

                                    var values = {
                                        order_number:result.invoice_number,
                                        invoice_number:result.invoice_number,
                                       // membership_number:result.membership_number,
                                        summary_amount:Ext.util.Format.number((result.value),'0,000.00'),
                                        amount:Ext.util.Format.number((invoice_value),'0')
                                        //email:result.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment for hamper delivery address redirection");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();

                                   }else{
                                        win.close();
                                        Ext.Msg.alert('Success!', result.msg);
                                    }


                                } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var grid = this.getAllOthersHamperSentToMemberGrid(),
        		store = grid.getStore();

        var win = button.up('window'),
            formPanel = win.down('form');

        Ext.Ajax.request({
           url: '/cobuy/index.php?r=order/redirectingThisHamperToPreferredLocation',
            params: formPanel.getForm().getFieldValues(),
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              store.load();

                                   if(jsonResponse.value != 0){
                                        var invoice_value = jsonResponse.value * 100;
                                    console.log('the redirection value is:',Ext.util.Format.number((invoice_value),'0'));

                                    console.log('the invoice number is:',jsonResponse.invoice_number);
                                   win.close();

                                    var values = {
                                        order_number:jsonResponse.invoice_number,
                                        invoice_number:result.invoice_number,
                                       // membership_number:result.membership_number,
                                        summary_amount:Ext.util.Format.number((jsonResponse.value),'0,000.00'),
                                        amount:Ext.util.Format.number((invoice_value),'0')
                                        //email:result.email
                                    };
                                    //load the mainviewport collectible form
                                    Ext.getCmp('mainviewport').down('#collectible').getForm().setValues(values);

                                    var summary_win = Ext.create('Cobuy.view.PaymentSummaryWin');
                                    summary_win.setTitle("Make payment for hamper delivery address redirection");

                                    var summary_form = summary_win.down('#summaryform');

                                    var amount= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=summary_amount]').getValue();
                                    var invoice_number= Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=invoice_number]').getValue();
                                    var order_number=Ext.getCmp('mainviewport').down('#collectible').down('hiddenfield[name=order_number]').getValue();

                                    var summary_values = {
                                        order_number:order_number,
                                        invoice_number:invoice_number,
                                        amount:amount

                                    };
                                    //load the form

                                    summary_win.down('#summaryform').getForm().setValues(summary_values);
                                    Ext.getCmp('memberaccountdetailwin').destroy();
                                    summary_win.show();

                                   }else{
                                        win.close();
                                        Ext.Msg.alert('Success!', jsonResponse.msg);
                                    }
                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onViewingContentsInAHamperButtonClick: function(button, e, eOpts) {
        var hamper_id = button.up('window').down('form').down('hiddenfield[name=hamper_id]').getValue();
        var hamper_label = button.up('window').down('form').down('textfield[name=hamper_label]').getValue();
        var win = Ext.create('Cobuy.view.ContentsOfHamperWin');

        var values = {
            hamper_id:hamper_id
        };

        win.down('form').getForm().setValues(values);

        win.setTitle(hamper_label + " "+ "hamper contents");

        win.show();
    },

    onContentsInHamperWindowRender: function(component, eOpts) {
        var hamper_id = component.down('form').down('hiddenfield[name=hamper_id]').getValue();


        //load the dataview

        component.down('dataview').getStore().load({
            params:{
                hamper_id:hamper_id
            }
        });
    },

    onHamperContentDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var wwin = dataview.up('window');

        var hamper_id = wwin.down('form').down('hiddenfield[name=hamper_id]').getValue();


        //var form = wwin.down('form');

                     Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrievethedetailofproductinhamper',
                          params:{
                             product_id: record.get('id'),
                              hamper_id: hamper_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.HamperContentDetailsWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.HamperProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var product_quantity_in_hamper = jsonResponse.quantity_in_hamper;
                                var product_cost_in_hamper = product_quantity_in_hamper * prevailing_retail_selling_price;
                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                var is_a_hamper = jsonResponse.product.is_a_hamper;
                                var is_with_video = jsonResponse.product.is_with_video;
                                var video_for = jsonResponse.product.video_for;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');
                                }

                                if(is_with_video == 1 && is_with_video == true){
                                    win.down('#productVideoContainer').setVisible(true);
                                    if(video_for == 'general'){
                                        win.down('#viewproductvideoBtn').setText('Watch general video on product');
                                    }else if(video_for == 'installation'){
                                        win.down('#viewproductvideoBtn').setText('Watch Installation video');
                                    }else if(video_for == 'description'){
                                       win.down('#viewproductvideoBtn').setText('Watch Video description video');
                                    }else if(video_for == 'consumption'){
                                       win.down('#viewproductvideoBtn').setText('Watch Product Consumption Video');
                                    }else if(video_for == 'testimonial'){
                                        win.down('#viewproductvideoBtn').setText('Watch Product Testimonials');
                                    }else if(video_for == 'operational'){
                                        win.down('#viewproductvideoBtn').setText('Watch Operational video');
                                    }else if(video_for == 'live'){
                                        win.down('#viewproductvideoBtn').setText('Watch Live Video');
                                    }else if(video_for == 'informational'){
                                        win.down('#viewproductvideoBtn').setText('Know more about this product');
                                    }else if(video_for == 'pitch'){
                                        win.down('#viewproductvideoBtn').setText('Watch a Pitch on the Product');
                                    }else if(video_for == 'instructional'){
                                        win.down('#viewproductvideoBtn').setText('Watch product Instructional video');
                                    }else if(video_for == 'training'){
                                        win.down('#viewproductvideoBtn').setText('Watch product training video');
                                    }else if(video_for == 'demonstration'){
                                        win.down('#viewproductvideoBtn').setText('Watch product demonstration video');
                                    }else if(video_for == 'coupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to couple this product');
                                    }else if(video_for == 'decoupling'){
                                        win.down('#viewproductvideoBtn').setText('Watch how to decouple this product');
                                    }else if(video_for == 'coupling_decoupling'){
                                       win.down('#viewproductvideoBtn').setText('Watch how to couple/decouple this product');
                                    }

        			}
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/

                                console.log('this is a hamper:'.is_a_hamper);


                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'hamper_view',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                product_quantity_in_the_hamper:product_quantity_in_hamper,
                                hamper_product_amount:Ext.util.Format.number(product_cost_in_hamper,'0,000.00'),
                                is_store_hamper_content:0,
                                is_a_hamper:is_a_hamper,
                                is_with_video:is_with_video,
                                video_for:video_for


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});






    },

    onViewingThisHamperContentButtonClick: function(button, e, eOpts) {
        var grid = this.getAllOthersHamperSentToMemberGrid(),
            record = grid.getSelectionModel().getSelection();

        if(record[0]){

            var win = Ext.create('Cobuy.view.ContentsOfHamperWin');

            var values = {
                hamper_id:record[0].get('hamper_id')
            };

            win.down('form').getForm().setValues(values);

            //win.setTitle(hamper_label + " "+ "hamper contents");

            win.show();



        }else{
            Ext.Msg.alert('Error', 'Please select a hamper to view its content');

        }


    },

    onDeliveryTypeComparisonButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.DeliveryTypeInformationWin');

        win.show();
    },

    onChangingTheQuantityOfAHamperItemButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Product/changingTheQuantityOfAHamperItem',
                            params:{
                                product_id:product_id,
                                hamper_id:hamper_id
                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    var values = {
                                                cost_of_hamper:Ext.util.Format.number(result.price,'0,000.00')
                                            };
                                            Ext.getCmp('addingproductstohamperwin').down('form').getForm().setValues(values);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');

                                    win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}

                    **/

        var win = button.up('window'),
            formPanel = win.down('form');

        var hamper_id = win.down('form').down('hiddenfield[name=hamper_id]').getValue();

        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();
        Ext.Ajax.request({
           url: '/cobuy/index.php?r=Product/changingTheQuantityOfAHamperItem',
                            params:{
                                product_id:product_id,
                                hamper_id:hamper_id
                            },

                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              var values = {
                                                cost_of_hamper:Ext.util.Format.number(jsonResponse.price,'0,000.00')
                                            };
                                            Ext.getCmp('addingproductstohamperwin').down('form').getForm().setValues(values);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');

                                    win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onTipsOfHamperDeliveryManagementButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.TipsOnHowToLowerTheCostOfHamperDeliveryCostWin');

        win.show();
    },

    onVerifyingMembershipNumberButtonClick: function(button, e, eOpts) {
        /**var win = button.up('window'),
        formPanel = win.down('form');

        var membership_number = win.down('#nonconnectedBeneficiary').getValue();


        	if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/verifyThisMembershipNumber',
                            params:{
                                membership_number:membership_number

                            },

                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //win.close();

                                 } else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
                    **/

        var win = button.up('window'),
        			formPanel = win.down('form');
                    //formPanel = win.down('form');
        var membership_number = win.down('#nonconnectedBeneficiary').getValue();


        Ext.Ajax.request({
            url: '/cobuy/index.php?r=Members/verifyThisMembershipNumber',
                            params:{
                                membership_number:membership_number

                            },
                       success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
                          if(jsonResponse.success){
                               var result = jsonResponse;
                              var msg = jsonResponse.msg;
        					  Ext.Msg.alert('Success!', msg);
                              //win.close();


                          }else{
        						Ext.Msg.alert('ERROR', jsonResponse.msg);
        				  }
                   },
        		   failure: function(response, options) {
        				Ext.Msg.alert('Faulure Error', response.responseText);
        				}

            });

    },

    onAddingProductsToHamperWindowRender: function(component, eOpts) {
        //load both the category and the product type combos

        component.down('#storeProductCategoryCombo').getStore().load({
            params:{
                service_id:0

            }
        });


        component.down('#storeProductTypeCombo').getStore().load({
            params:{
                category_id:0,
                service_id:0
            }
        });


        //load the store dataview
        component.down('#productDataview').getStore().load();


    },

    onHamperServiceComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var service_id = combo.getValue();

        //get the category combo

        var category_combo = win.down('#storeProductCategoryCombo');

        var type_combo = win.down('#storeProductTypeCombo');


        category_combo.reset();

        type_combo.reset();


        //reload the type combo

        type_combo.getStore().reload();

        //load the combo

        category_combo.getStore().load({
            params:{
                service_id:service_id
            }
        });

        //load the product type combo

        type_combo.getStore().load({
            params:{
                category_id:0,
                service_id:service_id
            }
        });
    },

    onHamperProductCategoryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var category_id = combo.getValue();

        //get the product type combo

        var service_id = win.down('#storeServiceCombo').getValue();

        //get the product type combo

        var type_combo = win.down('#storeProductTypeCombo');

        var category_combo = win.down('#storeProductCategoryCombo');

        type_combo.reset();

        //load the combo

        category_combo.getStore().reload({
            params:{
                service_id:service_id,
                category_id:category_id
            }
        });


        //load the combo

        type_combo.getStore().load({
            params:{
                category_id:category_id,
                service_id:service_id
            }
        });

    },

    onHamperStoreSearchComboboxSpecialkey: function(field, e, eOpts) {
        var win = field.up('window');

        var service = win.down('#storeServiceCombo').getValue();

        var category = win.down('#storeProductCategoryCombo').getValue();

        var type = win.down('#storeProductTypeCombo').getValue();

        var searchstring  = win.down('#storeSearchCombo').getValue();



        //load the database

        var dataview = win.down('#productDataview');

        if(e.getKey() == e.ENTER){

            dataview.getStore().load({
            params:{
                service:service,
                category:category,
                type:type,
                searchstring:searchstring
            }
        });



        }

    },

    onSearchingStoreForHamperButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var service = win.down('#storeServiceCombo').getValue();

        var category = win.down('#storeProductCategoryCombo').getValue();

        var type = win.down('#storeProductTypeCombo').getValue();

        var searchstring  = win.down('#storeSearchCombo').getValue();


        //load the database

        var dataview = win.down('#productDataview');

        dataview.getStore().load({
            params:{
                service:service,
                category:category,
                type:type,
                searchstring:searchstring
            }
        });
    },

    onSubscriptionTypeComparisonButtonClick: function(button, e, eOpts) {
        var win = Ext.create('Cobuy.view.ComparisonOfProductSubscriptionTypesWin');

        win.show();
    },

    onMonthSubscriptionRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#numberofmonthsField').setVisible(true);
            win.down('#numberofyearsField').setVisible(false);
            win.down('#numberofyearsField').reset();

        }else{
            win.down('#numberofmonthsField').setVisible(false);
            win.down('#numberofyearsField').setVisible(true);
        }
    },

    onYearlySubscriptionRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#numberofmonthsField').setVisible(false);
            win.down('#numberofyearsField').setVisible(true);
            win.down('#numberofmonthsField').reset();

        }else{
            win.down('#numberofmonthsField').setVisible(true);
            win.down('#numberofyearsField').setVisible(false);
        }
    },

    onSalesPitchVideoCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#salespitchVideoFile').setDisabled(false);
        }else{
            win.down('#salespitchVideoFile').setDisabled(true);
        }
    },

    onViewingTheEscrowedProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        //get the membership number in the textfield
        var product_code = win.down('#thisescrowedproductBox').getValue();
        var escrow_id = win.down('form').down('hiddenfield[name=escrow_id]').getValue();
        var product_id = win.down('form').down('hiddenfield[name=product_id]').getValue();
        var is_quoted = win.down('form').down('hiddenfield[name=is_quoted]').getValue();
        var is_futures = win.down('form').down('hiddenfield[name=is_futures]').getValue();
        var quantity_of_purchase = win.down('form').down('hiddenfield[name=quantity]').getValue();


        formPanel = win.down('form');
        			//store = this.getAllSubscriptionPaymentsGrid().getStore();


                      Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/retrieveproductinformation',
                          params:{
                             product_id: product_id

                            },
        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {
                                var with_constituents = jsonResponse.constituents;

                                if(with_constituents == false || with_constituents == 0){
                                    var win = Ext.create('Cobuy.view.ProductsDetailWin');

                                }else{
                                    var win = Ext.create('Cobuy.view.ProductdetailsPanelForProductsWithConstituentsWin');
                                }


                                var name = jsonResponse.product.name;
                                var description = jsonResponse.product.description;
                                var condition= jsonResponse.product.condition;
                                var feature = jsonResponse.product.feature;
                                var specifications = jsonResponse.product.specifications;
                                var start_price_validity_period = jsonResponse.start_price_validity_period;
                                var end_price_validity_period = jsonResponse.end_price_validity_period;
                                var price_validity_period = jsonResponse.product.price_validity_period;
                                //var per_portion_price = jsonResponse.product.per_portion_price;
                                //var quantity = jsonResponse.product.quantity;
                                var minimum_number_of_product_to_buy = jsonResponse.product.minimum_number_of_product_to_buy;
                                var whats_in_a_park = jsonResponse.product.whats_in_a_park;
                                var whats_product_per_item = jsonResponse.product.whats_product_per_item;
                                var brand= jsonResponse.product.brand;
                                var maker = jsonResponse.product.maker;
                                var origin = jsonResponse.product.origin;
                                var prevailing_retail_selling_price = jsonResponse.product.prevailing_retail_selling_price;
                                var prevailing_retail_selling_price_for_display = Ext.util.Format.number(jsonResponse.product.prevailing_retail_selling_price,'0,000.00');
                                var per_portion_price = jsonResponse.product.per_portion_price;
                                var per_portion_price_for_display = Ext.util.Format.number(jsonResponse.product.per_portion_price,'0,000.00');
                                var validity = jsonResponse.validity;
                                var member = jsonResponse.member;
                                var service_code = jsonResponse.service_code;
                                var product_type_id = jsonResponse.product.product_type_id;
                                var service_id = jsonResponse.product.service_id;
                                var category_id = jsonResponse.product.category_id;
                                var id = jsonResponse.product.id;
                                var is_escrowable = jsonResponse.product.is_escrowable;
                                var is_future_tradable = jsonResponse.product.is_future_tradable;
                                var is_quotable = jsonResponse.product.is_quotable;
                                var code = jsonResponse.product.code;
                                var is_escrowable=1;
                                var is_quotable= is_quoted;
                                var future_trading = is_futures;



                                //var remaining_quantity = jsonResponse.remaining_quantity;
                                if(jsonResponse.product.quantity <0){
                                    var quantity = 'Very Large Stock';
                                    }else{
                                         var quantity = Ext.util.Format.number(jsonResponse.product.quantity,'0,000');
                                    }
                                if(jsonResponse.remaining_quantity <0){
                                    var remaining_quantity = 'Many';
                                }else{
                                   var remaining_quantity = Ext.util.Format.number(jsonResponse.remaining_quantity,'0,000');;
                                }
                              /**
                                if(jsonResponse.validity == true){
                                    var amount_to_be_paid = per_portion_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }else{
                                  var amount_to_be_paid = prevailing_retail_selling_price * quantity_of_purchase;
                                    var amount_save_on_purchase = (prevailing_retail_selling_price -per_portion_price) * quantity_of_purchase;
                                }
                                **/
                                console.log('the maximum quantity on sale is:',quantity);

                                 console.log('what represents an item is',whats_product_per_item);






                            } //success ends here

                            var values = {

                                type_id:product_type_id,
                                product_id:id,
                                category_id:category_id,
                                service_id:service_id,
                                name:name,
                                description:description,
                                condition:condition,
                                feature:feature,
                                specifications:specifications,
                                price_validity_period:price_validity_period,
                                //per_portion_price:per_portion_price,
                                //quantity:Ext.util.Format.number(quantity,'0,000'),
                                quantity:quantity,
                                minimum_number_of_product_to_buy:Ext.util.Format.number(minimum_number_of_product_to_buy,'0,000'),
                                minimum_number_of_product_to_buy_for_computation:minimum_number_of_product_to_buy,
                                whats_in_a_park:whats_in_a_park,
                                whats_product_per_item:whats_product_per_item,
                                whats_represents_an_item:whats_product_per_item,
                                brand:brand,
                                maker:maker,
                                origin:origin,
                                operation:'knowmore',
                                operation_detail:'invoking_escrow',
                                prevailing_retail_selling_price:prevailing_retail_selling_price,
                                per_portion_price:per_portion_price,
                                validity:validity,
                                member:member,
                                service_code:service_code,
                                remaining_quantity_on_sale:remaining_quantity,
                                prevailing_retail_selling_price_for_display:prevailing_retail_selling_price_for_display,
                                per_portion_price_for_display:per_portion_price_for_display,
                                is_escrowable:is_escrowable,
                                is_future_tradable:is_future_tradable,
                                is_quotable:is_quotable,
                                code:code,
                                escrow_id:escrow_id,
                                future_trading:future_trading,
                                need_escrow_agreement:1,
                                quantity_of_purchase:quantity_of_purchase


                               // start_price_validity_period:start_price_validity_period,
                                //end_price_validity_period:end_price_validity_period


                            };

                                //load the form
                           // win.down('form').loadRecord(record);

                            win.down('form').getForm().setValues(values);

                            win.show();
        				}




        			});



    },

    onHamperStoreServiceComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var service_id = field.getValue();

        //get the category combo

        var category_combo = win.down('#storeProductCategoryCombo');

        var type_combo = win.down('#storeProductTypeCombo');


        category_combo.reset();

        type_combo.reset();


        //reload the type combo

        type_combo.getStore().reload();

        //load the combo

        category_combo.getStore().load({
            params:{
                service_id:service_id
            }
        });

        //load the product type combo

        type_combo.getStore().load({
            params:{
                category_id:0,
                service_id:service_id
            }
        });
    },

    onHamperStoreProductCategoryComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        var category_id = field.getValue();

        //get the product type combo

        var service_id = win.down('#storeServiceCombo').getValue();

        //get the product type combo

        var type_combo = win.down('#storeProductTypeCombo');

        var category_combo = win.down('#storeProductCategoryCombo');

        type_combo.reset();

        //load the combo

        category_combo.getStore().reload({
            params:{
                service_id:service_id,
                category_id:category_id
            }
        });


        //load the combo

        type_combo.getStore().load({
            params:{
                category_id:category_id,
                service_id:service_id
            }
        });

    },

    onPreviewHamperContainerButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var container_id = win.down('#hampercontainerCombo').getValue();

        var win = Ext.create('Cobuy.view.HamperContainerImageWin');

        //load the dataview

        win.down('#hamperDataview').getStore().load({
            params:{
                container_id:container_id
            }
        });

        win.show();
    },

    onHamperContainerDataviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = Ext.create('Cobuy.view.HamperContainerDetailsWin');

        var form = win.down('form');

        //load the form

        form.loadRecord(record);

        win.show();
    },

    onUpdateProfileCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#termsCheckbox').setValue(true);
        }else{
            win.down('#termsCheckbox').setValue(false);
        }
    },

    init: function(application) {
        this.control({
            "memberaccountdetailwin button#forward": {
                click: this.onForwardButtonClick
            },
            "memberaccountdetailwin button#backward": {
                click: this.onBackwardButtonClick
            },
            "radiofield#updateonlyRadio": {
                change: this.onUpdateOnlyRadiofieldChange
            },
            "radiofield#updateandrenewRadio": {
                change: this.onUpdateAndRenewRadiofieldChange
            },
            "memberaccountdetailwin button#update_onlyBtn": {
                click: this.onUpdateMemberAccountInformationButtonClick
            },
            "memberaccountdetailwin button#updateandrenewBtn": {
                click: this.onUpdateAndRenewMemberAccountButtonClick
            },
            "memberaccountdetailwin checkboxfield#termsCheckbox": {
                change: this.onAccountDetailCheckboxfieldChange
            },
            "button#termsBtn": {
                click: this.onTermsAndConditionsButtonClick
            },
            "memberaccountdetailwin": {
                render: this.onMemberAccountDetailWindowRender
            },
            "memberaccountdetailwin dataview#existingOrders": {
                itemdblclick: this.onHistoryPurchasedOrdersDataviewItemDblClick
            },
            "memberaccountdetailwin button#changepasswordBtn": {
                click: this.onChangeAMemberPasswordButtonClick
            },
            "changememberpasswordwin button#changepasswordBtn": {
                click: this.onChangeThisMemberPasswordButtonClick
            },
            "radiofield#updateandextendRadio": {
                change: this.onUpdateAndExtendRadiofieldChange
            },
            "memberaccountdetailwin button#updateandextendBtn": {
                click: this.onUpdateAndExtendMembershipSubscriptionButtonClick
            },
            "memberaccountdetailwin dataview#lastSixMonthOrders": {
                itemdblclick: this.onLastSixMonthsProductsOccurrenceDataviewItemDblClick
            },
            "memberaccountdetailwin dataview#ordersBeyondSixMonths": {
                itemdblclick: this.onBeyondSixMonthsProductsOccurrenceDataviewItemDblClick
            },
            "occurrenceproductnotexceedingsixmonthswin": {
                render: this.onLastSixMonthsProductOccurrenceHistoryWindowRender
            },
            "occurrenceproductbeyondsixmonthswin": {
                render: this.onBeyondSixMonthsProductTransactionHistoryWindowRender
            },
            "occurrenceproductnotexceedingsixmonthswin grid": {
                itemdblclick: this.onLastSixMonthsProductHistoryGridpanelItemDblClick
            },
            "occurrenceproductbeyondsixmonthswin grid": {
                itemdblclick: this.onOccurenceBeyondSixMonthsProductJHistoryGridpanelItemDblClick
            },
            "memberaccountdetailwin button#connectBtn": {
                click: this.onConnectingToThisMemberButtonClick
            },
            "connectingtoamemberwin button#connectBtn": {
                click: this.onMakingConnectionToAMemberButtonClick
            },
            "memberaccountdetailwin button#applyBtn": {
                click: this.onApplyForAProductTradingRequestButtonClick
            },
            "memberaccountdetailwin button#subscribeBtn": {
                click: this.onSubscribeToProductButtonClick
            },
            "radiofield#postsubscriptionRadio": {
                change: this.onPostSubscriptionRequestRadiofieldChange
            },
            "radiofield#presubscriptionRadio": {
                change: this.onPreSubscriptionRequestRadiofieldChange
            },
            "productsubscriptionwin button#postsubscriptionBtn": {
                click: this.onPostSubscriptionRequestButtonClick
            },
            "productsubscriptionwin button#presubscriptionBtn": {
                click: this.onPreSubscriptionRequestButtonClick
            },
            "button#tradableproductBtn": {
                click: this.onKnowMoreOfThisTradableProductButtonClick
            },
            "button#subscribeproductBtn": {
                click: this.onKnowMoreOfThisProductForSubscriptionButtonClick
            },
            "memberaccountdetailwin button#connectedtoBtn": {
                click: this.onViewingMyConnectionsToOthersButtonClick
            },
            "memberaccountdetailwin button#acceptrejectmemberBtn": {
                click: this.onAcceptRejectingMemberConnectionButtonClick
            },
            "memberaccountdetailwin button#disconnectmemberBtn": {
                click: this.onDisconnectingAMemberButtonClick
            },
            "memberaccountdetailwin button#suspendmemberBtn": {
                click: this.onSuspendingAMemberButtonClick
            },
            "memberaccountdetailwin button#removetradableproductBtn": {
                click: this.onRemoveTradableProductButtonClick
            },
            "memberaccountdetailwin button#schedulethissubscriptiondeliveryBtn": {
                click: this.onSchedulingSubscriptionDeliveryButtonClick
            },
            "memberaccountdetailwin button#unsubscribeBtn": {
                click: this.onUnsubscribingAMemberButtonClick
            },
            "memberaccountdetailwin button#modifyquoteBtn": {
                click: this.onModifyingQuoteButtonClick
            },
            "memberaccountdetailwin button#quoteresponsesBtn": {
                click: this.onQuoteResponseButtonClick
            },
            "memberaccountdetailwin button#modifyescrowBtn": {
                click: this.onModifyingEscrowButtonClick
            },
            "memberaccountdetailwin button#cancelescrowBtn": {
                click: this.onCancelAnescrowButtonClick
            },
            "memberaccountdetailwin button#invokeescrowBtn": {
                click: this.onInvokingEscrowButtonClick
            },
            "memberaccountdetailwin button#viewreceivedescrowBtn": {
                click: this.onViewingReceivedEscrowButtonClick
            },
            "memberaccountdetailwin button#acceptescrowBtn": {
                click: this.onAcceptingEscrowButtonClick
            },
            "memberaccountdetailwin button#rejectescrowBtn": {
                click: this.onRejectingReceivedEscrowButtonClick
            },
            "memberaccountdetailwin button#modifyfuturesBtn": {
                click: this.onModifyingFuturesButtonClick
            },
            "memberaccountdetailwin button#cancelfuturesrequestBtn": {
                click: this.onCancelFuturesRequestButtonClick
            },
            "memberaccountdetailwin button#createnewvoucherBtn": {
                click: this.onCreateNewVoucherButtonClick
            },
            "memberaccountdetailwin button#topupBtn": {
                click: this.onTopUpVoucherButtonClick
            },
            "memberaccountdetailwin button#limitvoucherBtn": {
                click: this.onLimitVoucherButtonClick
            },
            "memberaccountdetailwin button#createnewhampersBtn": {
                click: this.onCreateNewHampersButtonClick
            },
            "memberaccountdetailwin button#assignhampertobeneficiariesBtn": {
                click: this.onAssignHampersToBeneficiariesButtonClick
            },
            "detailinformationofamemberwin": {
                render: this.onDetailInformationOfMemberWindowRender
            },
            "detailinformationofamemberwin button#acceptmemberBtn": {
                click: this.onAcceptAMemberInYourConnectionButtonClick
            },
            "detailinformationofamemberwin button#rejectmemberBtn": {
                click: this.onRejectMemberInYourConnectionButtonClick
            },
            "detailinformationofamemberwin button#disconnectmemberBtn": {
                click: this.onDisconnectMemberConnectionButtonClick
            },
            "detailinformationofamemberwin button#suspendmemberBtn": {
                click: this.onSuspendThisMemberConnectionButtonClick
            },
            "detailinformationofamemberwin button#unsuspendmemberBtn": {
                click: this.onUnsuspendedThisMemberConnectionButtonClick
            },
            "memberaccountdetailwin #myconnectionsGrid": {
                itemclick: this.onMyMembersConnectionsGridpanelItemClick
            },
            "memberconnectionswin button#disconnectmemberBtn": {
                click: this.onDisconnectFromThisMemberButtonClick
            },
            "memberconnectionswin": {
                render: this.onMemberConnectionWindowRender
            },
            "button#removefromtradinglist": {
                click: this.onRemoveFromTradingListButtonClick
            },
            "memberaccountdetailwin #tradableproductsforvendorGrid": {
                itemdblclick: this.onVendorProductGridpanelItemDblClick
            },
            "memberaccountdetailwin button#quantitytopupBtn": {
                click: this.onTopUpSubscriptionQuantityButtonClick
            },
            "memberaccountdetailwin button#escrowsubscriptionBtn": {
                click: this.onEscrowTheSubscriptionButtonClick
            },
            "memberaccountdetailwin button#drawdownBtn": {
                click: this.onDrawDownOnsubscriptionButtonClick
            },
            "memberaccountdetailwin #productsubscriptionGrid": {
                itemclick: this.onProductSubscriptionGridGridpanelItemClick
            },
            "button#schedulesubscriptiondeliveryBtn": {
                click: this.onScheduleThisSubscriptionButtonClick
            },
            "button#unsubscribeBtn": {
                click: this.onUnscribeFromThisProductButtonClick
            },
            "button#topupsubscriptionBtn": {
                click: this.onToppingUpSubscriptionButtonClick
            },
            "button#escrowsubscriptionBtn": {
                click: this.onEscrowThisSubscriptionButtonClick
            },
            "button#drawdownonsubscriptionBtn": {
                click: this.onDrawingDownOnThisSubscriptionButtonClick
            },
            "memberaccountdetailwin button#sendtocartfromsubscriptionBtn": {
                click: this.onSendingPreSubscriptionToCartButtonClick
            },
            "button#thissubscribeproductBtn": {
                click: this.onDetailOfSubscribedProductButtonClick
            },
            "schedulesubscriptiondeliverywin button#scheduledeliveryBtn": {
                click: this.onScheduleSubscriptionDeliveryButtonClick
            },
            "subscribedproductdrawdownwin button#drawdownquantityBtn": {
                click: this.onDrawdownOnProductSubscriptionButtonClick
            },
            "escrowthisproductsubscriptionwin button#sendtoescrowBtn": {
                click: this.onEscrowThisSubscribedProductButtonClick
            },
            "topupsubscriptionwin button#topupthissuibscriptionBtn": {
                click: this.onToppingUpASubscribedProductButtonClick
            },
            "topupsubscriptionwin": {
                render: this.onTopupSubscriptionWindowRender
            },
            "topupsubscriptionwin button#topupthispresuibscriptionBtn": {
                click: this.onToppingUpAPresubscribedProductButtonClick
            },
            "memberaccountdetailwin #initiatedquotesgrid": {
                itemclick: this.onInitiatedQuoteGridpanelItemClick
            },
            "memberaccountdetailwin #receivedquotegrid": {
                itemclick: this.onReceivedQuoteGridpanelItemClick
            },
            "button#modifythisquoteBtn": {
                click: this.onEffectingModificationOnAQuoteButtonClick
            },
            "memberaccountdetailwin button#cancelquoteBtn": {
                click: this.onCancelAQuoteButtonClick
            },
            "button#cancelthisquoteBtn": {
                click: this.onCancelThisQuoteButtonClick
            },
            "memberaccountdetailwin button#viewquoterequestBtn": {
                click: this.onViewingThisQuoteRequestButtonClick
            },
            "button#sendthisquoteresponseBtn": {
                click: this.onSendThisQuoteResponseButtonClick
            },
            "checkboxfield#acceptescrowCheckbox": {
                change: this.onAcceptEscrowCheckboxfieldChange
            },
            "checkboxfield#acceptfuturesCheckbox": {
                change: this.onAcceptFuturesCheckboxfieldChange
            },
            "checkboxfield#quotationtermsandconditionsCheckbox": {
                change: this.onAcceptQuotationCheckboxfieldChange
            },
            "quoteresponsewin": {
                render: this.onQuoteResponseWindowRender
            },
            "quoteresponsewin button#thisquotedproductBtn": {
                click: this.onDisplayThisQuoteButtonClick
            },
            "quoteresponsewin button#sendquotationBtn": {
                click: this.onSendingThisQuoteResponseButtonClick
            },
            "memberquoteresponseswin": {
                render: this.onMemberQuoteResponseWindowRender
            },
            "button#viewthisquoteresponseBtn": {
                click: this.onViewingAQuoteResponseButtonClick
            },
            "radiofield#acceptquotationRadio": {
                change: this.onAcceptQutationRadiofieldChange
            },
            "radiofield#rejectquotationRadio": {
                change: this.onRejectQuotationRadiofieldChange
            },
            "quoteresponsewin button#acceptquotationBtn": {
                click: this.onAcceptingQuotationButtonClick
            },
            "quoteresponsewin button#rejectquotationBtn": {
                click: this.onRejectingQuotationButtonClick
            },
            "memberaccountdetailwin  button#viewinitiatedacceptedquoteBtn": {
                click: this.onViewingAcceptedQuotationButtonClick
            },
            "button#okBtn": {
                click: this.onOkButtonClick
            },
            "memberaccountdetailwin button#viewreceivedacceptedquoteBtn": {
                click: this.onViewingAcceptedReceivedQuotationButtonClick
            },
            "memberaccountdetailwin #initiatedescrowgrid": {
                itemclick: this.onInitiatedEscrowGridpanelItemClick
            },
            "memberaccountdetailwin #receivedescrowgrid": {
                itemclick: this.onReceivedEscrowGridpanelItemClick
            },
            "button#cancellingthisescrowBtn": {
                click: this.onCancellingTheEscrowButtonClick
            },
            "button#modifyingthisescrowBtn": {
                click: this.onModifyingThisEscrowButtonClick
            },
            "button#invokingthisescrowBtn": {
                click: this.onInvokingAnEscrowButtonClick
            },
            "checkboxfield#escrowTermsAndConditionCheckbox": {
                change: this.onEscrowTermsAndConditionsCheckboxfieldChange
            },
            "invocationofanescrowwin button#invokethisescrowBtn": {
                click: this.onInvokingThisEscrowButtonClick
            },
            "memberaccountdetailwin #initiatedfuturesgrid": {
                itemclick: this.onInitiatedFuturesGridpanelItemClick
            },
            "memberaccountdetailwin button#viewthisfuturesBtn": {
                click: this.onViewingThisFuturesButtonClick
            },
            "memberaccountdetailwin button#viewthisinitiatedfuturesBtn": {
                click: this.onViewingThisInitiatedFuturesButtonClick
            },
            "checkboxfield#escrowtermCheckbox": {
                change: this.onEscrowCheckboxfieldChange
            },
            "checkboxfield#vouchertermCheckbox": {
                change: this.onVoucherCheckboxfieldChange
            },
            "checkboxfield#topupvouchertermCheckbox": {
                change: this.onToppingUpVoucherCheckboxfieldChange
            },
            "radiofield#categoryLimiterRadio": {
                change: this.onContainerLimiterRadiofieldChange
            },
            "radiofield#productlimiterRadio": {
                change: this.onProductLimiterRadiofieldChange
            },
            "memberaccountdetailwin button#fundownwalletBtn": {
                click: this.onFundingOwnWalletButtonClick
            },
            "memberaccountdetailwin button#allocateallowanceBtn": {
                click: this.onAllocateAllowanceButtonClick
            },
            "voucherbeneficiarieswin button#addbeneficiaryBtn": {
                click: this.onAddingNewVoucherBeneficiaryButtonClick
            },
            "voucherbeneficiarieswin button#activatebeneficiaryfundBtn": {
                click: this.onActivateBeneficiaryButtonClick
            },
            "voucherbeneficiarieswin button#suspendbeneficiaryfundBtn": {
                click: this.onSuspendVoucherBeneficiaryButtonClick
            },
            "voucherbeneficiarieswin button#removebeneficiaryBtn": {
                click: this.onRemoveBeneficiaryButtonClick
            },
            "voucherbeneficiarieswin button#topupbeneficiaryvalueBtn": {
                click: this.onTopupBeneficiaryFundButtonClick
            },
            "checkboxfield#fundingmemberwallettermCheckbox": {
                change: this.onAcceptingFundingWalletsConditionCheckboxfieldChange
            },
            "memberaccountdetailwin button#productlimiterBtn": {
                click: this.onVoucherProductLimitersButtonClick
            },
            "memberaccountdetailwin button#categorylimiterBtn": {
                click: this.onCategoryVoucherLimitersButtonClick
            },
            "memberaccountdetailwin button#availablefundanalysisBtn": {
                click: this.onAnalysisOnExpendableFundButtonClick
            },
            "memberaccountdetailwin button#suspendedfundanalysisBtn": {
                click: this.onAnalysisOnSuspendedFundButtonClick
            },
            "createnewvoucherwin button#creatingvoucherBtn": {
                click: this.onCreatingANewVoucherButtonClick
            },
            "toppingupvoucherwin button#topupvoucherBtn": {
                click: this.onToppingUpAvoucherButtonClick
            },
            "memberaccountdetailwin #membervoucherGrid": {
                itemclick: this.onMemberVoucherGridpanelItemClick
            },
            "voucherlimiterswin button#addcategoryBtn": {
                click: this.onAddCategoryToVoucherButtonClick
            },
            "voucherlimiterswin": {
                render: this.onVoucherLimiterWindowRender
            },
            "voucherlimiterswin button#viewproductBtn": {
                click: this.onViewTheDetailsOfThisProductButtonClick
            },
            "voucherlimiterswin button#addproductBtn": {
                click: this.onAddingProductLimiterToAvoucherButtonClick
            },
            "voucherlimiterswin button#changecategorystatusBtn": {
                click: this.onChangeCategoryStatusButtonClick
            },
            "voucherlimiterswin button#deletecategoryBtn": {
                click: this.onRemoveCategoryFromVoucherListButtonClick
            },
            "voucherlimiterswin button#changestatusBtn": {
                click: this.onChangeTheStatusOfProductInVoucherListButtonClick
            },
            "voucherlimiterswin button#deleteBtn": {
                click: this.onRemoveProductFromVoucherListButtonClick
            },
            "checkboxfield#fundingwallettermCheckbox": {
                change: this.onFundingOnWalletTermsCheckboxfieldChange
            },
            "fundingownwalletwin button#fundwalletBtn": {
                click: this.onAllocatingFundsToOwnWalletButtonClick
            },
            "fundinganothermemberwalletwin button#fundamemberwalletBtn": {
                click: this.onFundingOtherMembersWalletButtonClick
            },
            "fundinganothermemberwalletwin button#activateamemberfundBtn": {
                click: this.onActivatingAllocatedFundToAMemberButtonClick
            },
            "fundinganothermemberwalletwin button#suspendamemberfundBtn": {
                click: this.onSuspendTheAllocatedFundToAMemberButtonClick
            },
            "fundinganothermemberwalletwin button#unsuspendamemberfundBtn": {
                click: this.onUnsuspendTheAllocatedFundToAMemberButtonClick
            },
            "fundinganothermemberwalletwin button#removebeneficiaryBtn": {
                click: this.onRemoveAVoucherBeneficiaryButtonClick
            },
            "fundinganothermemberwalletwin button#topupbeneficiaryfundBtn": {
                click: this.onTopUpBeneficiaryAllocatedValueButtonClick
            },
            "voucherbeneficiarieswin": {
                render: this.onVoucherBeneficiayWindowRender
            },
            "voucherbeneficiarieswin grid": {
                itemclick: this.onVoucherBeneficiaryGridpanelItemClick
            },
            "viewalltheproductsthisvouchercanbuywin": {
                render: this.onViewingVoucherProductLimitersWindowRender
            },
            "viewallthecategoriesthisvouchercanbuywin": {
                render: this.onViewingCategoriesThatLimitedAVoucherWindowRender
            },
            "viewalltheproductsthisvouchercanbuywin button#productdetailsBtn": {
                click: this.onViewingAProductForAVoucherLimiterButtonClick
            },
            "viewallthecategoriesthisvouchercanbuywin button#viewproductsincategoryBtn": {
                click: this.onViewCategoryVoucherLimitersButtonClick
            },
            "productsinacategorywin button#viewproductsBtn": {
                click: this.onViewingProductInCategoryButtonClick
            },
            "productsinacategorywin": {
                render: this.onProductsInCategoryWindowRender
            },
            "memberwalletanalysiswin": {
                render: this.onMemberWalletAnalysisWindowRender
            },
            "memberaccountdetailwin button#refreshavailablevalueBtn": {
                click: this.onRefreshingAvailableBalanceInTheWalletButtonClick
            },
            "memberaccountdetailwin button#refreshsuspendedfundvalueBtn": {
                click: this.onRefreshingSuspendedBalanceInTheWalletButtonClick
            },
            "createnewhamperswin button#createBtn": {
                click: this.onCreatingNewCustomHampersButtonClick
            },
            "memberaccountdetailwin  button#edithamperinfoBtn": {
                click: this.onEditingTheHampersInfoButtonClick
            },
            "createnewhamperswin": {
                render: this.onCreateNewHamperWindowRender
            },
            "createnewhamperswin button#editBtn": {
                click: this.onEditingMemberHamperButtonClick
            },
            "memberaccountdetailwin button#deletehamperBtn": {
                click: this.onDeleteHampersButtonClick
            },
            "memberaccountdetailwin button#hamperdeliveryBtn": {
                click: this.onHamperDeliveryManagerButtonClick
            },
            "hamperdeliverymanagerwin button#addconnectedmemberBtn": {
                click: this.onAddingANewConnectedMemberAsHamperBeneficiaryButtonClick
            },
            "radiofield#registeredAddressRadio": {
                change: this.onRegisteredAddressRadiofieldChange
            },
            "radiofield#nonRegisteredAddressRadio": {
                change: this.onNonRegisteredAddressRadiofieldChange1
            },
            "hamperdeliverymanagerwin button#editconnectedmemberBtn": {
                click: this.onEditingConnectedMembersInfoButtonClick
            },
            "hamperdeliverymanagerwin button#deleteconnectedmemberBtn": {
                click: this.onRemovingConnectedMembersFromBeneficiaryListButtonClick
            },
            "hamperdeliverymanagerwin button#connectedmemberdeliveryreportBtn": {
                click: this.onConnectedMembersDeliveryReportButtonClick
            },
            "hamperdeliverymanagerwin button#addnonconnectedmemberBtn": {
                click: this.onAddingNonConnectedMembersAsHamperBeneficiaryButtonClick
            },
            "hamperdeliverymanagerwin button#editnonconnectedmemberBtn": {
                click: this.onEditingNonConnectedMemberHamperBeneficiaryButtonClick
            },
            "hamperdeliverymanagerwin button#deletenonconnectedmemberBtn": {
                click: this.onRemovingNonConnectedMemeberFromHamperBeneficiaryListButtonClick
            },
            "hamperdeliverymanagerwin button#nonconnectedmemberdeliveryreportBtn": {
                click: this.onNonConnectedMemberDeliveryReportButtonClick
            },
            "hamperdeliverymanagerwin button#addnonmemberBtn": {
                click: this.onAddingANonMemberHamperBeneficiaryButtonClick
            },
            "hamperdeliverymanagerwin button#editnonmemberBtn": {
                click: this.onEditingANonMemberHamperButtonClick
            },
            "hamperdeliverymanagerwin button#deletenonmemberBtn": {
                click: this.onRemovingANonMemberAsBeneficiaryButtonClick
            },
            "hamperdeliverymanagerwin button#nonmemberdeliveryreportBtn": {
                click: this.onNonMemberDeliveryReportButtonClick
            },
            "hamperdeliverymanagerwin": {
                render: this.onHamperDeliveryManagerWindowRender
            },
            "addingnewconnectedmemberbeneficiarywin": {
                render: this.onAddingNewConnectedMemberHamperBeneficiaryWindowRender
            },
            "addingnewnonconnectedmemberbeneficiarywin": {
                render: this.onAddingNonConnectedMemberAsHamperBeneficiaryWindowRender
            },
            "addinganonmemberbeneficiarywin": {
                render: this.onAddingANonMemberAsHamperBeneficiaryWindowRender
            },
            "addingnewconnectedmemberbeneficiarywin button#addconnectedbeneficiaryBtn": {
                click: this.onSaveTheAdditionOfAConnectedMemberAsHamperBeneficiaryButtonClick
            },
            "addingnewconnectedmemberbeneficiarywin button#editconnectedbeneficiaryBtn": {
                click: this.onSaveTheEdittedInfoOfConnectedMemberAsHamperBeneficiaryButtonClick
            },
            "addingnewnonconnectedmemberbeneficiarywin button#addnonconnectedbeneficiaryBtn": {
                click: this.onSaveTheAdditionOfNonConnectedMemberAsHamperBeneficiaryButtonClick
            },
            "addingnewnonconnectedmemberbeneficiarywin button#editnonconnectedbeneficiaryBtn": {
                click: this.onSaveTheEdittedInfoOfNonConnectedmemberAsHamperBeneficiaryButtonClick
            },
            "addinganonmemberbeneficiarywin button#addnonmemberbeneficiaryBtn": {
                click: this.onSaveTheAdditionOfNonMemberAsHamperBeneficiaryButtonClick
            },
            "addinganonmemberbeneficiarywin button#editnonmemberbeneficiaryBtn": {
                click: this.onSaveTheEdittedInfoOfNonMemberAsHamperBeneficiaryButtonClick
            },
            "memberaccountdetailwin button#addingoreditingcontentinhamperBtn": {
                click: this.onAddingAndEditingHamperContentButtonClick
            },
            "addingproductstohamperwin dataview#productDataview": {
                itemclick: this.onSelectingAProductForhamperDataviewItemClick,
                itemdblclick: this.onKnowmoreAboutThisProductDataviewItemDblClick
            },
            "addingproductstohamperwin button#addhamperBtn": {
                click: this.onAddingAProductToHamperButtonClick
            },
            "addingproductstohamperwin dataview#hamperDataview": {
                itemclick: this.onSelectingAProductInTheHamperDataviewItemClick,
                itemdblclick: this.onKnowmoreAboutTheProductTheHamperDataviewItemDblClick
            },
            "addingproductstohamperwin button#removeproductfromhamperBtn": {
                click: this.onRemovingProductFromHamperButtonClick
            },
            "addingproductstohamperwin button#searchBtn": {
                click: this.onSearchingProductsForHamperButtonClick
            },
            "addingproductstohamperwin combobox#searchCombo": {
                specialkey: this.onSearchingProductForHamperComboboxSpecialkey
            },
            "memberaccountdetailwin button#sendhampertocartBtn": {
                click: this.onSendingHamperToCartButtonClick
            },
            "hampercartwin checkboxfield#termsandconditionCheckbox": {
                change: this.onHamperCartTermsAndConditionsCheckboxfieldChange
            },
            "hampercartwin button#sendhampertocartBtn": {
                click: this.onSendThisHamperToCartButtonClick
            },
            "memberaccountdetailwin button#redirecthamperdeliveryBtn": {
                click: this.onRedirectingTheDeliveryOfHamperButtonClick
            },
            "checkboxfield#redirectTermsAndConditionsCheckbox": {
                change: this.onRedirectHamperTermsAndConditionsCheckboxfieldChange
            },
            "checkboxfield#selectedDeliveryRegisteredAddressCheckbox": {
                change: this.onScheduledDeliveryAddressCheckboxfieldChange
            },
            "radiofield#registeredAddressForRedirectionRadio": {
                change: this.onPrimaryAddressRadiofieldChange
            },
            "radiofield#nonRegisteredAddressForRedirectionRadio": {
                change: this.onNewPreferrableAdressRadiofieldChange
            },
            "hamperredirectionwin button#redirecthamperdeliveryBtn": {
                click: this.onRedirectingThisHamperDeliveryButtonClick
            },
            "hamperredirectionwin button#viewhampercontentBtn": {
                click: this.onViewingContentsInAHamperButtonClick
            },
            "contentsofhamperwin": {
                render: this.onContentsInHamperWindowRender
            },
            "contentsofhamperwin dataview": {
                itemdblclick: this.onHamperContentDataviewItemDblClick
            },
            "memberaccountdetailwin button#viewhampercontentBtn": {
                click: this.onViewingThisHamperContentButtonClick
            },
            "button#deliverytypeBtn": {
                click: this.onDeliveryTypeComparisonButtonClick
            },
            "button#changethequantityofproductinhamperBtn": {
                click: this.onChangingTheQuantityOfAHamperItemButtonClick
            },
            "button#tipsondeliverycostreductionBtn": {
                click: this.onTipsOfHamperDeliveryManagementButtonClick
            },
            "button#memberBtn": {
                click: this.onVerifyingMembershipNumberButtonClick
            },
            "addingproductstohamperwin": {
                render: this.onAddingProductsToHamperWindowRender
            },
            "addingproductstohamperwin combobox#storeServiceCombo": {
                select: this.onHamperServiceComboboxSelect
            },
            "addingproductstohamperwin combobox#storeProductCategoryCombo": {
                select: this.onHamperProductCategoryComboboxSelect
            },
            "addingproductstohamperwin combobox#storeSearchCombo": {
                specialkey: this.onHamperStoreSearchComboboxSpecialkey
            },
            "addingproductstohamperwin button#hampersearchBtn": {
                click: this.onSearchingStoreForHamperButtonClick
            },
            "productsubscriptionwin button#comparetypesBtn": {
                click: this.onSubscriptionTypeComparisonButtonClick
            },
            "radiofield#monthlySubscriptionRadio": {
                change: this.onMonthSubscriptionRadiofieldChange
            },
            "radiofield#yearlySubscriptionRadio": {
                change: this.onYearlySubscriptionRadiofieldChange
            },
            "checkboxfield#salesPitchVideoCheckbox": {
                change: this.onSalesPitchVideoCheckboxfieldChange
            },
            "button#thisescrowedproductBtn": {
                click: this.onViewingTheEscrowedProductButtonClick
            },
            "combobox#storeServiceCombo": {
                change: this.onHamperStoreServiceComboboxChange
            },
            "combobox#storeProductCategoryCombo": {
                change: this.onHamperStoreProductCategoryComboboxChange
            },
            "button#previewcontainerBtn": {
                click: this.onPreviewHamperContainerButtonClick
            },
            "hampercontainerimagewin dataview#hamperDataview": {
                itemdblclick: this.onHamperContainerDataviewItemDblClick
            },
            "checkboxfield#updateprofileCheckbox": {
                change: this.onUpdateProfileCheckboxfieldChange
            }
        });
    }

});
